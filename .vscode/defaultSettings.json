{
	// Contrôle si l'éditeur affiche CodeLens.
	"diffEditor.codeLens": false,

	// Quand il est activé, l'éditeur de différences ignore les changements d'espace blanc de début ou de fin.
	"diffEditor.ignoreTrimWhitespace": true,

	// Délai d'expiration en millisecondes avant annulation du calcul de diff. Utilisez 0 pour supprimer le délai d'expiration.
	"diffEditor.maxComputationTime": 5000,

	// Maximum file size in MB for which to compute diffs. Use 0 for no limit.
	"diffEditor.maxFileSize": 50,

	// Contrôle si l'éditeur de différences affiche les indicateurs +/- pour les changements ajoutés/supprimés .
	"diffEditor.renderIndicators": true,

	// Contrôle si l'éditeur de différences affiche les différences en mode côte à côte ou inline.
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: Le retour automatique à la ligne n'est jamais effectué.
	//  - on: Le retour automatique à la ligne s'effectue en fonction de la largeur de la fenêtre d'affichage.
	//  - inherit: Le retour automatique à la ligne dépend du paramètre '#editor.wordWrap#'.
	"diffEditor.wordWrap": "inherit",

	// Contrôle si les suggestions doivent être acceptées sur les caractères de validation. Par exemple, en JavaScript, le point-virgule (`;`) peut être un caractère de validation qui accepte une suggestion et tape ce caractère.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Contrôle si les suggestions sont acceptées après appui sur 'Entrée', en plus de 'Tab'. Permet d’éviter toute ambiguïté entre l’insertion de nouvelles lignes et l'acceptation de suggestions.
	//  - on
	//  - smart: Accepter uniquement une suggestion avec 'Entrée' quand elle effectue une modification textuelle.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Contrôle le nombre de lignes de l’éditeur qu’un lecteur d’écran peut lire en une seule fois. Quand nous détectons un lecteur d’écran, nous définissons automatiquement la valeur par défaut à 500. Attention : Les valeurs supérieures à la valeur par défaut peuvent avoir un impact important sur les performances.
	"editor.accessibilityPageSize": 10,

	// Contrôle si l'éditeur doit s'exécuter dans un mode optimisé pour les lecteurs d'écran. Si la valeur est on, le retour automatique à la ligne est désactivé.
	//  - auto: L'éditeur utilise les API de la plateforme pour détecter si un lecteur d'écran est attaché.
	//  - on: L'éditeur est optimisé en permanence pour les lecteurs d'écran. Le retour automatique à la ligne est désactivé.
	//  - off: L'éditeur n'est jamais optimisé pour une utilisation avec un lecteur d'écran.
	"editor.accessibilitySupport": "auto",

	// Contrôle si l’éditeur doit fermer automatiquement les parenthèses quand l’utilisateur ajoute une parenthèse ouvrante.
	//  - always
	//  - languageDefined: Utilisez les configurations de langage pour déterminer quand fermer automatiquement les parenthèses.
	//  - beforeWhitespace: Fermer automatiquement les parenthèses uniquement lorsque le curseur est à gauche de l’espace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Contrôle si l'éditeur doit supprimer les guillemets ou crochets fermants adjacents au moment de la suppression.
	//  - always
	//  - auto: Supprimez les guillemets ou crochets fermants adjacents uniquement s'ils ont été insérés automatiquement.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Contrôle si l'éditeur doit taper avant les guillemets ou crochets fermants.
	//  - always
	//  - auto: Tapez avant les guillemets ou les crochets fermants uniquement s'ils sont automatiquement insérés.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Contrôle si l’éditeur doit fermer automatiquement les guillemets après que l’utilisateur ajoute un guillemet ouvrant.
	//  - always
	//  - languageDefined: Utilisez les configurations de langage pour déterminer quand fermer automatiquement les guillemets.
	//  - beforeWhitespace: Fermer automatiquement les guillemets uniquement lorsque le curseur est à gauche de l’espace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Contrôle si l'éditeur doit ajuster automatiquement le retrait quand les utilisateurs tapent, collent, déplacent ou mettent en retrait des lignes.
	//  - none: L'éditeur n'insère pas de retrait automatiquement.
	//  - keep: L'éditeur conserve le retrait de la ligne actuelle.
	//  - brackets: L'éditeur conserve le retrait de la ligne actuelle et honore les crochets définis par le langage.
	//  - advanced: L'éditeur conserve le retrait de la ligne actuelle, honore les crochets définis par le langage et appelle des objets onEnterRules spéciaux définis par les langages.
	//  - full: L'éditeur conserve le retrait de la ligne actuelle, honore les crochets définis par le langage, appelle des objets onEnterRules spéciaux définis par les langages et honore les objets indentationRules définis par les langages.
	"editor.autoIndent": "full",

	// Contrôle si l'éditeur doit automatiquement entourer les sélections quand l'utilisateur tape des guillemets ou des crochets.
	//  - languageDefined: Utilisez les configurations de langue pour déterminer quand entourer automatiquement les sélections.
	//  - quotes: Entourez avec des guillemets et non des crochets.
	//  - brackets: Entourez avec des crochets et non des guillemets.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Contrôle si la coloration de la paire de crochets est activée ou non. Utilisez « workbench.colorCustomizations » pour remplacer les couleurs de surbrillance de crochets.
	"editor.bracketPairColorization.enabled": false,

	// Types d'action de code à exécuter à l'enregistrement.
	"editor.codeActionsOnSave": {},

	// Contrôle si l'éditeur affiche CodeLens.
	"editor.codeLens": true,

	// Contrôle la famille de polices pour CodeLens.
	"editor.codeLensFontFamily": "",

	// Contrôle la taille de police en pixels pour CodeLens. Quand la valeur est '0', 90 % de '#editor.fontSize#' est utilisé.
	"editor.codeLensFontSize": 0,

	// Contrôle si l'éditeur doit afficher les éléments décoratifs de couleurs inline et le sélecteur de couleurs.
	"editor.colorDecorators": true,

	// Autoriser l'utilisation de la souris et des touches pour sélectionner des colonnes.
	"editor.columnSelection": false,

	// Contrôle si les lignes vides doivent être ignorées avec des actions d'activation/de désactivation, d'ajout ou de suppression des commentaires de ligne.
	"editor.comments.ignoreEmptyLines": true,

	// Contrôle si un espace est inséré pour les commentaires.
	"editor.comments.insertSpace": true,

	// Contrôle si la coloration syntaxique doit être copiée dans le presse-papiers.
	"editor.copyWithSyntaxHighlighting": true,

	// Contrôler le style d’animation du curseur.
	"editor.cursorBlinking": "blink",

	// Contrôle si l'animation du point d'insertion doit être activée.
	"editor.cursorSmoothCaretAnimation": false,

	// Contrôle le style du curseur.
	"editor.cursorStyle": "line",

	// Contrôle le nombre minimal de lignes de début et de fin visibles autour du curseur. Également appelé 'scrollOff' ou 'scrollOffset' dans d'autres éditeurs.
	"editor.cursorSurroundingLines": 0,

	// Contrôle quand 'cursorSurroundingLines' doit être appliqué.
	//  - default: 'cursorSurroundingLines' est appliqué seulement s'il est déclenché via le clavier ou une API.
	//  - all: 'cursorSurroundingLines' est toujours appliqué.
	"editor.cursorSurroundingLinesStyle": "default",

	// Détermine la largeur du curseur lorsque `editor.cursorStyle` est à `line`.
	"editor.cursorWidth": 0,

	// Définit un formateur par défaut qui est prioritaire sur tous les autres paramètres de formateur. Doit être l'identificateur d'une extension contribuant à un formateur.
	//  - null: Aucun(e)
	//  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - Fudge.auto-using: Provides intellisense for and imports references from all available sources.
	//  - aaron-bond.better-comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!
	//  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
	//  - vscode.css-language-features: Fournit une prise en charge riche de langage pour les fichiers CSS, LESS et SCSS
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - flowtype.flow-for-vscode: Flow support for VS Code
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: Fournit une prise en charge de langage complète pour les fichiers HTML et Handlebar
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Fournit une prise en charge de langage pour les fichiers JSON
	//  - vscode.markdown-language-features: Fournit une prise en charge riche de langage pour Markdown
	//  - vscode.php-language-features: Fournit une prise en charge de langage riche pour les fichiers PHP.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - OfHumanBondage.react-proptypes-intellisense: PropTypes intellisense for React components
	//  - angryobject.react-pure-to-class-vscode: Convert pure react components to class components
	//  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - vscode.search-result: Fournit la mise en surbrillance de la syntaxe et des fonctionnalités de langue pour les résultats de recherche avec onglets.
	//  - nadim-vscode.symfony-code-snippets: Over 80 Symfony Code Snippets for PhP code And Over 80 Twig Code Snippets. Just type the letters 'sf' to get a list of all available Symfony Code Snippets. For Twig Just Type the Tag name and you will get AutoCompletion.
	//  - mblode.twig-language: Snippets, Syntax Highlighting, Hover, and Formatting for Twig
	//  - mblode.twig-language-2: Snippets, Syntax Highlighting, Hover, and Formatting for Twig
	//  - Glavin001.unibeautify-vscode: Unibeautify (Universal Code Formatter) for Visual Studio Code
	//  - Pivotal.vscode-concourse: Provides validation and content assist for Concourse CI pipeline and task configuration yml files
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - gornivv.vscode-flutter-files: Quickly scaffold flutter bloc file templates
	//  - windmilleng.vscode-go-autotest: Adds autotest functionality to vscode's Go mode
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
	//  - Pivotal.vscode-manifest-yaml: Adds linting, content assist and hoverinfo's for Cloudfoundry Deployment Manifests (a.k.a. `manifest.yml`) files.
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - Pivotal.vscode-spring-boot: Provides validation and content assist for Spring Boot `application.properties`, `application.yml` properties files. As well as Boot-specific support for `.java` files.
	//  - bajdzis.vscode-twig-pack: Snippets, auto-completion, emmet, and syntax(whatwedo) for TWIG language
	//  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
	//  - artagnon.vstwig: Syntax highlihting and formatting
	//  - steoates.autoimport: Automatically finds, parses and provides code actions and code completion for all available imports. Works with Typescript and TSX
	//  - CoenraadS.bracket-pair-colorizer-2: A customizable extension for colorizing matching brackets
	//  - wmaurer.change-case: Quickly change the case (camelCase, CONSTANT_CASE, snake_case, etc) of the current selection or current word
	//  - googlecloudtools.cloudcode: Cloud Code is Google Cloud's official IDE extension to develop with your favorite Google Cloud services such as Kubernetes, Cloud Run, Cloud APIs, Containers, Google Cloud Build. Cloud Code makes developing with Google Cloud (GCP) feel like working on local code.
	//  - Shan.code-settings-sync: Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist.
	//  - streetsidesoftware.code-spell-checker: Spelling checker for source code
	//  - naumovs.color-highlight: Highlight web colors in your editor
	//  - vscode.configuration-editing: Fournit des fonctionnalités (IntelliSense avancé, correction automatique) dans les fichiers de configuration comme les fichiers de paramètres, de lancement et de recommandation d'extension.
	//  - luanpotter.dart-import: Fix Dart/Flutter's imports
	//  - vscode.debug-auto-launch: Assistance pour la fonctionnalité d'attachement automatique quand les extensions de débogage de nœud ne sont pas actives. 
	//  - vscode.debug-server-ready: Ouvrez l'URI dans le navigateur si le serveur en cours de débogage est prêt.
	//  - vscode.emmet: Prise en charge d'Emmet pour VS Code
	//  - dsznajder.es7-react-js-snippets: Simple extensions for React, Redux and Graphql in JS/TS with ES7 syntax
	//  - woodreamz.es7-react-js-snippets: Simple extension for React, Redux in JS with ES7 syntax
	//  - vscode.extension-editing: Fournit des fonctions de linting pour la création d’extensions.
	//  - mindaro-dev.file-downloader: Exposes an API that allows other extensions to download files.
	//  - davidwoo.flutter-auto-import: auto import flutter's package
	//  - joshjg.generate-react-component: Generate component structure from easily customizable templates
	//  - vscode.git: Intégration Git SCM
	//  - waderyan.gitblame: See git blame information in the status bar.
	//  - vscode.github: Fonctionnalités GitHub pour VS Code
	//  - vscode.github-authentication: Fournisseur d'authentification GitHub
	//  - trixnz.go-to-method: Adds the ability to go to only method symbols declared in the active document
	//  - geequlim.godot-tools: Tools for game development with godot game engine
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension qui ajoute des fonctionnalités Gulp à VS Code.
	//  - anteprimorac.html-end-tag-labels: Labels HTML end tags in VSCode
	//  - iceworks-team.iceworks-style-helper: Easily write styles(CSS/LESS/SASS).
	//  - vscode.image-preview: Fournit l'aperçu d'image intégré de VS Code
	//  - vscode.ipynb: Fournit une prise en charge de base pour l’ouverture et la lecture des fichiers de bloc-notes .ipynb de Jupyter
	//  - vscode.jake: Extension pour ajouter des fonctionnalités Jake à VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - vscode.markdown-math: Ajoute la prise en charge mathématique à Markdown dans les blocs-notes.
	//  - vscode.merge-conflict: Mise en surbrillance et commandes pour les conflits de fusion inline.
	//  - vscode.microsoft-authentication: Fournisseur d'authentification Microsoft
	//  - mindaro.mindaro: Rapid Kubernetes development for teams
	//  - jhessin.node-module-intellisense: Autocompletes Node.js modules in import statements
	//  - leizongmin.node-module-intellisense: Autocompletes Node.js modules in import statements
	//  - vscode.npm: Extension pour ajouter une prise en charge des tâches pour les scripts npm.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - ionutvmi.path-autocomplete: Provides path completion for visual studio code.
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - jeroen-meijer.pubspec-assist: Easily add and update dependencies to your Dart and Flutter project.
	//  - johnVanZwieten.punctual-intellisense: Adds to VSCode the classic VS experience of accepting autocomplete suggestions through use of  punctuation keys such as '.'
	//  - maaaaru.React-Auto-Hooks: React Hooks Expansion
	//  - jeremyrajan.react-component: Create react component using ES6
	//  - suming.react-proptypes-generate: Auto generate react's propTypes
	//  - timothymclane.react-redux-es6-snippets: ES6 Snippets with arrow functions for React-Redux
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - jasonnutter.search-node-modules: Quickly search the node_modules folder.
	//  - vscode.simple-browser: Vue web intégrée très élémentaire pour l'affichage du contenu web.
	//  - burkeholland.simple-react-snippets: Dead simple React snippets you will actually use
	//  - theShukran.theshukran-react-utils: Extract and embed React/React Native components and styles.
	//  - amih90.to: Encode, decode, format and convert everything
	//  - alexandrepoirier.twig-to-jsx: Helps with the conversion of a twig file into a jsx syntax.
	//  - hnw.vscode-auto-open-markdown-preview: Open Markdown preview automatically when opening a Markdown file
	//  - redhat.vscode-commons: Base utilities for Red Hat extensions. Notably controls telemetry settings.
	//  - Tock.vscode-css-custom-properties: Making working with CSS custom properties a joy. CSS Custom Properties adds Intellisense, Definitions, and References for CSS custom properties across your workspace.
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - ms-kubernetes-tools.vscode-kubernetes-tools: Develop, deploy and debug Kubernetes applications
	//  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
	//  - eg2.vscode-npm-script: npm support for VS Code
	//  - GitHub.vscode-pull-request-github: Pull Request and Issue Provider for GitHub
	//  - msjsdiag.vscode-react-native: Débogage et commandes intégrées pour React Native
	//  - planbcoding.vscode-react-refactor: Recompose your overgrown JSX without worrying about the given data.
	//  - vscjava.vscode-spring-boot-dashboard: Spring Boot Dashboard for VS Code
	//  - vscjava.vscode-spring-initializr: A lightweight extension based on Spring Initializr to generate quick start Spring Boot Java projects.
	//  - cssho.vscode-svgviewer: SVG Viewer for Visual Studio Code.
	//  - wayou.vscode-todo-highlight: highlight TODOs, FIXMEs, and any keywords, annotations...
	//  - VisualStudioExptTeam.vscodeintellicode: Développement assisté par IA
	"editor.defaultFormatter": null,

	// Contrôle si le geste de souris Accéder à la définition ouvre toujours le widget d'aperçu.
	"editor.definitionLinkOpensInPeek": false,

	// Contrôle si '#editor.tabSize#' et '#editor.insertSpaces#' sont automatiquement détectés lors de l’ouverture d’un fichier en fonction de son contenu.
	"editor.detectIndentation": true,

	// Contrôle si l’éditeur autorise le déplacement de sélections par glisser-déplacer.
	"editor.dragAndDrop": true,

	// Contrôle si la copie sans sélection permet de copier la ligne actuelle.
	"editor.emptySelectionClipboard": true,

	// Multiplicateur de vitesse de défilement quand vous appuyez sur 'Alt'.
	"editor.fastScrollSensitivity": 5,

	// Contrôle si le widget Recherche doit ajouter des lignes supplémentaires en haut de l'éditeur. Quand la valeur est true, vous pouvez faire défiler au-delà de la première ligne si le widget Recherche est visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Contrôle la condition d'activation automatique de la recherche dans la sélection.
	//  - never: Ne jamais activer automatiquement la recherche dans la sélection (par défaut).
	//  - always: Toujours activer automatiquement la recherche dans la sélection.
	//  - multiline: Activez Rechercher automatiquement dans la sélection quand plusieurs lignes de contenu sont sélectionnées.
	"editor.find.autoFindInSelection": "never",

	// Contrôle si le curseur doit sauter pour rechercher les correspondances lors de la saisie.
	"editor.find.cursorMoveOnType": true,

	// Détermine si le Widget Recherche devrait lire ou modifier le presse-papiers de recherche partagé sur macOS.
	"editor.find.globalFindClipboard": false,

	// Contrôle si la recherche redémarre automatiquement depuis le début (ou la fin) quand il n'existe aucune autre correspondance.
	"editor.find.loop": true,

	// Détermine si la chaîne de recherche dans le Widget Recherche est initialisée avec la sélection de l’éditeur.
	//  - never: Ne lancez jamais la chaîne de recherche dans la sélection de l’éditeur.
	//  - always: Toujours amorcer la chaîne de recherche à partir de la sélection de l’éditeur, y compris le mot à la position du curseur.
	//  - selection: Chaîne de recherche initiale uniquement dans la sélection de l’éditeur.
	"editor.find.seedSearchStringFromSelection": "always",

	// Contrôle si l'éditeur a le pliage de code activé.
	"editor.folding": true,

	// Contrôle si l'éditeur doit mettre en évidence les plages pliées.
	"editor.foldingHighlight": true,

	// Contrôle si l’éditeur réduit automatiquement les plages d’importation.
	"editor.foldingImportsByDefault": false,

	// Contrôle la stratégie de calcul des plages de pliage.
	//  - auto: Utilisez une stratégie de pliage propre à la langue, si disponible, sinon utilisez la stratégie basée sur le retrait.
	//  - indentation: Utilisez la stratégie de pliage basée sur le retrait.
	"editor.foldingStrategy": "auto",

	// Contrôle la famille de polices.
	"editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

	// Configure les ligatures de police ou les fonctionnalités de police. Il peut s'agir d'une valeur booléenne permettant d'activer/de désactiver les ligatures, ou d'une chaîne correspondant à la valeur de la propriété CSS 'font-feature-settings'.
	"editor.fontLigatures": false,

	// Contrôle la taille de police en pixels.
	"editor.fontSize": 12,

	// Contrôle l'épaisseur de police. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"editor.fontWeight": "normal",

	// Détermine si l’éditeur doit automatiquement mettre en forme le contenu collé. Un formateur doit être disponible et être capable de mettre en forme une plage dans un document.
	"editor.formatOnPaste": false,

	// Met en forme un fichier à l'enregistrement. Un formateur doit être disponible, le fichier ne doit pas être enregistré après un délai et l'éditeur ne doit pas être en cours d'arrêt.
	"editor.formatOnSave": false,

	// Permet de contrôler si la mise en forme au moment de l'enregistrement met en forme la totalité du fichier ou seulement les modifications apportées. S'applique uniquement quand '#editor.formatOnSave#' est activé.
	//  - file: Met en forme la totalité du fichier.
	//  - modifications: Met en forme les modifications (nécessite le contrôle de code source).
	//  - modificationsIfAvailable: Tente de mettre en forme les modifications uniquement (nécessite le contrôle de code source). Si le contrôle de code source ne peut pas être utilisé, le fichier entier est mis en forme.
	"editor.formatOnSaveMode": "file",

	// Contrôle si l’éditeur doit mettre automatiquement en forme la ligne après la saisie.
	"editor.formatOnType": false,

	// Contrôle si l'éditeur doit afficher la marge de glyphes verticale. La marge de glyphes sert principalement au débogage.
	"editor.glyphMargin": true,

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la déclaration' est l'emplacement actuel.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la définition' est l'emplacement actuel.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre l'implémentation' est l'emplacement actuel.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la référence' est l'emplacement actuel.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la définition de type' est l'emplacement actuel.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// Ce paramètre est déprécié, utilisez des paramètres distincts comme 'editor.editor.gotoLocation.multipleDefinitions' ou 'editor.editor.gotoLocation.multipleImplementations' à la place.
	// 
	"editor.gotoLocation.multiple": null,

	// Contrôle le comportement de la commande 'Atteindre la déclaration' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Contrôle le comportement de la commande 'Atteindre la définition' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Contrôle le comportement de la commande 'Atteindre les implémentations' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleImplementations": "peek",

	// Contrôle le comportement de la commande 'Atteindre les références' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleReferences": "peek",

	// Contrôle le comportement de la commande 'Atteindre la définition de type' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Controls whether bracket pair guides are enabled or not.
	"editor.guides.bracketPairs": false,

	// Controls whether the editor should highlight the active indent guide.
	"editor.guides.highlightActiveIndentation": true,

	// Controls whether the editor should render indent guides.
	"editor.guides.indentation": true,

	// Contrôle si le curseur doit être masqué dans la règle de la vue d’ensemble.
	"editor.hideCursorInOverviewRuler": false,

	// Contrôle le délai en millisecondes, après lequel le survol est affiché.
	"editor.hover.delay": 300,

	// Contrôle si le pointage est affiché.
	"editor.hover.enabled": true,

	// Contrôle si le pointage doit rester visible quand la souris est déplacée au-dessus.
	"editor.hover.sticky": true,

	// Active les indicateurs inlay dans l’éditeur.
	"editor.inlayHints.enabled": true,

	// Contrôle la famille de polices des indicateurs d’inlay dans l’éditeur. Lorsqu’il est défini sur vide, '#editor.fontFamily#' est utilisé.
	"editor.inlayHints.fontFamily": "",

	// Contrôle la taille de police des indicateurs inlay dans l’éditeur. Quand la valeur est définie sur `0`, 90 % de `editor.fontSize` est utilisé.
	"editor.inlayHints.fontSize": 0,

	// Contrôle si les suggestions en ligne doivent être affichées automatiquement dans l’éditeur.
	"editor.inlineSuggest.enabled": true,

	// Espaces insérés quand vous appuyez sur la touche Tab. Ce paramètre est remplacé en fonction du contenu du fichier quand '#editor.detectIndentation#' est activé.
	"editor.insertSpaces": true,

	// Traitement spécial des fichiers volumineux pour désactiver certaines fonctionnalités utilisant beaucoup de mémoire.
	"editor.largeFileOptimizations": true,

	// Contrôle l'espacement des lettres en pixels.
	"editor.letterSpacing": 0,

	// Active l’ampoule d’action de code dans l’éditeur.
	"editor.lightbulb.enabled": true,

	// Contrôle la hauteur de ligne. 
	//  - Utilisez 0 pour calculer automatiquement la hauteur de ligne à partir de la taille de police.
	//  : les valeurs comprises entre 0 et 8 sont utilisées comme multiplicateur avec la taille de police.
	//  : les valeurs supérieures ou égales à 8 seront utilisées comme valeurs effectives.
	"editor.lineHeight": 0,

	// Contrôle l'affichage des numéros de ligne.
	//  - off: Les numéros de ligne ne sont pas affichés.
	//  - on: Les numéros de ligne sont affichés en nombre absolu.
	//  - relative: Les numéros de ligne sont affichés sous la forme de distance en lignes à la position du curseur.
	//  - interval: Les numéros de ligne sont affichés toutes les 10 lignes.
	"editor.lineNumbers": "on",

	// Contrôle si la modification liée est activée dans l'éditeur. En fonction du langage, les symboles associés, par exemple les balises HTML, sont mis à jour durant le processus de modification.
	"editor.linkedEditing": false,

	// Contrôle si l’éditeur doit détecter les liens et les rendre cliquables.
	"editor.links": true,

	// Mettez en surbrillance les crochets correspondants.
	"editor.matchBrackets": "always",

	// Les lignes plus longues que cette valeur ne sont pas tokenisées pour des raisons de performances
	"editor.maxTokenizationLineLength": 20000,

	// Contrôle si la minimap est affichée.
	"editor.minimap.enabled": true,

	// Limiter la largeur de la minimap pour afficher au plus un certain nombre de colonnes.
	"editor.minimap.maxColumn": 120,

	// Afficher les caractères réels sur une ligne par opposition aux blocs de couleur.
	"editor.minimap.renderCharacters": true,

	// Échelle du contenu dessiné dans le minimap : 1, 2 ou 3.
	"editor.minimap.scale": 1,

	// Contrôle quand afficher le curseur du minimap.
	"editor.minimap.showSlider": "mouseover",

	// Contrôle le côté où afficher la minimap.
	"editor.minimap.side": "right",

	// Contrôle la taille du minimap.
	//  - proportional: Le minimap a la même taille que le contenu de l'éditeur (défilement possible).
	//  - fill: Le minimap s'agrandit ou se réduit selon les besoins pour remplir la hauteur de l'éditeur (pas de défilement).
	//  - fit: Le minimap est réduit si nécessaire pour ne jamais dépasser la taille de l'éditeur (pas de défilement).
	"editor.minimap.size": "proportional",

	// Un multiplicateur à utiliser sur les `deltaX` et `deltaY` des événements de défilement de roulette de souris.
	"editor.mouseWheelScrollSensitivity": 1,

	// Faire un zoom sur la police de l'éditeur quand l'utilisateur fait tourner la roulette de la souris tout en maintenant la touche 'Ctrl' enfoncée.
	"editor.mouseWheelZoom": false,

	// Fusionnez plusieurs curseurs quand ils se chevauchent.
	"editor.multiCursorMergeOverlapping": true,

	// Le modificateur à utiliser pour ajouter plusieurs curseurs avec la souris. Les gestes de souris Atteindre la définition et Ouvrir le lien s'adapteront tels qu’ils n’entrent pas en conflit avec le modificateur multicursor. [Lire la suite] (https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Mappe vers 'Contrôle' dans Windows et Linux, et vers 'Commande' dans macOS.
	//  - alt: Mappe vers 'Alt' dans Windows et Linux, et vers 'Option' dans macOS.
	

	// Contrôle le collage quand le nombre de lignes du texte collé correspond au nombre de curseurs.
	//  - spread: Chaque curseur colle une seule ligne de texte.
	//  - full: Chaque curseur colle le texte en entier.
	"editor.multiCursorPaste": "spread",

	// Contrôle si l'éditeur doit mettre en surbrillance les occurrences de symboles sémantiques.
	"editor.occurrencesHighlight": true,

	// Contrôle si une bordure doit être dessinée autour de la règle de la vue d'ensemble.
	"editor.overviewRulerBorder": true,

	// Contrôle la quantité d'espace entre le bord inférieur de l'éditeur et la dernière ligne.
	"editor.padding.bottom": 0,

	// Contrôle la quantité d’espace entre le bord supérieur de l’éditeur et la première ligne.
	"editor.padding.top": 0,

	// Détermine si le menu de suggestions de paramètres se ferme ou reviens au début lorsque la fin de la liste est atteinte.
	"editor.parameterHints.cycle": false,

	// Active une fenêtre contextuelle qui affiche de la documentation sur les paramètres et des informations sur les types à mesure que vous tapez.
	"editor.parameterHints.enabled": true,

	// Contrôle s'il faut mettre le focus sur l'éditeur inline ou sur l'arborescence dans le widget d'aperçu.
	//  - tree: Focus sur l'arborescence à l'ouverture de l'aperçu
	//  - editor: Placer le focus sur l'éditeur à l'ouverture de l'aperçu
	"editor.peekWidgetDefaultFocus": "tree",

	// Contrôle si les suggestions doivent apparaître automatiquement pendant la saisie.
	"editor.quickSuggestions": {
		"other": true,
		"comments": false,
		"strings": false
	},

	// Contrôle le délai en millisecondes après lequel des suggestions rapides sont affichées.
	"editor.quickSuggestionsDelay": 10,

	// Activer/désactiver la possibilité d'afficher un aperçu des changements avant le renommage
	"editor.rename.enablePreview": true,

	// Déprécié. Utilisez 'editor.linkedEditing' à la place.
	// Contrôle si l'éditeur renomme automatiquement selon le type.
	"editor.renameOnType": false,

	// Contrôle si l’éditeur doit afficher les caractères de contrôle.
	"editor.renderControlCharacters": false,

	// Affichez le dernier numéro de ligne quand le fichier se termine par un saut de ligne.
	"editor.renderFinalNewline": true,

	// Contrôle la façon dont l’éditeur doit afficher la mise en surbrillance de la ligne actuelle.
	//  - none
	//  - gutter
	//  - line
	//  - all: Met en surbrillance la gouttière et la ligne actuelle.
	"editor.renderLineHighlight": "line",

	// Contrôle si l'éditeur doit afficher la mise en surbrillance de la ligne actuelle uniquement quand il a le focus.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Contrôle la façon dont l’éditeur doit restituer les caractères espaces.
	//  - none
	//  - boundary: Affiche les espaces blancs à l'exception des espaces uniques entre les mots.
	//  - selection: Afficher les espaces blancs uniquement sur le texte sélectionné.
	//  - trailing: Affiche uniquement les caractères correspondant aux espaces blancs de fin.
	//  - all
	"editor.renderWhitespace": "selection",

	// Contrôle si les sélections doivent avoir des angles arrondis.
	"editor.roundedSelection": true,

	// Rendre les règles verticales après un certain nombre de caractères à espacement fixe. Utiliser plusieurs valeurs pour plusieurs règles. Aucune règle n'est dessinée si le tableau est vide.
	"editor.rulers": [],

	// Contrôle la visibilité de la barre de défilement horizontale.
	//  - auto: La barre de défilement horizontale sera visible uniquement lorsque cela est nécessaire.
	//  - visible: La barre de défilement horizontale est toujours visible.
	//  - hidden: La barre de défilement horizontale est toujours masquée.
	"editor.scrollbar.horizontal": "auto",

	// Hauteur de la barre de défilement horizontale.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// Contrôle si les clics permettent de faire défiler par page ou d’accéder à la position de clic.
	"editor.scrollbar.scrollByPage": false,

	// Contrôle la visibilité de la barre de défilement verticale.
	//  - auto: La barre de défilement verticale sera visible uniquement lorsque cela est nécessaire.
	//  - visible: La barre de défilement verticale est toujours visible.
	//  - hidden: La barre de défilement verticale est toujours masquée.
	"editor.scrollbar.vertical": "auto",

	// Largeur de la barre de défilement verticale.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// Contrôle le nombre de caractères supplémentaires, au-delà duquel l’éditeur défile horizontalement.
	"editor.scrollBeyondLastColumn": 5,

	// Contrôle si l’éditeur défile au-delà de la dernière ligne.
	"editor.scrollBeyondLastLine": true,

	// Faites défiler uniquement le long de l'axe prédominant quand le défilement est à la fois vertical et horizontal. Empêche la dérive horizontale en cas de défilement vertical sur un pavé tactile.
	"editor.scrollPredominantAxis": true,

	// Contrôle si l'éditeur doit mettre en surbrillance les correspondances similaires à la sélection.
	"editor.selectionHighlight": true,

	// Contrôle si semanticHighlighting est affiché pour les langages qui le prennent en charge.
	//  - true: Coloration sémantique activée pour tous les thèmes de couleur.
	//  - false: Coloration sémantique désactivée pour tous les thèmes de couleur.
	//  - configuredByTheme: La coloration sémantique est configurée par le paramètre 'semanticHighlighting' du thème de couleur actuel.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Substitue la couleur et les styles des jetons sémantiques de l'éditeur à partir du thème de couleur sélectionné.
	"editor.semanticTokenColorCustomizations": {},

	// Contrôle les variables dépréciées barrées.
	"editor.showDeprecated": true,

	// Contrôle quand afficher les contrôles de pliage sur la reliure.
	//  - always: Affichez toujours les contrôles de pliage.
	//  - mouseover: Affichez uniquement les contrôles de pliage quand la souris est au-dessus de la reliure.
	"editor.showFoldingControls": "mouseover",

	// Contrôle la disparition du code inutile.
	"editor.showUnused": true,

	// Indique si les espaces blancs de début et de fin doivent toujours être sélectionnés.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Contrôle si l'éditeur défile en utilisant une animation.
	"editor.smoothScrolling": false,

	// Contrôle si les extraits de code s'affichent en même temps que d'autres suggestions, ainsi que leur mode de tri.
	//  - top: Afficher des suggestions d’extraits au-dessus d’autres suggestions.
	//  - bottom: Afficher des suggestions d’extraits en-dessous d’autres suggestions.
	//  - inline: Afficher des suggestions d’extraits avec d’autres suggestions.
	//  - none: Ne pas afficher de suggestions d’extrait de code.
	"editor.snippetSuggestions": "inline",

	// Garder les éditeurs d'aperçu ouverts même si l'utilisateur double-clique sur son contenu ou appuie sur la touche Échap. 
	"editor.stablePeek": false,

	// Émule le comportement des tabulations pour la sélection quand des espaces sont utilisés à des fins de mise en retrait. La sélection respecte les taquets de tabulation.
	"editor.stickyTabStops": false,

	// Ce paramètre est déprécié, veuillez utiliser des paramètres distincts comme 'editor.suggest.showKeywords' ou 'editor.suggest.showSnippets' à la place.
	// 
	"editor.suggest.filteredTypes": {},

	// Détermine si le filtre et le tri des suggestions doivent prendre en compte les fautes de frappes mineures.
	"editor.suggest.filterGraceful": true,

	// Contrôle si les mots sont remplacés en cas d'acceptation de la saisie semi-automatique. Notez que cela dépend des extensions adhérant à cette fonctionnalité.
	//  - insert: Insérez une suggestion sans remplacer le texte à droite du curseur.
	//  - replace: Insérez une suggestion et remplacez le texte à droite du curseur.
	"editor.suggest.insertMode": "insert",

	// Contrôle si le tri favorise les mots qui apparaissent à proximité du curseur.
	"editor.suggest.localityBonus": false,

	// Ce paramètre est déprécié. Le widget de suggestion peut désormais être redimensionné.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Contrôle si la sortie de la suggestion doit être affichée en aperçu dans l’éditeur.
	"editor.suggest.preview": false,

	// Contrôle si les sélections de suggestion mémorisées sont partagées entre plusieurs espaces de travail et fenêtres (nécessite '#editor.suggestSelection#').
	"editor.suggest.shareSuggestSelections": false,

	// Si activé, IntelliSense montre des suggestions de type 'class'.
	"editor.suggest.showClasses": true,

	// Si activé, IntelliSense montre des suggestions de type 'color'.
	"editor.suggest.showColors": true,

	// Si activé, IntelliSense montre des suggestions de type 'constant'.
	"editor.suggest.showConstants": true,

	// Si activé, IntelliSense montre des suggestions de type 'constructor'.
	"editor.suggest.showConstructors": true,

	// Si activé, IntelliSense montre des suggestions de type 'customcolor'.
	"editor.suggest.showCustomcolors": true,

	// Si cette option est activée, IntelliSense montre des suggestions `dépréciées`.
	"editor.suggest.showDeprecated": true,

	// Si activé, IntelliSense montre des suggestions de type 'enumMember'.
	"editor.suggest.showEnumMembers": true,

	// Si activé, IntelliSense montre des suggestions de type 'enum'.
	"editor.suggest.showEnums": true,

	// Si activé, IntelliSense montre des suggestions de type 'event'.
	"editor.suggest.showEvents": true,

	// Si activé, IntelliSense montre des suggestions de type 'field'.
	"editor.suggest.showFields": true,

	// Si activé, IntelliSense montre des suggestions de type 'file'.
	"editor.suggest.showFiles": true,

	// Si activé, IntelliSense montre des suggestions de type 'folder'.
	"editor.suggest.showFolders": true,

	// Si activé, IntelliSense montre des suggestions de type 'function'.
	"editor.suggest.showFunctions": true,

	// Contrôle s'il faut montrer ou masquer les icônes dans les suggestions.
	"editor.suggest.showIcons": true,

	// Détermine si les détails du widget de suggestion sont inclus dans l'étiquette ou uniquement dans le widget de détails
	"editor.suggest.showInlineDetails": true,

	// Si activé, IntelliSense montre des suggestions de type 'interface'.
	"editor.suggest.showInterfaces": true,

	// Si activé, IntelliSense montre des suggestions de type 'problèmes'.
	"editor.suggest.showIssues": true,

	// Si activé, IntelliSense montre des suggestions de type 'keyword'.
	"editor.suggest.showKeywords": true,

	// Si activé, IntelliSense montre des suggestions de type 'method'.
	"editor.suggest.showMethods": true,

	// Si activé, IntelliSense montre des suggestions de type 'module'.
	"editor.suggest.showModules": true,

	// Si activé, IntelliSense montre des suggestions de type 'operator'.
	"editor.suggest.showOperators": true,

	// Si activé, IntelliSense montre des suggestions de type 'property'.
	"editor.suggest.showProperties": true,

	// Si activé, IntelliSense montre des suggestions de type 'reference'.
	"editor.suggest.showReferences": true,

	// Si activé, IntelliSense montre des suggestions de type 'snippet'.
	"editor.suggest.showSnippets": true,

	// Contrôle la visibilité de la barre d'état en bas du widget de suggestion.
	"editor.suggest.showStatusBar": false,

	// Si activé, IntelliSense montre des suggestions de type 'struct'.
	"editor.suggest.showStructs": true,

	// Si activé, IntelliSense montre des suggestions de type 'typeParameter'.
	"editor.suggest.showTypeParameters": true,

	// Si activé, IntelliSense montre des suggestions de type 'unit'.
	"editor.suggest.showUnits": true,

	// Si activé, IntelliSense montre des suggestions de type 'utilisateur'.
	"editor.suggest.showUsers": true,

	// Si activé, IntelliSense montre des suggestions de type 'value'.
	"editor.suggest.showValues": true,

	// Si activé, IntelliSense montre des suggestions de type 'variable'.
	"editor.suggest.showVariables": true,

	// Si activé, IntelliSense montre des suggestions de type 'text'.
	"editor.suggest.showWords": true,

	// Contrôle si un extrait de code actif empêche les suggestions rapides.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Taille de la police pour le widget de suggestion. Lorsque la valeur est à `0`, la valeur de `#editor.fontSize` est utilisée.
	"editor.suggestFontSize": 0,

	// Hauteur de ligne du widget de suggestion. Quand la valeur est '0', la valeur de '#editor.lineHeight#' est utilisée. La valeur minimale est 8.
	"editor.suggestLineHeight": 0,

	// Contrôle si les suggestions devraient automatiquement s’afficher lorsque vous tapez les caractères de déclencheur.
	"editor.suggestOnTriggerCharacters": true,

	// Contrôle comment les suggestions sont pré-sélectionnés lors de l’affichage de la liste de suggestion.
	//  - first: Sélectionnez toujours la première suggestion.
	//  - recentlyUsed: Sélectionnez les suggestions récentes sauf si une entrée ultérieure en a sélectionné une, par ex., 'console.| -> console.log', car 'log' a été effectué récemment.
	//  - recentlyUsedByPrefix: Sélectionnez des suggestions en fonction des préfixes précédents qui ont complété ces suggestions, par ex., 'co -> console' et 'con -> const'.
	"editor.suggestSelection": "recentlyUsed",

	// Active les complétions par tabulation
	//  - on: La complétion par tabulation insérera la meilleure suggestion lorsque vous appuyez sur tab.
	//  - off: Désactiver les complétions par tabulation.
	//  - onlySnippets: Compléter les extraits de code par tabulation lorsque leur préfixe correspond. Fonctionne mieux quand les 'quickSuggestions' ne sont pas activées.
	"editor.tabCompletion": "off",

	// Le nombre d'espaces auxquels une tabulation est égale. Ce paramètre est substitué basé sur le contenu du fichier lorsque `editor.detectIndentation` est à 'on'.
	"editor.tabSize": 4,

	// Substitue les couleurs de syntaxe et le style de police de l'éditeur à partir du thème de couleur sélectionné.
	"editor.tokenColorCustomizations": {},

	// Supprimer l'espace blanc de fin inséré automatiquement.
	"editor.trimAutoWhitespace": true,

	// Contrôle si le fait de cliquer sur le contenu vide après une ligne pliée déplie la ligne.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Supprimez les marques de fin de ligne inhabituelles susceptibles de causer des problèmes.
	//  - auto: Les marques de fin de ligne inhabituelles sont automatiquement supprimées.
	//  - off: Les marques de fin de ligne inhabituelles sont ignorées.
	//  - prompt: Les marques de fin de ligne inhabituelles demandent à être supprimées.
	"editor.unusualLineTerminators": "prompt",

	// L'insertion et la suppression des espaces blancs suit les taquets de tabulation.
	"editor.useTabStops": true,

	// Contrôle si la saisie semi-automatique doit être calculée en fonction des mots présents dans le document.
	"editor.wordBasedSuggestions": true,

	// Contrôle la façon dont sont calculées les complétions basées sur des mots dans les documents.
	//  - currentDocument: Suggère uniquement des mots dans le document actif.
	//  - matchingDocuments: Suggère des mots dans tous les documents ouverts du même langage.
	//  - allDocuments: Suggère des mots dans tous les documents ouverts.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// Caractères utilisés comme séparateurs de mots durant la navigation ou les opérations basées sur les mots
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Contrôle comment les lignes doivent être limitées.
	//  - off: Le retour automatique à la ligne n'est jamais effectué.
	//  - on: Le retour automatique à la ligne s'effectue en fonction de la largeur de la fenêtre d'affichage.
	//  - wordWrapColumn: Les lignes seront terminées à `editor.wordWrapColumn`.
	//  - bounded: Les lignes seront terminées au minimum du viewport et `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Contrôle la colonne de terminaison de l’éditeur lorsque `editor.wordWrap` est à `wordWrapColumn` ou `bounded`.
	"editor.wordWrapColumn": 80,

	// Contrôle la mise en retrait des lignes justifiées.
	//  - none: Aucune mise en retrait. Les lignes enveloppées commencent à la colonne 1.
	//  - same: Les lignes enveloppées obtiennent la même mise en retrait que le parent.
	//  - indent: Les lignes justifiées obtiennent une mise en retrait +1 vers le parent.
	//  - deepIndent: Les lignes justifiées obtiennent une mise en retrait +2 vers le parent. 
	"editor.wrappingIndent": "same",

	// Contrôle l'algorithme qui calcule les points de wrapping.
	//  - simple: Suppose que tous les caractères ont la même largeur. Il s'agit d'un algorithme rapide qui fonctionne correctement pour les polices à espacement fixe et certains scripts (comme les caractères latins) où les glyphes ont la même largeur.
	//  - advanced: Délègue le calcul des points de wrapping au navigateur. Il s'agit d'un algorithme lent qui peut provoquer le gel des grands fichiers, mais qui fonctionne correctement dans tous les cas.
	"editor.wrappingStrategy": "simple",

	// Contrôle si les actions inline sont toujours visibles dans la vue Contrôle de code source.
	"scm.alwaysShowActions": false,

	// Contrôle si les dépôts doivent toujours être visibles dans la vue SCM.
	"scm.alwaysShowRepositories": false,

	// Contrôle si la vue SCM doit automatiquement révéler et sélectionner les fichiers lors de leur ouverture.
	"scm.autoReveal": true,

	// Contrôle le badge de comptage sur l'icône Contrôle de code source de la barre d'activités.
	//  - all: Affichez la somme de tous les badges de comptage de fournisseurs de contrôle de code source.
	//  - focused: Affichez le badge de compte du fournisseur de commande de source ciblé.
	//  - off: Désactivez le badge de compte Commande de source.
	"scm.countBadge": "all",

	// Contrôle le mode d'affichage du dépôt de contrôle de code source par défaut.
	//  - tree: Affichez les changements de dépôt dans une arborescence.
	//  - list: Affichez les changements du dépôt dans une liste.
	"scm.defaultViewMode": "list",

	// Contrôle les décorations diff dans l'éditeur
	//  - all: Affichez les décorations de différence dans tous les emplacements disponibles.
	//  - gutter: Affichez les décorations de différence seulement dans la marge de l'éditeur.
	//  - overview: Affichez les décorations de différence seulement dans la règle d'aperçu.
	//  - minimap: Affichez les décorations de différence seulement dans le minimap.
	//  - none: N'affichez pas les décorations de différence.
	"scm.diffDecorations": "all",

	// Contrôle le comportement des décorations de la gouttière des différences du contrôle de code source.
	//  - diff: Affiche l'aperçu des différences de manière incluse en cas de clic.
	//  - none: Ne fait rien.
	"scm.diffDecorationsGutterAction": "diff",

	// Contrôle la visibilité du décorateur de diff du contrôle de code source dans la reliure.
	//  - always: Affichez tout le temps le décorateur de diff dans la reliure.
	//  - hover: Montrez le décorateur de diff dans la reliure seulement au pointage.
	"scm.diffDecorationsGutterVisibility": "always",

	// Contrôle la largeur (px) des décorations de différenciation dans la marge (ajouts et modifications).
	"scm.diffDecorationsGutterWidth": 3,

	// Contrôle la police du message d'entrée. Utilisez 'default' pour la famille de polices de l'interface utilisateur du plan de travail, 'editor' pour la valeur de '#editor.fontFamily#' ou une famille de polices personnalisée.
	"scm.inputFontFamily": "default",

	// Contrôle la taille de police du message d'entrée en pixels.
	"scm.inputFontSize": 13,

	// Contrôle les badges de comptage sur les en-têtes de fournisseur de contrôle de code source. Ces en-têtes apparaissent uniquement quand il y a plusieurs fournisseurs.
	//  - hidden: Masquez les badges de comptage de fournisseurs de contrôle de code source.
	//  - auto: Affichez uniquement le badge de comptage de fournisseurs de contrôle de code source lorsque la valeur est différente de zéro.
	//  - visible: Affichez les badges de comptage de fournisseurs de contrôle de code source.
	"scm.providerCountBadge": "hidden",

	// Contrôle le nombre de dépôts visibles dans la section Dépôts de contrôle de code source. Définissez la valeur '0' pour redimensionner manuellement la vue.
	"scm.repositories.visible": 10,

	// Controls whether an action button can be shown in the SCM view.
	"scm.showActionButton": true,

	// Contrôle le comportement d'un clic sur une icône de la barre d'activités dans le workbench.
	//  - toggle: Masquer la barre latérale si l'élément sur lequel l'utilisateur a cliqué est déjà visible.
	//  - focus: Mettre le focus sur la barre latérale si l'élément sur lequel l'utilisateur a cliqué est déjà visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Contrôle la visibilité de la barre d'activités dans le banc d'essai.
	"workbench.activityBar.visible": true,

	// Remplace les couleurs du thème de couleur sélectionné.
	"workbench.colorCustomizations": {},

	// Spécifie le thème de couleur utilisé dans le banc d'essai.
	"workbench.colorTheme": "Default Dark+",

	// Contrôle le nombre de commandes récemment utilisées à retenir dans l’historique de la palette de commande. Spécifier la valeur 0 pour désactiver l’historique des commandes.
	"workbench.commandPalette.history": 50,

	// Contrôle si la dernière saisie tapée dans la palette de commande devrait être restaurée lors de l’ouverture la prochaine fois.
	"workbench.commandPalette.preserveInput": false,

	// If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor.
	"workbench.editor.autoLockGroups": {
		"workbench.input.interactive": false,
		"interactive": false,
		"workbench.editorinputs.searchEditorInput": false,
		"imagePreview.previewEditor": false,
		"vscode.markdown.preview.editor": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"java.formatterSettingsEditor": false,
		"terminalEditor": true,
		"jupyter-notebook": false,
		"default": false,
		"mainThreadWebview-markdown.preview": false
	},

	// Détermine si la disposition centrée doit être redimensionnée automatiquement sur la largeur maximale quand plusieurs groupes sont ouverts. Quand il ne reste plus qu'un groupe ouvert, il est redimensionné sur la largeur centrée d'origine.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Contrôle le comportement des groupes d'éditeurs vides quand le dernier onglet du groupe est fermé. Quand ce paramètre est activé, les groupes vides se ferment automatiquement. Quand le paramètre est désactivé, les groupes vides restent dans la grille.
	"workbench.editor.closeEmptyGroups": true,

	// Contrôle si les éditeurs affichant un fichier qui a été ouvert au cours de la session doivent se fermer automatiquement lors de la suppression ou le renommage par un autre processus. Cette désactivation gardera l’éditeur ouvert sur un tel événement. Notez que la suppression de l’application fermera toujours l’éditeur et que les fichiers modifiés ne se fermeront jamais pour préserver vos données.
	"workbench.editor.closeOnFileDelete": false,

	// Détermine si les éléments décoratifs de fichiers de l'éditeur doivent utiliser des badges.
	"workbench.editor.decorations.badges": true,

	// Détermine si les éléments décoratifs de fichiers de l'éditeur doivent utiliser des couleurs.
	"workbench.editor.decorations.colors": true,

	// Détermine si les éditeurs ouverts s'affichent en mode aperçu. Les éditeurs en mode aperçu ne restent pas ouverts. Ils sont réutilisés jusqu'à ce qu'ils soient explicitement configurés pour rester ouverts (par exemple via un double clic ou une modification) et s'affichent avec un style de police en italique.
	"workbench.editor.enablePreview": true,

	// Détermine si les éditeurs restent en mode aperçu quand l'utilisateur démarre une navigation dans du code à partir de ces derniers. Les éditeurs en mode aperçu ne restent pas ouverts. Ils sont réutilisés jusqu'à ce qu'ils soient explicitement configurés pour rester ouverts (par exemple via un double clic ou une modification). Cette valeur est ignorée quand '#workbench.editor.enablePreview#' est désactivé.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Détermine si les éditeurs ouverts à partir de Quick Open s'affichent en mode aperçu. Les éditeurs en mode aperçu ne restent pas ouverts. Ils sont réutilisés jusqu'à ce qu'ils soient explicitement configurés pour rester ouverts (par exemple via un double clic ou une modification). Cette valeur est ignorée quand '#workbench.editor.enablePreview#' est désactivé.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Contrôle si les onglets sont fermés dans l'ordre du dernier utilisé ou de gauche à droite.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Détermine si une bordure supérieure doit être dessinée ou non sur les onglets d'éditeur modifiés. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.highlightModifiedTabs": false,

	// Contrôle le format de l’étiquette pour un éditeur.
	//  - default: Afficher le nom du fichier. Lorsque les onglets sont activés et que deux fichiers portent le même nom dans un groupe, les sections distinctes du chemin de chaque fichier sont ajoutées. Lorsque les onglets sont désactivés, le chemin d’accès relatif au dossier de l'espace de travail est affiché si l’éditeur est actif.
	//  - short: Afficher le nom du fichier suivi du nom de dossier.
	//  - medium: Afficher le nom du fichier suivi de son chemin d’accès relatif au dossier de l'espace de travail.
	//  - long: Afficher le nom du fichier suivi de son chemin d’accès absolu.
	"workbench.editor.labelFormat": "default",

	// Contrôle si la langue dans un éditeur de texte est détectée automatiquement, sauf si le langage a été explicitement défini par le sélecteur de langue. Elle peut également être définie en fonction de la langue pour que vous puissiez spécifier les langues dont vous ne souhaitez pas désactiver la désactivation. Cela est utile pour les langues comme la démarque qui contiennent souvent d’autres langues susceptibles d’inciter la détection de langage à penser qu’il s’agit de la langue incorporée et non de la démarque.
	"workbench.editor.languageDetection": true,

	// Contrôle s'il faut limiter le nombre d'éditeurs ouverts. Quand ce paramètre est activé, les éditeurs les plus anciens utilisés dont l'intégrité n'est pas compromise sont fermés pour permettre l'ouverture des nouveaux éditeurs.
	"workbench.editor.limit.enabled": false,

	// Contrôle si le nombre maximal d'éditeurs ouverts s'applique par groupe d'éditeurs ou pour tous les groupes d'éditeurs.
	"workbench.editor.limit.perEditorGroup": false,

	// Contrôle le nombre maximum d'éditeurs ouverts. Utilisez le paramètre '#workbench.editor.limit.perEditorGroup' pour contrôler cette limite par groupe d'éditeurs ou pour tous les groupes.
	"workbench.editor.limit.value": 10,

	// Parcourir les fichiers ouverts à l'aide des boutons de souris quatre et cinq s'ils sont disponibles.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Permet de définir où s'ouvrent les éditeurs. Sélectionnez `left` ou `right` pour ouvrir les éditeurs à gauche ou à droite de celui actuellement actif. Sélectionnez `first` ou `last` pour ouvrir les éditeurs indépendamment de celui actuellement actif.
	"workbench.editor.openPositioning": "right",

	// Contrôle la direction par défaut des éditeurs ouverts côte à côte (par exemple, à partir de l'Explorateur). Par défaut, les éditeurs s'ouvrent sur le côté droit de celui qui est actif. Si la valeur est 'down', les éditeurs s'ouvrent sous celui qui est actif.
	"workbench.editor.openSideBySideDirection": "right",

	// Contrôle le dimensionnement des onglets d'éditeur épinglés. Les onglets épinglés sont triés et placés au début de tous les onglets ouverts. En règle générale, ils ne se ferment pas tant qu'ils ne sont pas détachés. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	//  - normal: Un onglet épinglé hérite de l'apparence des onglets non épinglés.
	//  - compact: Un onglet épinglé s'affiche de manière compacte avec uniquement une icône ou la première lettre du nom de l'éditeur.
	//  - shrink: Un onglet épinglé se réduit à une taille fixe compacte affichant des parties du nom de l'éditeur.
	"workbench.editor.pinnedTabSizing": "normal",

	// Restaure le dernier état d’affichage de l’éditeur (par exemple, la position de défilement) lors de la réouverture des éditeurs après leur fermeture. L’état d’affichage de l’éditeur est stocké par groupe d’éditeurs et ignoré lorsqu’un groupe se ferme. Utilisez le paramètre « #workbench.editor.sharedViewState# » pour utiliser le dernier état d’affichage connu dans tous les groupes d’éditeurs si aucun état d’affichage précédent n’a été trouvé pour un groupe d’éditeurs.
	"workbench.editor.restoreViewState": true,

	// Contrôle si un éditeur est révélé dans un des groupes visibles si ouvert. Si désactivé, un éditeur préférera s'ouvrir dans le groupe éditeur actuellement actif. Si activé, un éditeur déjà ouvert sera révélé au lieu d’ouvrir à nouveau dans le groupe éditeur actuellement actif. Notez qu’il y a des cas où ce paramètre est ignoré, par exemple lorsque vous forcez un éditeur à s'ouvrir dans un groupe spécifique ou sur le côté du groupe actuellement actif.
	"workbench.editor.revealIfOpen": false,

	// Contrôle si le défilement des onglets permet de les ouvrir ou non. Par défaut, les onglets s'affichent uniquement si vous les faites défiler, mais ils ne s'ouvrent pas. Vous pouvez appuyer de façon prolongée sur la touche Maj pendant le défilement afin de changer le comportement pour cette durée. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.scrollToSwitchTabs": false,

	// Conserve l’état d’affichage de l’éditeur le plus récent (par exemple, la position de défilement) dans tous les groupes d’éditeurs et le restaure si aucun état d’affichage d’éditeur spécifique n’est trouvé pour le groupe d’éditeurs.
	"workbench.editor.sharedViewState": false,

	// Détermine si les éditeurs ouverts doivent s'afficher ou non avec une icône. Cela nécessite notamment l'activation d'un thème d'icône de fichier.
	"workbench.editor.showIcons": true,

	// Contrôle si les éditeurs ouverts devraient être affichés dans des onglets ou non.
	"workbench.editor.showTabs": true,

	// Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
	"workbench.editor.splitInGroupLayout": "horizontal",

	// Détermine si vous pouvez séparer les groupes d'éditeurs à partir d'opérations de glisser-déposer, notamment en déposant un éditeur ou un fichier sur les bords de la zone d'éditeur.
	"workbench.editor.splitOnDragAndDrop": true,

	// Contrôle la taille des groupes d'éditeurs pendant leur fractionnement.
	//  - distribute: Divise tous les groupes d'éditeurs à parts égales.
	//  - split: Divise le groupe d'éditeurs actif en parts égales.
	"workbench.editor.splitSizing": "distribute",

	// Contrôle la position des boutons de fermeture des onglets de l'éditeur, ou les désactive quand le paramètre a la valeur 'off'. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.tabCloseButton": "right",

	// Contrôle le dimensionnement des onglets d'éditeur. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	//  - fit: Toujours garder les onglets assez grands pour afficher l’étiquette de l’éditeur complet.
	//  - shrink: Permettre aux onglets d'être plus petits lorsque l’espace disponible n’est pas suffisant pour afficher tous les onglets à la fois.
	"workbench.editor.tabSizing": "fit",

	// Contrôle la hauteur des barres de défilement utilisées pour les onglets et des barres de navigation dans la zone de titre de l'éditeur.
	//  - default: Taille par défaut.
	//  - large: Augmente la taille pour faciliter sa saisie avec la souris.
	"workbench.editor.titleScrollbarSizing": "default",

	// Contrôle si l'indicateur sans titre doit correspondre à du texte en ligne dans l'éditeur ou à un bouton flottant, ou s'il doit être masqué.
	"workbench.editor.untitled.hint": "text",

	// Contrôle le format de l'étiquette pour un éditeur sans titre.
	//  - content: Le nom du fichier sans titre est dérivé du contenu de sa première ligne, sauf si le fichier est associé à un chemin. Le nom est rétabli si la ligne est vide ou si elle ne contient aucun caractère.
	//  - name: Le nom du fichier sans titre n'est pas dérivé du contenu du fichier.
	"workbench.editor.untitled.labelFormat": "content",

	// Détermine si les onglets doivent être placés sur plusieurs lignes quand ils dépassent l'espace disponible, ou si une barre de défilement doit s'afficher à la place. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.wrapTabs": false,

	// Configurez des modèles glob pour les éditeurs (par exemple, `"*.hex": "hexEditor.hexEdit"`). Ces modèles ont priorité sur le comportement par défaut.
	"workbench.editorAssociations": {},

	// Récupère les fonctionnalités expérimentales pour exécuter à partir d’un service en ligne de Microsoft.
	"workbench.enableExperiments": true,

	// Configurez le mode d'ouverture à utiliser pour les URI externes (HTTP, HTTPS).
	"workbench.externalUriOpeners": {},

	// Contrôle la méthode d'aliasing de polices dans le banc d'essai.
	//  - default: Lissage de sous-pixel des polices. Sur la plupart des affichages non-retina, cela vous donnera le texte le plus vif.
	//  - antialiased: Lisser les polices au niveau du pixel, plutôt que les sous-pixels. Peut faire en sorte que la police apparaisse plus légère dans l’ensemble.
	//  - none: Désactive le lissage des polices. Le texte s'affichera avec des bordures dentelées.
	//  - auto: Applique `default` ou `antialiased`automatiquement en se basant sur la résolution de l'affichage.
	"workbench.fontAliasing": "default",

	// Contrôle le délai en millisecondes au-delà duquel le pointage est affiché pour les éléments du banc d'essai (par exemple, certains éléments d'arborescence fournis par l'extension). L'actualisation des éléments déjà visibles peut s'avérer nécessaire pour que le changement apporté au paramètre prenne effet.
	"workbench.hover.delay": 1500,

	// Spécifie le thème d'icône de fichier utilisé dans le banc d'essai ou 'null' pour ne pas afficher les icônes de fichier.
	//  - null: Aucune icône de fichier
	//  - vs-minimal
	//  - vs-seti
	"workbench.iconTheme": "vs-seti",

	// Contrôle si la navigation au clavier dans les listes et les arborescences est automatiquement déclenchée simplement par la frappe. Si défini sur 'false', la navigation au clavier est seulement déclenchée avec l'exécution de la commande 'list.toggleKeyboardNavigation', à laquelle vous pouvez attribuer un raccourci clavier.
	"workbench.list.automaticKeyboardNavigation": true,

	// Multiplicateur de vitesse de défilement quand vous appuyez sur Alt.
	"workbench.list.fastScrollSensitivity": 5,

	// Contrôle si les listes et les arborescences prennent en charge le défilement horizontal dans le banc d'essai. Avertissement : L'activation de ce paramètre a un impact sur les performances.
	"workbench.list.horizontalScrolling": false,

	// Contrôle le style de navigation au clavier pour les listes et les arborescences dans le banc d'essai. Les options sont Simple, Mise en surbrillance et Filtrer.
	//  - simple: La navigation au clavier Simple place le focus sur les éléments qui correspondent à l'entrée de clavier. La mise en correspondance est effectuée sur les préfixes uniquement.
	//  - highlight: La navigation de mise en surbrillance au clavier met en surbrillance les éléments qui correspondent à l'entrée de clavier. La navigation ultérieure vers le haut ou vers le bas parcourt uniquement les éléments mis en surbrillance.
	//  - filter: La navigation au clavier Filtrer filtre et masque tous les éléments qui ne correspondent pas à l'entrée de clavier.
	"workbench.list.keyboardNavigation": "highlight",

	// Un multiplicateur à utiliser sur les deltaX et deltaY des événements de défilement de roulette de souris.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// Le modificateur à utiliser pour ajouter un élément dans les arbres et listes pour une sélection multiple avec la souris (par exemple dans l’Explorateur, les éditeurs ouverts et la vue scm). Les mouvements de la souris 'Ouvrir à côté' (si pris en charge) s'adapteront tels qu’ils n'entrent pas en conflit avec le modificateur multiselect.
	//  - ctrlCmd: Mappe vers 'Contrôle' dans Windows et Linux, et vers 'Commande' dans macOS.
	//  - alt: Mappe vers 'Alt' dans Windows et Linux, et vers 'Option' dans macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Contrôle l'ouverture des éléments dans les arborescences et les listes à l'aide de la souris (si cela est pris en charge). Notez que certaines arborescences et listes peuvent choisir d'ignorer ce paramètre, s'il est non applicable.
	"workbench.list.openMode": "singleClick",

	// Détermine si les listes et les arborescences ont un défilement fluide.
	"workbench.list.smoothScrolling": false,

	// Contrôle l'emplacement par défaut du panneau (terminal, console de débogage, sortie, problèmes). Il peut s'afficher en bas, à droite ou à gauche du banc d'essai.
	"workbench.panel.defaultLocation": "bottom",

	// Contrôle si le panneau s'ouvre de manière agrandie. Il peut soit toujours s'ouvrir de manière agrandie, soit ne jamais s'ouvrir de manière agrandie, soit s'ouvrir dans le dernier état dans lequel il se trouvait avant sa fermeture.
	//  - always: Toujours ouvrir le panneau de manière agrandie.
	//  - never: Ne jamais ouvrir le panneau de manière agrandie. Le panneau s'ouvre en étant réduit.
	//  - preserve: Ouvrez le panneau dans l'état dans lequel il se trouvait, avant sa fermeture.
	"workbench.panel.opensMaximized": "preserve",

	// Spécifie le thème de couleur par défaut pour l'apparence d'OS sombre quand '#window.autoDetectColorScheme#' est activé.
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// Spécifie le thème de couleur par défaut utilisé en mode de contraste élevé quand '#window.autoDetectHighContrast#' est activé.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Spécifie le thème de couleur par défaut pour l'apparence d'OS claire quand '#window.autoDetectColorScheme#' est activé.
	"workbench.preferredLightColorTheme": "Default Light+",

	// Spécifie le thème d'icône de produit utilisé.
	//  - Default: Par défaut
	"workbench.productIconTheme": "Default",

	// Contrôles si le menu Quick Open doit se fermer automatiquement dès qu'il perd le focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Détermine si la dernière entrée tapée dans Quick Open doit être restaurée à la prochaine ouverture.
	"workbench.quickOpen.preserveInput": false,

	// Contrôle le délai de rétroaction du pointage (en millisecondes) de la zone de glissement entre les vues/éditeurs.
	"workbench.sash.hoverDelay": 300,

	// Contrôle la taille en pixels de la zone de commentaires de la zone de glissement entre les vues/éditeurs. Affectez-lui une valeur plus élevée si vous pensez qu'il est difficile de redimensionner les vues à l'aide de la souris.
	"workbench.sash.size": 4,

	// Détermine quel éditeur de paramètres utiliser par défaut.
	//  - ui: Utiliser l’éditeur d’interface utilisateur de paramètres.
	//  - json: Utiliser l’éditeur de fichiers JSON.
	"workbench.settings.editor": "ui",

	// Contrôle si vous voulez activer le mode de recherche de langage naturel pour les paramètres de contrôle. La recherche en langage naturel est assurée par un service Microsoft en ligne.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Contrôle si ouvrir les paramètres de raccourcis clavier ouvre également un éditeur affichant toutes les combinaisons de touches par défaut.
	"workbench.settings.openDefaultKeybindings": false,

	// Contrôle si l'ouverture des paramètres ouvre également un éditeur affichant tous les paramètres par défaut.
	"workbench.settings.openDefaultSettings": false,

	// Contrôle le comportement de la table des matières de l'éditeur de paramètres pendant la recherche.
	//  - hide: Masquer la Table des matières lors de la recherche.
	//  - filter: Filtrer la Table des matières à quelques catégories ayant des paramètres correspondants. Cliquer sur une catégorie filtrera les résultats pour cette catégorie.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Contrôle s'il faut utiliser l'éditeur JSON de fractionnement pour modifier les paramètres au format JSON.
	"workbench.settings.useSplitJSON": false,

	// Contrôle l'emplacement de la barre latérale et de la barre d'activité. Elles peuvent s'afficher à gauche ou à droite du banc d'essai.
	"workbench.sideBar.location": "left",

	// Contrôle quel éditeur s’affiche au démarrage, si aucun n'est restauré de la session précédente.
	//  - none: Démarrage sans éditeur.
	//  - welcomePage: Ouvrir la page d’accueil qui propose du contenu pour faciliter la prise en main de VS Code et des extensions.
	//  - readme: Ouvre le fichier README lors de l'ouverture d'un dossier qui en contient un, sinon il revient à 'welcomePage'. Remarque : ceci n'est observé que comme une configuration globale, elle sera ignorée si elle est définie dans une configuration d'espace de travail ou de dossier.
	//  - newUntitledFile: Ouvrez un nouveau fichier sans titre (s'applique uniquement à l'ouverture d'une fenêtre vide).
	//  - welcomePageInEmptyWorkbench: Ouvre la page d'accueil à l'ouverture d'un banc d'essai vide.
	"workbench.startupEditor": "welcomePage",

	// Contrôle la visibilité de la barre d'état au bas du banc d'essai.
	"workbench.statusBar.visible": true,

	// Si cette option est activée, les conseils en filigrane s'affichent quand aucun éditeur n'est ouvert.
	"workbench.tips.enabled": true,

	// Contrôle la façon dont les dossiers de l'arborescence sont développés quand vous cliquez sur les noms de dossiers. Notez que certaines arborescences et listes peuvent choisir d'ignorer ce paramètre, s'il est non applicable.
	"workbench.tree.expandMode": "singleClick",

	// Contrôle la mise en retrait de l'arborescence, en pixels.
	"workbench.tree.indent": 8,

	// Contrôle si l'arborescence doit afficher les repères de mise en retrait.
	"workbench.tree.renderIndentGuides": "onHover",

	// Lorsque cette option est activée, des invites de domaine approuvé s’affichent lors de l’ouverture de liens dans les espaces de travail approuvés.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// Contrôle la visibilité des actions d'en-tête de vue. Les actions d'en-tête de vue peuvent être soit toujours visibles, ou uniquement visibles quand cette vue a le focus ou est survolée.
	"workbench.view.alwaysShowHeaderActions": false,

	// Lorsque cette option est activée, réduisez le mouvement dans la page d’accueil.
	"workbench.welcomePage.preferReducedMotion": false,

	// Lorsqu’elle est activée, la procédure pas à pas d’une extension s’ouvre lors de l’installation de l’extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// Contrôle l’affichage de la bannière en mode restreint.
	//  - always: Affichez la bannière chaque fois qu’un espace de travail non approuvé est ouvert.
	//  - untilDismissed: Afficher la bannière lorsqu’un espace de travail non approuvé est ouvert jusqu’à ce qu’il soit ignoré.
	//  - never: N’affichez pas la bannière lorsqu’un espace de travail non approuvé est ouvert.
	"security.workspace.trust.banner": "untilDismissed",

	// Contrôle si la fenêtre vide est approuvée par défaut dans VS Code. Quand cette option est utilisée avec `security.workspace.trust.untrustedFiles`, vous pouvez activer toutes les fonctionnalités de VS Code sans afficher d’invite dans une fenêtre vide.
	"security.workspace.trust.emptyWindow": true,

	// Contrôle si l’approbation d’espace de travail est activée dans VS Code.
	"security.workspace.trust.enabled": true,

	// Contrôle le délai d’affichage de l’invite de démarrage pour l’approbation d’un espace de travail.
	//  - always: Demander l’approbation chaque fois qu’un espace de travail non approuvé est ouvert.
	//  - once: Demander l’approbation la première fois qu’un espace de travail non approuvé est ouvert.
	//  - never: Ne pas demander l’approbation quand un espace de travail non approuvé est ouvert.
	"security.workspace.trust.startupPrompt": "once",

	// Contrôle comment gérer l’ouverture de fichiers non approuvés dans un espace de travail approuvé. Ce paramètre s’applique également à l’ouverture de fichiers dans une fenêtre vide approuvée par le biais de `security.workspace.trust.emptyWindow`.
	//  - prompt: Demander comment gérer les fichiers non approuvés pour chaque espace de travail. Une fois que des fichiers non approuvés ont été introduits dans un espace de travail approuvé, cette demande ne vous sera plus faite.
	//  - open: Toujours autoriser l’introduction de fichiers non approuvés dans un espace de travail approuvé sans invite.
	//  - newWindow: Toujours ouvrir les fichiers non approuvés dans une fenêtre distincte en mode restreint sans invite.
	"security.workspace.trust.untrustedFiles": "prompt",

	// Si cette option est définie, bascule automatiquement vers le thème de couleurs par défaut en fonction du mode de couleurs du système d’exploitation. Si le mode du système d’exploitation est sombre, le thème à utiliser est défini par `workbench.preferredDarkColorTheme#`, ou s’il est clair par `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,

	// Si cette option est activée, le thème à contraste élevé est automatiquement choisi quand le système d’exploitation utilise un thème à contraste élevé. Le thème à contraste élevé à utiliser est défini par `workbench.preferredHighContrastColorTheme`
	"window.autoDetectHighContrast": true,

	// Si activée, cliquer sur une fenêtre inactive activera la fenêtre et déclenchera l’élément sous la souris, si elle est cliquable. Si désactivé, cliquer n’importe où sur une fenêtre inactive va seulement l'activer et un second clic sur l’élément sera nécessaire.
	"window.clickThroughInactive": true,

	// Contrôle si la fermeture du dernier éditeur doit également fermer la fenêtre. Ce paramètre s’applique uniquement pour les fenêtres qui n'affichent pas de dossiers.
	"window.closeWhenEmpty": false,

	// Ajustez l'apparence des fenêtres de dialogue.
	"window.dialogStyle": "native",

	// Si activé, un double clic sur l'icône de l'application dans la barre de titre ferme la fenêtre, laquelle ne peut pas être déplacée par l'icône. Ce paramètre s'applique uniquement quand '#window.titleBarStyle#' est défini sur 'custom'.
	"window.doubleClickIconToClose": false,

	// Détermine si le plein écran natif doit être utilisé sur macOS. Désactivez cette option pour empêcher macOS de créer un espace en cas de passage au plein écran.
	"window.nativeFullScreen": true,

	// Active les onglets macOS Sierra. Notez que vous devez redémarrer l'ordinateur pour appliquer les modifications et que les onglets natifs désactivent tout style de barre de titre personnalisé configuré, le cas échéant.
	"window.nativeTabs": false,

	// Contrôle les dimensions d'ouverture d'une nouvelle fenêtre quand au moins une fenêtre est déjà ouverte. Par défaut, une nouvelle fenêtre s'ouvre au centre de l'écran avec des dimensions réduites. Notez que ce paramètre n'a aucun impact sur la première fenêtre ouverte, laquelle est toujours restaurée à la taille et l'emplacement définis au moment de sa fermeture.
	//  - default: Permet d'ouvrir les nouvelles fenêtres au centre de l'écran.
	//  - inherit: Permet d'ouvrir les nouvelles fenêtres avec la même dimension que la dernière fenêtre active.
	//  - offset: Ouvrez les nouvelles fenêtres avec la même dimension que la dernière fenêtre active et une position décalée.
	//  - maximized: Permet d'ouvrir les nouvelles fenêtres de manière agrandie.
	//  - fullscreen: Permet d'ouvrir les nouvelles fenêtres en mode plein écran.
	"window.newWindowDimensions": "default",

	// Contrôle si les fichiers doivent s’ouvrir dans une nouvelle fenêtre. 
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` ou `--reuse-window`).
	//  - on: Les fichiers seront ouverts dans une nouvelle fenêtre.
	//  - off: Les fichiers seront ouverts dans la fenêtre avec le dossier des fichiers ouverts ou la dernière fenêtre active.
	//  - default: Les fichiers seront ouverts dans la fenêtre avec le dossier des fichiers ouverts ou la dernière fenêtre active sauf si ouvert via le Dock ou depuis la recherche.
	"window.openFilesInNewWindow": "off",

	// Contrôle si les dossiers doivent s'ouvrir dans une nouvelle fenêtre ou remplacer la dernière fenêtre active.
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` ou `--reuse-window`).
	//  - on: Les dossiers seront ouverts dans une nouvelle fenêtre.
	//  - off: Les dossiers remplaceront la dernière fenêtre active.
	//  - default: Les dossiers seront ouverts dans une nouvelle fenêtre, à moins qu’un dossier est sélectionné dans l’application (par exemple via le menu fichier).
	"window.openFoldersInNewWindow": "default",

	// Contrôle si une nouvelle fenêtre vide doit s’ouvrir lors du démarrage d’une seconde instance sans arguments, ou si la dernière instance en cours d’exécution doit obtenir le focus.
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` or `--reuse-window`).
	//  - on: Ouvrir une nouvelle fenêtre vide.
	//  - off: Mettre le focus sur la dernière instance active
	"window.openWithoutArgumentsInNewWindow": "off",

	// Contrôle si une fenêtre doit être restaurée en mode plein écran si elle a été fermée dans ce mode.
	"window.restoreFullscreen": false,

	// Contrôle la façon dont les fenêtres sont rouvertes après le tout premier démarrage. Ce paramètre n'a aucun effet quand l'application est déjà en cours d'exécution.
	//  - preserve: Rouvre toujours toutes les fenêtres. Si un dossier ou un espace de travail est ouvert (par exemple à partir de la ligne de commande), il s'ouvre dans une nouvelle fenêtre, sauf s'il est déjà ouvert. Si des fichiers sont ouverts, ils s'ouvrent dans l'une des fenêtres restaurées.
	//  - all: Rouvre toutes les fenêtres, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - folders: Rouvre toutes les fenêtres qui comportaient des dossiers ou des espaces de travail ouverts, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - one: Rouvre la dernière fenêtre active, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - none: Ne rouvre jamais une fenêtre. À moins qu'un dossier ou un espace de travail ne soit ouvert (par exemple à partir de la ligne de commande), une fenêtre vide s'affiche.
	"window.restoreWindows": "all",

	// Contrôle basé sur l’éditeur actif du titre de la fenêtre. Les variables sont remplacées selon le contexte :
	// - '${activeEditorShort}' : nom du fichier (par ex., myFile.txt).
	// - '${activeEditorMedium}' : chemin du fichier relatif au dossier d'espace de travail (par ex., myFolder/myFileFolder/myFile.txt).
	// - '${activeEditorLong}' : chemin complet du fichier (par ex., /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - '${activeFolderShort}' : nom du dossier contenant le fichier (par ex., myFileFolder).
	// - '${activeFolderMedium}' : chemin du dossier contenant le fichier, relatif au dossier d'espace de travail (par ex., myFolder/myFileFolder).
	// - '${activeFolderLong}' : chemin complet du dossier contenant le fichier (par ex., /Users/Development/myFolder/myFileFolder).
	// - '${folderName} : nom du dossier d'espace de travail contenant le fichier (par ex., myFolder).
	// - '${folderPath}' : chemin de fichier du dossier d'espace de travail contenant le fichier (par ex., /Users/Development/myFolder).
	// - '${rootName}' : nom de l'espace de travail ou du dossier ouvert (par exemple myFolder ou myWorkspace).
	// - '${rootPath}' : chemin de fichier de l'espace de travail ou du dossier ouvert (par exemple /Users/Development/myWorkspace).
	// - « ${appName} » : par exemple, VS Code.
	// - '${remoteName}' : par ex., SSH
	// - '${dirty}' : indicateur erroné si l'éditeur actif est erroné.
	// - '${separator}' : séparateur conditionnel ("-") qui apparaît uniquement quand il est entouré de variables avec des valeurs ou du texte statique.
	"window.title": "${activeEditorShort}${separator}${rootName}",

	// Réglez l'apparence de la barre de titre de la fenêtre. Sur Linux et Windows, ce paramètre affecte aussi l'apparence de l'application et du menu contextuel. L'application des changements nécessite un redémarrage complet.
	"window.titleBarStyle": "custom",

	// Séparateur utilisé par 'window.title'.
	"window.titleSeparator": " — ",

	// Modifiez le niveau de zoom de la fenêtre. La taille d'origine est 0. Chaque incrément supérieur (exemple : 1) ou inférieur (exemple : -1) représente un zoom 20 % plus gros ou plus petit. Vous pouvez également entrer des décimales pour changer le niveau de zoom avec une granularité plus fine.
	"window.zoomLevel": 0,

	// Configurez les associations entre les fichiers et les langages (exemple : "*.extension": "html"`). Celles-ci sont prioritaires sur les associations par défaut des langages installés. 
	"files.associations": {},

	// Quand cette option est activée, l’éditeur tente de deviner l’encodage du jeu de caractères à l’ouverture des fichiers. Ce paramètre peut également être configuré par langue. Notez que ce paramètre n’est pas respecté par la recherche de texte. Seul' #files. Encoding # 'est respecté.
	"files.autoGuessEncoding": false,

	// Contrôle l'enregistrement automatique des éditeurs dont l'intégrité est compromise. Plus d'informations sur l'enregistrement automatique [ici](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
	//  - off: Un éditeur dont l'intégrité est compromise n'est jamais enregistré automatiquement.
	//  - afterDelay: Un éditeur dont l'intégrité est compromise est automatiquement enregistré après le '#files.autoSaveDelay#' configuré.
	//  - onFocusChange: Un éditeur dont l'intégrité est compromise est automatiquement enregistré quand il perd le focus.
	//  - onWindowChange: Un éditeur dont l'intégrité est compromise est automatiquement enregistré quand la fenêtre perd le focus.
	"files.autoSave": "off",

	// Contrôle le délai en ms avant l'enregistrement automatique de l'éditeur dont l'intégrité est compromise. S'applique uniquement quand '#files.autoSave#' est défini sur 'afterDelay'.
	"files.autoSaveDelay": 1000,

	// Mode de langage par défaut attribué aux nouveaux fichiers. S'il est configuré sur '${activeEditorLanguage}', utilise le mode de langage de l'éditeur de texte actif le cas échéant.
	"files.defaultLanguage": "",

	// Déplace les fichiers/dossiers dans la corbeille du système d'exploitation (corbeille sous Windows) lors de la suppression. Désactiver ceci supprimera définitivement les fichiers/dossiers.
	"files.enableTrash": true,

	// Encodage de jeu de caractères par défaut à utiliser lors de la lecture et l’écriture des fichiers. Ce paramètre peut également être configuré par langage.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// Caractère de fin de ligne par défaut.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Utilise le caractère de fin de ligne spécifique du système d'exploitation.
	"files.eol": "auto",

	// Configurez les modèles Glob pour l'exclusion des fichiers et des dossiers. Par exemple, l'Explorateur de fichiers affiche ou masque les fichiers et dossiers en fonction de ce paramètre. Consultez le paramètre '#search.exclude#' pour définir des exclusions spécifiques à la recherche. Vous trouverez plus d'informations sur les modèles Glob [ici](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// Contrôle si les fichiers non enregistrés sont mémorisés entre les sessions, ce qui permet d'ignorer la demande d'enregistrement à la sortie de l'éditeur.
	//  - off: Désactivez la sortie à chaud. Une invite s'affiche quand vous tentez de fermer une fenêtre avec des fichiers dont l'intégrité est compromise.
	//  - onExit: La sortie à chaud se déclenche quand la dernière fenêtre est fermée dans Windows/Linux, ou quand la commande 'workbench.action.quit' se déclenche (palette de commandes, combinaison de touches, menu). Toutes les fenêtres qui n'ont pas de dossiers ouverts sont restaurées au prochain lancement. Une liste des fenêtres ouvertes avec des fichiers non enregistrés est accessible via Fichier > Ouvrir les éléments récents > Plus...
	//  - onExitAndWindowClose: La sortie à chaud se déclenche quand la dernière fenêtre est fermée dans Windows/Linux, ou quand la commande 'workbench.action.quit' se déclenche (palette de commandes, combinaison de touches, menu) ainsi que pour toute fenêtre comportant un dossier ouvert, qu'il s'agisse ou non de la dernière fenêtre. Toutes les fenêtres qui n'ont pas de dossiers ouverts sont restaurées au prochain lancement. Une liste des fenêtres ouvertes avec des fichiers non enregistrés est accessible via Fichier > Ouvrir les éléments récents > Plus...
	"files.hotExit": "onExit",

	// Quand l'option est activée, une nouvelle ligne finale est insérée à la fin du fichier au moment de son enregistrement.
	"files.insertFinalNewline": false,

	// Controls the mechanism used for file watching. Only change this when you see issues related to file watching.
	"files.legacyWatcher": false,

	// Contrôle la mémoire disponible pour VS Code après le redémarrage en cas de tentative d'ouverture de fichiers volumineux. Même effet que de spécifier '--max-memory=NEWSIZE' sur la ligne de commande.
	"files.maxMemoryForLargeFilesMB": 4096,

	// Délai d'attente en millisecondes après lequel les participants pour la création, le renommage et la suppression de fichier sont supprimés. Utilisez '0' pour désactiver les participants.
	"files.participants.timeout": 60000,

	// Restaurez la pile des opérations d'annulation à la réouverture d'un fichier.
	"files.restoreUndoStack": true,

	// Un conflit d'enregistrement peut se produire quand un fichier est enregistré sur un disque qui a été modifié par un autre programme dans l'intervalle. Pour éviter une perte de données, l'utilisateur est invité à comparer les changements dans l'éditeur avec la version sur disque. Changez ce paramètre seulement si vous rencontrez fréquemment des erreurs de conflit d'enregistrement, car il peut entraîner une perte de données s'il est utilisé sans précaution.
	//  - askUser: Refuse l'enregistrement et demande la résolution manuelle du conflit d'enregistrement.
	//  - overwriteFileOnDisk: Résout le conflit d'enregistrement en remplaçant le fichier sur le disque par les changements effectués dans l'éditeur.
	"files.saveConflictResolution": "askUser",

	// Active la boîte de dialogue de fichier simple, qui remplace alors la boîte de dialogue de fichier système.
	"files.simpleDialog.enable": false,

	// Si l'option est activée, va supprimer toutes les nouvelles lignes après la dernière ligne à la fin du fichier lors de l’enregistrement.
	"files.trimFinalNewlines": false,

	// Si l'option est activée, l'espace blanc de fin est supprimé au moment de l'enregistrement d'un fichier.
	"files.trimTrailingWhitespace": false,

	// Configurez les modèles Glob des chemins d’accès aux fichiers à exclure de la surveillance des fichiers. Les modèles doivent correspondre à des chemins absolus, à savoir le préfixe « **/ » ou le chemin complet pour une correspondance appropriée et le suffixe « /** » pour la correspondance avec les fichiers à l’intérieur d’un chemin (par exemple, « /build/output/** » ou « /Users/name/workspaces/project/build/output/** »). Le changement de ce paramètre nécessite un redémarrage. Si vous constatez que le code consomme beaucoup de temps processeur au démarrage, vous pouvez exclure les dossiers volumineux pour réduire la charge initiale.
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved against the workspace folder to form an absolute path.
	"files.watcherInclude": [],

	// Contrôle la taille de police (en pixels) du clavier en mode de capture vidéo d'écran.
	"screencastMode.fontSize": 56,

	// Contrôle la durée (en millisecondes) d'affichage de la superposition du clavier en mode capture vidéo.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Contrôle la couleur hexadécimale (#RGB, #RGBA, #RRGGBB ou #RRGGBBAA) de l'indicateur de la souris en mode capture vidéo.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Contrôle la taille (en pixels) de l'indicateur de la souris en mode capture vidéo.
	"screencastMode.mouseIndicatorSize": 20,

	// Affichez uniquement les raccourcis clavier en mode capture d'écran.
	"screencastMode.onlyKeyboardShortcuts": false,

	// Contrôle le décalage vertical de la superposition du mode de capture vidéo depuis le bas par rapport à la hauteur du Workbench.
	"screencastMode.verticalOffset": 20,

	// Contrôle si activer le Mode Zen centre également la mise en page.
	"zenMode.centerLayout": true,

	// Contrôle si activer le Mode Zen met aussi le workbench en mode plein écran.
	"zenMode.fullScreen": true,

	// Contrôle si l'activation du mode Zen masque également la barre d'activités à gauche ou à droite du banc d'essai.
	"zenMode.hideActivityBar": true,

	// Contrôle si l'activation du mode Zen masque aussi les numéros de ligne de l'éditeur.
	"zenMode.hideLineNumbers": true,

	// Contrôle si l'activation du mode Zen masque également la barre d’état au bas du banc d'essai.
	"zenMode.hideStatusBar": true,

	// Contrôle si l'activation du mode Zen masque également les onglets du banc d'essai.
	"zenMode.hideTabs": true,

	// Détermine si une fenêtre doit être restaurée en mode zen, si celle-ci a été fermée en mode zen.
	"zenMode.restore": true,

	// Contrôle si les notifications sont affichées en mode zen. Si tel est le cas, seules les notifications d'erreur s'affichent.
	"zenMode.silentNotifications": true,

	// Contrôle si l’Explorateur devrait automatiquement révéler et sélectionner les fichiers lors de leur ouverture.
	//  - true: Les fichiers sont révélés et sélectionnés.
	//  - false: Les fichiers ne sont pas révélés et sélectionnés.
	//  - focusNoScroll: Les fichiers ne défilent pas dans la vue, mais ils ont toujours le focus.
	"explorer.autoReveal": true,

	// Contrôle si l'explorateur doit afficher les dossiers de manière compacte. Sous cette forme, les dossiers enfant sont compressés individuellement dans un élément d'arborescence combiné. Utile pour les structures de package Java, par exemple.
	"explorer.compactFolders": true,

	// Contrôle si l’Explorateur devrait demander confirmation lorsque vous supprimez un fichier via la corbeille.
	"explorer.confirmDelete": true,

	// Contrôle si l’Explorateur doit demander confirmation pour déplacer des fichiers et des dossiers par glisser/déplacer.
	"explorer.confirmDragAndDrop": true,

	// Caractère de séparation de chemin utilisé lors de la copie de chemins d’accès relatifs au fichier.
	//  - /: Utilisez la barre oblique comme caractère de séparation du chemin d’accès.
	//  - \: Utilisez la barre oblique inverse comme caractère de séparation du chemin d’accès.
	//  - auto: Utilise un caractère de séparation de chemin d’accès spécifique au système d’exploitation.
	"explorer.copyRelativePathSeparator": "auto",

	// Contrôle si les décorations de fichier devraient utiliser des badges.
	"explorer.decorations.badges": true,

	// Contrôle si les décorations de fichier devraient utiliser des couleurs.
	"explorer.decorations.colors": true,

	// Détermine si l'Explorateur autorise le déplacement des fichiers et des dossiers par glisser-déposer. Ce paramètre affecte uniquement le glisser-déposer dans l'Explorateur.
	"explorer.enableDragAndDrop": true,

	// Contrôle la stratégie de nommage à utiliser lorsque vous donnez un nouveau nom à un élément dupliqué d'Explorer à coller.
	//  - simple: Ajoute le mot « copy » à la fin du nom dupliqué, potentiellement suivi par un nombre
	//  - smart: Ajoute un nombre à la fin du nom dupliqué. Si le nom comporte déjà un nombre, essayez d'augmenter ce nombre
	"explorer.incrementalNaming": "simple",

	// Contrôle l'ordre de tri des éditeurs dans le volet Éditeurs ouverts.
	//  - editorOrder: Les éditeurs sont triés dans l'ordre selon lequel les onglets d'éditeur sont affichés.
	//  - alphabetical: Les éditeurs sont triés par ordre alphabétique dans chaque groupe d'éditeurs.
	"explorer.openEditors.sortOrder": "editorOrder",

	// Nombre d'éditeurs affichés dans le volet Éditeurs ouverts. Si la valeur est 0, le volet Éditeurs ouverts est masqué.
	"explorer.openEditors.visible": 9,

	// Contrôle le tri des fichiers et des dossiers selon les propriétés dans l’explorateur.
	//  - default: Les fichiers et dossiers sont triés par nom. Les dossiers sont affichés avant les fichiers.
	//  - mixed: Les fichiers et dossiers sont triés par nom. Les fichiers sont imbriqués dans les dossiers.
	//  - filesFirst: Les fichiers et dossiers sont triés par nom. Les fichiers sont affichés avant les dossiers.
	//  - type: Les fichiers et dossiers sont groupés par type d’extension puis triés par nom. Les dossiers sont affichés avant les fichiers.
	//  - modified: Les fichiers et dossiers sont triés par date de dernière modification dans l’ordre décroissant. Les dossiers sont affichés avant les fichiers.
	"explorer.sortOrder": "default",

	// Contrôle le tri lexicographique des noms de fichiers et de dossiers dans l’explorateur.
	//  - default: Les noms en majuscules et en minuscules ne sont pas séparés.
	//  - upper: Les noms en majuscules sont regroupés avant les noms en minuscules.
	//  - lower: Les noms en minuscules sont regroupés avant les noms en majuscules.
	//  - unicode: Les noms sont triés dans l’ordre Unicode.
	"explorer.sortOrderLexicographicOptions": "default",

	// Contrôle le positionnement de la barre d'action sur des lignes dans la vue de recherche.
	//  - auto: Positionnez la barre d'action à droite quand la vue de recherche est étroite et immédiatement après le contenu quand la vue de recherche est large.
	//  - right: Positionnez toujours la barre d'action à droite.
	"search.actionsPosition": "right",

	// Contrôle si les résultats de recherche seront réduits ou développés.
	//  - auto: Les fichiers avec moins de 10 résultats sont développés. Les autres sont réduits.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Configurez des modèles glob pour exclure des fichiers et des dossiers dans les recherches en texte intégral et le mode Quick Open. Hérite tous les modèles glob du paramètre '#files.exclude#'. Découvrez plus d'informations sur les modèles glob [ici](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Contrôle s'il faut suivre les symlinks pendant la recherche.
	"search.followSymlinks": true,

	// When enabled, search in a local window runs in a separate search process instead of the extension host.
	"search.forceSearchProcess": false,

	// Contrôle si la vue de recherche doit lire ou modifier le presse-papiers partagé sur macOS.
	"search.globalFindClipboard": false,

	// Ce paramètre est déprécié. Faites plutôt glisser l’icône de recherche vers un nouvel emplacement.
	// Contrôle si la recherche s’affiche comme une vue dans la barre latérale ou comme un panneau dans la zone de panneaux pour plus d'espace horizontal.
	"search.location": "sidebar",

	// Si activé, le processus searchService est maintenu actif au lieu d'être arrêté au bout d'une heure d'inactivité. Ce paramètre conserve le cache de recherche de fichier en mémoire.
	"search.maintainFileSearchCache": false,

	// Contrôle le nombre maximal de résultats de la recherche, ce paramètre peut être défini sur «null» (vide) pour obtenir des résultats illimités.
	"search.maxResults": 20000,

	// Contrôle l'emplacement d'exécution des opérations Rechercher : Rechercher dans les fichiers et Rechercher dans le dossier. Cet emplacement correspond soit à la vue de recherche de la barre latérale, soit à un éditeur de recherche
	//  - view: Rechercher dans la vue de recherche, soit dans le panneau, soit dans la barre latérale.
	//  - reuseEditor: Effectue la recherche dans un éditeur de recherche existant, le cas échéant, sinon effectue la recherche dans un nouvel éditeur de recherche.
	//  - newEditor: Effectue la recherche dans un nouvel éditeur de recherche.
	"search.mode": "view",

	// Contrôle l'ordre de tri de l'historique de l'éditeur en mode Quick Open pendant le filtrage.
	//  - default: Les entrées d'historique sont triées par pertinence en fonction de la valeur de filtre utilisée. Les entrées les plus pertinentes apparaissent en premier.
	//  - recency: Les entrées d'historique sont triées par date. Les dernières entrées ouvertes sont affichées en premier.
	"search.quickOpen.history.filterSortOrder": "default",

	// Indique si vous souhaitez inclure les résultats de fichiers récemment ouverts dans les résultats de fichiers pour Quick Open.
	"search.quickOpen.includeHistory": true,

	// Indique s’il faut inclure les résultats d’une recherche de symbole global dans les résultats de fichier pour Quick Open.
	"search.quickOpen.includeSymbols": false,

	// Nombre par défaut de lignes de contexte avoisinantes à utiliser au moment de la création d'éditeurs de recherche. Si vous utilisez '#search.searchEditor.reusePriorSearchConfiguration#', vous pouvez lui affecter la valeur 'null' (vide) pour utiliser la configuration précédente de l'éditeur de recherche.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configurez ce qui se passe après un double clic sur un résultat dans un éditeur de recherche.
	//  - selectWord: Double-cliquez pour sélectionner le mot sous le curseur.
	//  - goToLocation: Double-cliquez sur le résultat pour l'ouvrir dans le groupe d'éditeurs actif.
	//  - openLocationToSide: Double-cliquez pour ouvrir le résultat dans le groupe d'éditeurs ouvert ou dans un nouveau groupe d'éditeurs le cas échéant.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// Quand cette option est activée, les nouveaux éditeurs de recherche réutilisent les inclusions, exclusions et indicateurs du dernier éditeur de recherche ouvert.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Recherchez dans tous les fichiers à mesure que vous tapez.
	"search.searchOnType": true,

	// Quand '#search.searchOnType' est activé, contrôle le délai d'attente avant expiration en millisecondes entre l'entrée d'un caractère et le démarrage de la recherche. N'a aucun effet quand 'search.searchOnType' est désactivé.
	"search.searchOnTypeDebouncePeriod": 300,

	// Mettez à jour la requête de recherche en fonction du texte sélectionné de l'éditeur quand vous placez le focus sur la vue de recherche. Cela se produit soit au moment du clic de souris, soit au déclenchement de la commande 'workbench.views.search.focus'.
	"search.seedOnFocus": false,

	// Activez l'essaimage de la recherche à partir du mot le plus proche du curseur quand l'éditeur actif n'a aucune sélection.
	"search.seedWithNearestWord": false,

	// Détermine s'il faut afficher les numéros de ligne dans les résultats de recherche.
	"search.showLineNumbers": false,

	// Faire une recherche non sensible à la casse si le modèle est tout en minuscules, dans le cas contraire, faire une rechercher sensible à la casse.
	"search.smartCase": false,

	// Contrôle l'ordre de tri des résultats de recherche.
	//  - default: Les résultats sont triés par dossier et noms de fichier, dans l'ordre alphabétique.
	//  - fileNames: Les résultats sont triés par noms de fichier en ignorant l'ordre des dossiers, dans l'ordre alphabétique.
	//  - type: Les résultats sont triés par extensions de fichier dans l'ordre alphabétique.
	//  - modified: Les résultats sont triés par date de dernière modification de fichier, dans l'ordre décroissant.
	//  - countDescending: Les résultats sont triés par nombre dans chaque fichier, dans l'ordre décroissant.
	//  - countAscending: Les résultats sont triés par nombre dans chaque fichier, dans l'ordre croissant.
	"search.sortOrder": "default",

	// Détermine s'il faut utiliser les fichiers généraux '.gitignore' et '.ignore' pendant la recherche de fichiers.
	"search.useGlobalIgnoreFiles": false,

	// Contrôle s'il faut utiliser les fichiers `.gitignore` et `.ignore` par défaut pendant la recherche de fichiers.
	"search.useIgnoreFiles": true,

	// Déprécié. PCRE2 est utilisé automatiquement lors de l'utilisation de fonctionnalités regex qui ne sont prises en charge que par PCRE2.
	// Détermine s'il faut utiliser le moteur regex PCRE2 dans la recherche de texte. Cette option permet d'utiliser des fonctionnalités regex avancées comme lookahead et les références arrière. Toutefois, les fonctionnalités PCRE2 ne sont pas toutes prises en charge, seulement celles qui sont aussi prises en charge par JavaScript.
	"search.usePCRE2": false,

	// Détermine s'il faut ouvrir l'aperçu du remplacement quand vous sélectionnez ou remplacez une correspondance.
	"search.useReplacePreview": true,

	// Déprécié. Utilisez "search.usePCRE2" pour prendre en charge la fonctionnalité regex avancée.
	// Ce paramètre est déprécié et remplacé par "search.usePCRE2".
	"search.useRipgrep": true,

	// Contrôle la logique de distribution des appuis sur les touches pour utiliser soit 'code' (recommandé), soit 'keyCode'.
	"keyboard.dispatch": "code",

	// Active les boutons de la touchbar macOS sur le clavier si disponible.
	"keyboard.touchbar.enabled": true,

	// Ensemble d'identificateurs pour les entrées de la Touch Bar qui ne doivent pas apparaître (par exemple 'workbench.action.navigateBack').
	"keyboard.touchbar.ignored": [],

	// Paramètre proxy à utiliser. S'il n'est pas défini, il est hérité des variables d'environnement 'http_proxy' et 'https_proxy'.
	"http.proxy": "",

	// Valeur à envoyer comme en-tête 'Proxy-Authorization' pour chaque demande de réseau.
	"http.proxyAuthorization": null,

	// Spécifie si le certificat de serveur proxy doit être vérifié par rapport à la liste des autorités de certification fournies.
	"http.proxyStrictSSL": true,

	// Utilisez la prise en charge du proxy pour les extensions.
	//  - off: Désactivez la prise en charge de proxy pour les extensions.
	//  - on: Activez la prise en charge de proxy pour les extensions.
	//  - fallback: Activer la prise en charge du proxy pour les extensions, revenir aux options de demande quand aucun proxy n’a été trouvé.
	//  - override: Activer le support de proxy pour les extensions, remplacer les options de demande.
	"http.proxySupport": "override",

	// Contrôle si les certificats d'autorité de certification doivent être chargés à partir de l'OS. (Sur Windows et macOS, vous devez recharger la fenêtre après la désactivation de ce paramètre.)
	"http.systemCertificates": true,

	// Ce paramètre est déprécié, utilisez 'update.mode' à la place.
	// Choisissez si vous voulez recevoir des mises à jour automatiques. Nécessite un redémarrage après le changement. Les mises à jour sont récupérées auprès d'un service en ligne Microsoft.
	"update.channel": "default",

	// Choisissez si vous voulez recevoir des mises à jour automatiques. Nécessite un redémarrage après le changement. Les mises à jour sont récupérées auprès d'un service en ligne Microsoft.
	//  - none: Désactivez les mises à jour.
	//  - manual: Désactivez la recherche de mises à jour automatique en arrière-plan. Les mises à jour sont disponibles si vous les rechercher manuellement.
	//  - start: Vérifiez les mises à jour uniquement au démarrage. Désactivez les vérifications de mises à jour d'arrière-plan automatiques.
	//  - default: Activez la recherche de mises à jour automatique pour que VS Code recherche les mises à jour automatiquement et régulièrement.
	"update.mode": "default",

	// Afficher les Notes de publication après une mise à jour. Les Notes de publication sont téléchargées depuis un service en ligne de Microsoft.
	"update.showReleaseNotes": true,

	// Contrôle quand le panneau des composants doit s'ouvrir.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Permettre de définir des points d’arrêt dans n’importe quel fichier.
	"debug.allowBreakpointsEverywhere": false,

	// Détermine s'il est nécessaire de confirmer à la fermeture de la fenêtre s’il existe de sessions de débogage actives.
	//  - never: Ne jamais confirmer
	//  - always: Toujours confirmer l’existence des sessions de débogage.
	"debug.confirmOnExit": "never",

	// Contrôle si les suggestions doivent être acceptées lors de la saisie dans la console de débogage. La saisie est également utilisée pour évaluer tout ce qui est tapé dans la console de débogage.
	"debug.console.acceptSuggestionOnEnter": "off",

	// Contrôle s'il faut fermer automatiquement la console de débogage à la fin de la session de débogage.
	"debug.console.closeOnEnd": false,

	// Contrôle si la console de débogage doit réduire les lignes identiques et afficher un certain nombre d'occurrences avec un badge.
	"debug.console.collapseIdenticalLines": true,

	// Contrôle la famille de polices dans la console de débogage.
	"debug.console.fontFamily": "default",

	// Contrôle la taille de police en pixels dans la console de débogage.
	"debug.console.fontSize": 12,

	// Contrôle si la console de débogage doit suggérer une entrée déjà tapée.
	"debug.console.historySuggestions": true,

	// Contrôle la hauteur de ligne en pixels dans la console de débogage. Utilisez 0 pour calculer la hauteur de ligne à partir de la taille de police.
	"debug.console.lineHeight": 0,

	// Contrôle si le retour automatique à la ligne est activé dans la console de débogage.
	"debug.console.wordWrap": true,

	// Contrôle si la fenêtre Workbench doit être ciblée lorsque le débogueur s'arrête.
	"debug.focusWindowOnBreak": true,

	// Afficher les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - true: Affiche toujours les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - false: N'affiche jamais les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - auto: Affiche les valeurs des variables inline dans l'éditeur au moment du débogage, si le langage prend en charge les emplacements de valeurs inline.
	"debug.inlineValues": "auto",

	// Contrôle le moment où la console de débogage interne doit s’ouvrir.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Contrôle ce qu'il faut faire en cas d'erreurs après l'exécution d'une tâche de prélancement.
	//  - debugAnyway: Ignorer les erreurs de tâche et démarrer le débogage.
	//  - showErrors: Afficher la vue Problèmes et ne pas démarrer le débogage.
	//  - prompt: Demandez à l'utilisateur.
	//  - abort: Annuler le débogage.
	"debug.onTaskErrors": "prompt",

	// Contrôle le moment où la vue de débogage doit s’ouvrir.
	"debug.openDebug": "openOnDebugBreak",

	// Ouvre automatiquement la vue Explorateur à la fin d'une session de débogage.
	"debug.openExplorerOnEnd": false,

	// Contrôle les éditeurs à enregistrer avant le démarrage d'une session de débogage.
	//  - allEditorsInActiveGroup: Enregistre tous les éditeurs du groupe actif avant le démarrage d'une session de débogage.
	//  - nonUntitledEditorsInActiveGroup: Enregistre tous les éditeurs du groupe actif à l'exception de ceux qui n'ont pas de titre avant le démarrage d'une session de débogage.
	//  - none: N'enregistre aucun éditeur avant le démarrage d'une session de débogage.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Contrôle si les points d'arrêt doivent être affichés dans la règle d'aperçu.
	"debug.showBreakpointsInOverviewRuler": false,

	// Contrôle si les décorations de candidat des points d'arrêt inline doivent être affichées dans l'éditeur pendant le débogage.
	"debug.showInlineBreakpointCandidates": true,

	// Contrôle le moment où la barre d’état de débogage doit être visible.
	//  - never: Ne jamais afficher debug dans la barre d'état
	//  - always: Toujours afficher debug dans la barre d’état
	//  - onFirstSessionStart: Afficher debug dans seule la barre d’état après que le débogage a été lancé pour la première fois
	"debug.showInStatusBar": "onFirstSessionStart",

	// Contrôle si les sous-sessions de débogage sont affichées dans la barre d'outils de débogage. Quand ce paramètre a la valeur false, la commande stop sur une sous-session arrête également la session parente.
	"debug.showSubSessionsInToolBar": false,

	// Avant de démarrer une nouvelle session de débogage dans un terminal intégré ou externe, effacez le terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Contrôle l'emplacement de la barre d'outils de débogage. Les options sont 'floating' dans toutes les vues, 'docked' dans la vue de débogage ou 'hidden'.
	"debug.toolBarLocation": "floating",

	// Configuration de lancement du débogage global. Doit être utilisée à la place de 'launch.json' qui est partagé entre les espaces de travail.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Activez/désactivez la fermeture automatique des balises HTML.
	"html.autoClosingTags": true,

	// Liste de chemins de fichiers relatifs pointant vers des fichiers JSON respectant le [format de données personnalisé](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code charge des données personnalisées au démarrage pour améliorer la prise en charge des balises, attributs et valeurs d’attribut HTML personnalisés que vous spécifiez dans les fichiers JSON.
	// 
	// Les chemins de fichiers sont relatifs à l’espace de travail, et seuls les paramètres de dossier d’espace de travail sont pris en compte.
	"html.customData": [],

	// Liste des balises, séparés par des virgules, où le contenu ne devrait pas être reformaté. `null` par défaut pour la balise `pre`.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Activer/désactiver le formateur HTML par défaut.
	"html.format.enable": true,

	// Finissez par un caractère de nouvelle ligne.
	"html.format.endWithNewline": false,

	// Liste des balises, séparées par des virgules, qui devraient avoir un saut de ligne supplémentaire devant eux. `null` par défaut pour `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Mettez en forme et indenter `{{#foo}}`, ainsi que `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Mettez en retrait les sections '<head>' et '<body>'.
	"html.format.indentInnerHtml": false,

	// Nombre maximal de sauts de ligne à être conservés dans un segment unique. Utiliser `null` pour illimité.
	"html.format.maxPreserveNewLines": null,

	// Contrôle si les sauts de ligne existants avant des éléments doivent être préservés. Fonctionne uniquement avant des éléments, pas à l’intérieur de balises ou dans le texte.
	"html.format.preserveNewLines": true,

	// Privilégie les balises de langage de templating django, erb, handlebars et php.
	"html.format.templating": false,

	// Liste des balises, séparées par des virgules, qui ne devrait pas être reformatées. `null` par défaut toutes les balises répertoriées dans https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Garde ensemble le contenu du texte dans cette chaîne.
	"html.format.unformattedContentDelimiter": "",

	// Retour à la ligne des attributs.
	//  - auto: Retour automatique à la ligne des attributs uniquement en cas de dépassement de la longueur de la ligne.
	//  - force: Retour automatique à la ligne de chaque attribut, sauf le premier.
	//  - force-aligned: Retour automatique à la ligne de chaque attribut, sauf le premier, avec maintien de l'alignement.
	//  - force-expand-multiline: Retour automatique à la ligne de chaque attribut.
	//  - aligned-multiple: Entourer lorsque la longueur de ligne est dépassée, aligner verticalement les attributs.
	//  - preserve: Conserve le retour à la ligne des attributs.
	//  - preserve-aligned: Conservez le wrapping des attributs, mais alignez-les.
	"html.format.wrapAttributes": "auto",

	// Taille de l'alignement en cas d'utilisation de 'force-aligned' et 'aligned-multiple' dans '#html.format.wrapAttributes#', ou valeur 'null' pour permettre l'utilisation de la taille de mise en retrait par défaut.
	"html.format.wrapAttributesIndentSize": null,

	// Nombre maximal de caractères par ligne (0 = désactiver).
	"html.format.wrapLineLength": 120,

	// Affiche la documentation relative aux balises et aux attributs quand le curseur passe sur l'élément.
	"html.hover.documentation": true,

	// Affiche les références à MDN quand le curseur passe sur l'élément.
	"html.hover.references": true,

	// Déprécié au profit de 'editor.linkedEditing'
	// Activez/désactivez le curseur de mise en miroir sur la balise HTML correspondante.
	"html.mirrorCursorOnMatchingTag": false,

	// Contrôle si la prise en charge intégrée du langage HTML propose des balises, des propriétés et des valeurs HTML5.
	"html.suggest.html5": true,

	// Trace la communication entre VS Code et le serveur de langage HTML.
	"html.trace.server": "off",

	// Contrôle si la prise en charge intégrée du langage HTML valide les scripts incorporés.
	"html.validate.scripts": true,

	// Contrôle si la prise en charge intégrée du langage HTML valide les styles incorporés.
	"html.validate.styles": true,

	// Le paramètre 'json.colorDecorators.enable' a été déprécié en faveur de 'editor.colorDecorators'.
	// Active ou désactive les éléments décoratifs de couleurs
	"json.colorDecorators.enable": true,

	// Activer/désactiver le formateur JSON par défaut
	"json.format.enable": true,

	// Nombre maximal de symboles de plan et de régions de pliage calculé (limité pour des raisons de performances).
	"json.maxItemsComputed": 5000,

	// Quand ils sont activés, les schémas JSON peuvent être récupérés (fetch) à partir des emplacements http et https.
	"json.schemaDownload.enable": true,

	// Associe les schémas aux fichiers JSON dans le projet actif.
	"json.schemas": [],

	// Trace la communication entre VS Code et le serveur de langage JSON.
	"json.trace.server": "off",

	// Contrôle l'emplacement où doivent s'ouvrir les liens dans les fichiers Markdown.
	//  - currentGroup: Ouvrez les liens dans le groupe d'éditeurs actif.
	//  - beside: Ouvrez les liens à côté de l'éditeur actif.
	"markdown.links.openLocation": "currentGroup",

	// Définit la façon dont les sauts de ligne sont affichés dans l'aperçu Markdown. Si vous affectez la valeur 'true', un <br> est créé pour les nouvelles lignes à l'intérieur des paragraphes.
	"markdown.preview.breaks": false,

	// Double-cliquez dans l'aperçu Markdown pour passer à l'éditeur.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Contrôle la famille de polices utilisée dans l'aperçu Markdown.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Contrôle la taille de police en pixels utilisée dans l'aperçu Markdown.
	"markdown.preview.fontSize": 14,

	// Contrôle la hauteur de ligne utilisée dans l'aperçu Markdown. Ce nombre est relatif à la taille de police.
	"markdown.preview.lineHeight": 1.6,

	// Active ou désactive la conversion de texte de type URL en liens dans l'aperçu Markdown.
	"markdown.preview.linkify": true,

	// Marque la sélection actuelle de l'éditeur dans l'aperçu Markdown.
	"markdown.preview.markEditorSelection": true,

	// Contrôle la façon dont les liens vers d'autres fichiers Markdown doivent s'ouvrir dans l'aperçu Markdown.
	//  - inPreview: Tente d'ouvrir les liens dans l'aperçu Markdown.
	//  - inEditor: Tente d'ouvrir les liens dans l'éditeur.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// Quand un aperçu Markdown défile, la vue de l'éditeur est mise à jour.
	"markdown.preview.scrollEditorWithPreview": true,

	// Quand la fenêtre de l'éditeur Markdown défile, la vue de l'aperçu est mise à jour.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Active ou désactive certains remplacements indépendants du langage ainsi que l'amélioration de la présentation des guillemets dans l'aperçu Markdown.
	"markdown.preview.typographer": false,

	// Liste d'URL ou de chemins locaux de feuilles de style CSS à utiliser dans l'aperçu Markdown. Les chemins relatifs sont interprétés par rapport au dossier ouvert dans l'Explorateur. Si aucun dossier n'est ouvert, ils sont interprétés par rapport à l'emplacement du fichier Markdown. Tous les signes '\' doivent être écrits sous la forme '\\'.
	"markdown.styles": [],

	// Active la journalisation du débogage pour l'extension Markdown.
	"markdown.trace": "off",

	// Contrôle si les suggestions de langage PHP intégrées sont activées. Le support suggère les globales et variables PHP.
	"php.suggest.basic": true,

	// Activez/désactivez la validation PHP intégrée.
	"php.validate.enable": true,

	// Pointe vers l'exécutable PHP.
	"php.validate.executablePath": null,

	// Spécifie si linter est exécuté au moment de l'enregistrement ou de la saisie.
	"php.validate.run": "onSave",

	// Configure le déclenchement de l'ouverture automatique de la vue d'aperçu d'erreur.
	//  - failureAnywhere: L'ouverture automatique s'effectue, quel que soit l'emplacement de l'échec.
	//  - failureInVisibleDocument: L'ouverture automatique s'effectue en cas d'échec d'un test dans un document visible.
	//  - never: Ne jamais ouvrir automatiquement
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// Contrôle si la vue d'aperçu doit s'ouvrir automatiquement en mode d'exécution automatique.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// Délai d'attente, en millisecondes, après le marquage d'un test comme étant obsolète et le démarrage d'une nouvelle exécution.
	"testing.autoRun.delay": 1000,

	// Contrôle les tests exécutés automatiquement.
	//  - all: Exécute automatiquement tous les tests découverts quand l'exécution automatique est activée. Réexécute les tests individuels quand ils changent.
	//  - rerun: Réexécute les tests individuels quand ils changent. N'exécute pas automatiquement les tests qui n'ont pas déjà été exécutés.
	"testing.autoRun.mode": "all",

	// Contrôle l’action à prendre lorsque vous cliquez avec le bouton gauche sur une décoration de test dans la reliure.
	//  - run: Exécutez le test.
	//  - debug: Déboguer le test.
	//  - contextMenu: Ouvrez le menu contextuel pour obtenir plus d’options.
	"testing.defaultGutterClickAction": "run",

	// Contrôle si le test en cours d’exécution doit être suivi dans l’affichage de l’explorateur de tests
	"testing.followRunningTest": true,

	// Contrôle si les décorations de test sont affichées dans la marge de l’éditeur.
	"testing.gutterEnabled": true,

	// Insère un point-virgule à la fin de la ligne au moment de la complétion des propriétés CSS.
	"css.completion.completePropertyWithSemicolon": true,

	// Par défaut, VS Code déclenche la complétion de la valeur de propriété après la sélection d'une propriété CSS. Utilisez ce paramètre pour désactiver ce comportement.
	"css.completion.triggerPropertyValueCompletion": true,

	// Liste de chemins d’accès relatifs vers des fichiers JSON respectant le [format de données personnalisé](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code charge des données personnalisées au démarrage pour améliorer la prise en charge de CSS : les propriétés, directives @, pseudo-classes et pseudo-éléments CSS personnalisés que vous spécifiez dans les fichiers JSON.
	// 
	// Les chemins de fichiers sont relatifs à l’espace de travail, et seuls les paramètres de dossier d’espace de travail sont pris en compte.
	"css.customData": [],

	// Affiche la documentation relative aux balises et aux attributs CSS quand le curseur pointe dessus.
	"css.hover.documentation": true,

	// Affiche les références MDN pour CSS en cas de pointage du curseur.
	"css.hover.references": true,

	// Nombre de paramètres non valide.
	"css.lint.argumentsInColorFunction": "error",

	// Ne pas utiliser `width` ou `height` lorsque vous utilisez `padding` ou `border`.
	"css.lint.boxModel": "ignore",

	// Quand vous utilisez un préfixe spécifique au fournisseur assurez-vous d’inclure toutes les autres propriétés spécifiques au fournisseur.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Ne pas utiliser les définitions de style en doublon.
	"css.lint.duplicateProperties": "ignore",

	// Ne pas utiliser d'ensembles de règles vides
	"css.lint.emptyRules": "warning",

	// Évitez d’utiliser `float`. Les floats conduisent à un CSS fragile qui est facile à casser, si un des aspects de la mise en page change.
	"css.lint.float": "ignore",

	// La règle '@font-face' doit définir les propriétés 'src' et 'font-family'.
	"css.lint.fontFaceProperties": "warning",

	// Les couleurs hexadécimales doivent contenir trois ou six chiffres hexadécimaux.
	"css.lint.hexColorLength": "error",

	// Les sélecteurs ne doivent pas contenir d'ID, car ces règles sont trop fortement couplées au code HTML.
	"css.lint.idSelector": "ignore",

	// Les hacks IE sont uniquement nécessaires pour prendre en charge IE7 et antérieur.
	"css.lint.ieHack": "ignore",

	// Evitez d'utiliser `!important`. Cela indique que la spécificité de l'intégralité du code CSS est incorrecte et qu'il doit être refactorisé.
	"css.lint.important": "ignore",

	// Les instructions Import ne se chargent pas en parallèle.
	"css.lint.importStatement": "ignore",

	// La propriété est ignorée en raison du display. Par exemple, avec 'display: inline', les propriétés `width`, `height`, `margin-top`, `margin-bottom`, et `float` n’ont aucun effet.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// Le sélecteur universel (`*`) est connu pour être lent.
	"css.lint.universalSelector": "ignore",

	// Règle-at inconnue.
	"css.lint.unknownAtRules": "warning",

	// Propriété inconnue.
	"css.lint.unknownProperties": "warning",

	// Propriété spécifique à un fournisseur inconnue.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// Liste de propriétés non validées par la règle 'unknownProperties'.
	"css.lint.validProperties": [],

	// Quand vous utilisez un préfixe spécifique au fournisseur, incluez également la propriété standard.
	"css.lint.vendorPrefix": "warning",

	// Aucune unité nécessaire pour zéro.
	"css.lint.zeroUnits": "ignore",

	// Trace la communication entre VS Code et le serveur de langage CSS.
	"css.trace.server": "off",

	// Active ou désactive toutes les validations
	"css.validate": true,

	// Insère un point-virgule à la fin de la ligne au moment de la complétion des propriétés CSS.
	"less.completion.completePropertyWithSemicolon": true,

	// Par défaut, VS Code déclenche la complétion de la valeur de propriété après la sélection d'une propriété CSS. Utilisez ce paramètre pour désactiver ce comportement.
	"less.completion.triggerPropertyValueCompletion": true,

	// Affiche la documentation relative aux balises et aux attributs LESS quand le curseur pointe dessus.
	"less.hover.documentation": true,

	// Affiche les références MDN pour LESS en cas de pointage du curseur.
	"less.hover.references": true,

	// Nombre de paramètres non valide.
	"less.lint.argumentsInColorFunction": "error",

	// Ne pas utiliser `width` ou `height` lorsque vous utilisez `padding` ou `border`.
	"less.lint.boxModel": "ignore",

	// Quand vous utilisez un préfixe spécifique au fournisseur assurez-vous d’inclure toutes les autres propriétés spécifiques au fournisseur.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Ne pas utiliser les définitions de style en doublon.
	"less.lint.duplicateProperties": "ignore",

	// Ne pas utiliser d'ensembles de règles vides
	"less.lint.emptyRules": "warning",

	// Évitez d’utiliser `float`. Les floats conduisent à un CSS fragile qui est facile à casser, si un des aspects de la mise en page change.
	"less.lint.float": "ignore",

	// La règle '@font-face' doit définir les propriétés 'src' et 'font-family'.
	"less.lint.fontFaceProperties": "warning",

	// Les couleurs hexadécimales doivent contenir trois ou six chiffres hexadécimaux.
	"less.lint.hexColorLength": "error",

	// Les sélecteurs ne doivent pas contenir d'ID, car ces règles sont trop fortement couplées au code HTML.
	"less.lint.idSelector": "ignore",

	// Les hacks IE sont uniquement nécessaires pour prendre en charge IE7 et antérieur.
	"less.lint.ieHack": "ignore",

	// Evitez d'utiliser `!important`. Cela indique que la spécificité de l'intégralité du code CSS est incorrecte et qu'il doit être refactorisé.
	"less.lint.important": "ignore",

	// Les instructions Import ne se chargent pas en parallèle.
	"less.lint.importStatement": "ignore",

	// La propriété est ignorée en raison du display. Par exemple, avec 'display: inline', les propriétés `width`, `height`, `margin-top`, `margin-bottom`, et `float` n’ont aucun effet.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// Le sélecteur universel (`*`) est connu pour être lent.
	"less.lint.universalSelector": "ignore",

	// Règle-at inconnue.
	"less.lint.unknownAtRules": "warning",

	// Propriété inconnue.
	"less.lint.unknownProperties": "warning",

	// Propriété spécifique à un fournisseur inconnue.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// Liste de propriétés non validées par la règle 'unknownProperties'.
	"less.lint.validProperties": [],

	// Quand vous utilisez un préfixe spécifique au fournisseur, incluez également la propriété standard.
	"less.lint.vendorPrefix": "warning",

	// Aucune unité nécessaire pour zéro.
	"less.lint.zeroUnits": "ignore",

	// Active ou désactive toutes les validations
	"less.validate": true,

	// Insère un point-virgule à la fin de la ligne au moment de la complétion des propriétés CSS.
	"scss.completion.completePropertyWithSemicolon": true,

	// Par défaut, VS Code déclenche la complétion de la valeur de propriété après la sélection d'une propriété CSS. Utilisez ce paramètre pour désactiver ce comportement.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Affiche la documentation relative aux balises et aux attributs SCSS quand le curseur pointe dessus.
	"scss.hover.documentation": true,

	// Affiche les références MDN pour SCSS en cas de pointage du curseur.
	"scss.hover.references": true,

	// Nombre de paramètres non valide.
	"scss.lint.argumentsInColorFunction": "error",

	// Ne pas utiliser `width` ou `height` lorsque vous utilisez `padding` ou `border`.
	"scss.lint.boxModel": "ignore",

	// Quand vous utilisez un préfixe spécifique au fournisseur assurez-vous d’inclure toutes les autres propriétés spécifiques au fournisseur.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Ne pas utiliser les définitions de style en doublon.
	"scss.lint.duplicateProperties": "ignore",

	// Ne pas utiliser d'ensembles de règles vides
	"scss.lint.emptyRules": "warning",

	// Évitez d’utiliser `float`. Les floats conduisent à un CSS fragile qui est facile à casser, si un des aspects de la mise en page change.
	"scss.lint.float": "ignore",

	// La règle '@font-face' doit définir les propriétés 'src' et 'font-family'.
	"scss.lint.fontFaceProperties": "warning",

	// Les couleurs hexadécimales doivent contenir trois ou six chiffres hexadécimaux.
	"scss.lint.hexColorLength": "error",

	// Les sélecteurs ne doivent pas contenir d'ID, car ces règles sont trop fortement couplées au code HTML.
	"scss.lint.idSelector": "ignore",

	// Les hacks IE sont uniquement nécessaires pour prendre en charge IE7 et antérieur.
	"scss.lint.ieHack": "ignore",

	// Evitez d'utiliser `!important`. Cela indique que la spécificité de l'intégralité du code CSS est incorrecte et qu'il doit être refactorisé.
	"scss.lint.important": "ignore",

	// Les instructions Import ne se chargent pas en parallèle.
	"scss.lint.importStatement": "ignore",

	// La propriété est ignorée en raison du display. Par exemple, avec 'display: inline', les propriétés `width`, `height`, `margin-top`, `margin-bottom`, et `float` n’ont aucun effet.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// Le sélecteur universel (`*`) est connu pour être lent.
	"scss.lint.universalSelector": "ignore",

	// Règle-at inconnue.
	"scss.lint.unknownAtRules": "warning",

	// Propriété inconnue.
	"scss.lint.unknownProperties": "warning",

	// Propriété spécifique à un fournisseur inconnue.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// Liste de propriétés non validées par la règle 'unknownProperties'.
	"scss.lint.validProperties": [],

	// Quand vous utilisez un préfixe spécifique au fournisseur, incluez également la propriété standard.
	"scss.lint.vendorPrefix": "warning",

	// Aucune unité nécessaire pour zéro.
	"scss.lint.zeroUnits": "ignore",

	// Active ou désactive toutes les validations
	"scss.validate": true,

	// Lorsqu’activé, vérifie automatiquement les extensions pour les mises à jour. Si une extension est une mise à jour, elle est marquée comme obsolète dans l’affichage des Extensions. Les mises à jour sont récupérées à partir d’un service en ligne de Microsoft.
	"extensions.autoCheckUpdates": true,

	// Contrôle le comportement de mise à jour automatique des extensions. Les mises à jour sont récupérées à partir d'un service en ligne Microsoft.
	//  - true: Télécharge et installe automatiquement les mises à jour pour toutes les extensions.
	//  - onlyEnabledExtensions: Télécharge et installe automatiquement les mises à jour uniquement pour les extensions activées. Les extensions désactivées ne sont pas mises à jour automatiquement.
	//  - false: Les extensions ne sont pas mises à jour automatiquement.
	"extensions.autoUpdate": true,

	// Si cette option est activée, les éditeurs avec les détails d'extension sont automatiquement fermés quand vous quittez l'affichage Extensions.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// Si une extension est listée ici, aucune invite de confirmation n'est affichée quand cette extension gère un URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// Si cette option est activée, les notifications pour les recommandations d’extension ne sont pas affichées.
	"extensions.ignoreRecommendations": false,

	// Ce paramètre est déprécié. Utilisez le paramètre extensions.ignoreRecommendations pour contrôler les notifications de recommandation. Utilisez les actions de visibilité de la vue Extensions pour masquer la vue recommandée par défaut.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Remplacez la prise en charge d’une extension par un espace de travail non approuvé. Les extensions utilisant la valeur `true` sont toujours activées. Les extensions utilisant la valeur `limited` sont toujours activées et l’extension masquera les fonctionnalités nécessitant une approbation. Les extensions utilisant la valeur `false` ne sont activées que dans un espace de travail approuvé.
	"extensions.supportUntrustedWorkspaces": {},

	// Remplacez la prise en charge d’une extension par les espaces de travail virtuels.
	"extensions.supportVirtualWorkspaces": {
		"pub.name": false
	},

	// Activez l'hôte d'extension Web Worker.
	//  - true: L’hôte d’extension Web Worker sera toujours lancé.
	//  - false: L’hôte d’extension Web Worker ne sera jamais lancé.
	//  - auto: L’hôte d’extension rôle de travail est lancé quand une extension Web en a besoin.
	"extensions.webWorker": "auto",

	// Activez/désactivez la possibilité du défilement intelligent dans la vue de sortie. Le défilement intelligent vous permet de verrouiller automatiquement le défilement quand vous cliquez dans la vue de sortie. Il se déverrouille quand vous cliquez sur la dernière ligne.
	"output.smartScroll.enabled": true,

	// Liste des extensions à ignorer lors de la synchronisation. L'identificateur d'une extension est toujours '${publisher}.${name}'. Par exemple : 'vscode.csharp'.
	"settingsSync.ignoredExtensions": [],

	// Configurez les paramètres à ignorer pendant la synchronisation.
	"settingsSync.ignoredSettings": [],

	// Synchronisez les combinaisons de touches pour chaque plateforme.
	"settingsSync.keybindingsPerPlatform": true,

	// Quand la fonctionnalité est activée dans le notebook, les barres de navigation contiennent des cellules de code.
	"notebook.breadcrumbs.showCodeCells": true,

	// Contrôle le rendu de l’indicateur de focus sur les bordures de cellule ou sur la reliure gauche
	"notebook.cellFocusIndicator": "gutter",

	// Indique si la barre d'outils de la cellule doit être affichée, ou si elle doit être masquée.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// Indique si la barre d’outils de la cellule doit apparaître au survol de la souris ou au clic.
	"notebook.cellToolbarVisibility": "click",

	// Détermine si l’éditeur de bloc-notes doit être rendu dans un format compact. Par exemple, lorsqu’il est activé, il diminue la largeur de la marge de gauche.
	"notebook.compactView": true,

	// Contrôle si les actions de sortie doivent être rendues dans la barre d’outils de sortie.
	"notebook.consolidatedOutputButton": true,

	// Contrôle si des actions supplémentaires sont affichées dans une liste déroulante à côté du bouton Exécuter.
	"notebook.consolidatedRunButton": false,

	// Indique s'il est nécessaire d'utiliser l'éditeur de différences de texte pour le notebook.
	"notebook.diff.enablePreview": true,

	// Masquer les différences de métadonnées
	"notebook.diff.ignoreMetadata": false,

	// Masquer les différences de sorties
	"notebook.diff.ignoreOutputs": false,

	// Liste de priorités des types mime de sortie
	"notebook.displayOrder": [],

	// Détermine si l’éditeur de blocs-notes doit autoriser les cellules à déplacer des cellules par glisser-déplacer.
	"notebook.dragAndDropEnabled": true,

	// Paramètres des éditeurs de code utilisés dans les blocs-notes. Ils peuvent être utilisés pour personnaliser la plupart des paramètres editor.*.
	"notebook.editorOptionsCustomizations": {},

	// Détermine si une barre d’outils globale doit être rendue dans l’éditeur de blocs-notes.
	"notebook.globalToolbar": true,

	// Contrôle si les actions de la barre d’outils du bloc-notes doivent afficher l’étiquette ou non.
	"notebook.globalToolbarShowLabel": true,

	// Contrôlez l’emplacement d’affichage des actions de cellule d’insertion.
	//  - betweenCells: Barre d’outils qui apparaît lors du pointage entre les cellules.
	//  - notebookToolbar: Barre d’outils en haut de l’éditeur de blocs-notes.
	//  - both: Les deux barres d’outils.
	//  - hidden: Les actions d’insertion n’apparaissent nulle part.
	"notebook.insertToolbarLocation": "both",

	// Contrôle l’affichage des numéros de ligne dans l’éditeur de cellule.
	"notebook.lineNumbers": "off",

	// Lorsque cette option est activée, le curseur peut accéder à la cellule suivante/précédente lorsque le curseur actuel de l’éditeur de cellules se trouve à la première/dernière ligne.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// Quand la fonctionnalité de contour est activée dans le notebook, elle permet d'afficher les cellules de code.
	"notebook.outline.showCodeCells": false,

	// Contrôlez le nombre de lignes de texte qui sont rendues dans une sortie texte.
	"notebook.output.textLineLimit": 30,

	// Indique si la barre d'état de la cellule doit être affichée.
	//  - hidden: La barre d’état de la cellule est toujours masquée.
	//  - visible: La barre d’état de la cellule est toujours visible.
	//  - visibleAfterExecute: La barre d’état de la cellule est masquée jusqu’à ce que la cellule soit exécutée. Ensuite, elle devient visible et affiche l’état d’exécution.
	"notebook.showCellStatusBar": "visible",

	// Contrôle l’affichage de la Flèche de pliage de l’en-tête de démarque.
	//  - always: Les contrôles de pliage sont toujours visibles.
	//  - mouseover: Les contrôles de pliage sont visibles uniquement lors du basculement de souris.
	"notebook.showFoldingControls": "mouseover",

	// Indique si une pile d’annulation/rétablissement distincte doit exister pour chaque cellule.
	"notebook.undoRedoPerCell": true,

	// Contrôle l'application de 'provideTasks' pour toutes les extensions du fournisseur de tâches. Si la commande Tâches : Exécuter la tâche est lente, la désactivation de la détection automatique des fournisseurs de tâches peut être utile. Les extensions individuelles peuvent également fournir des paramètres qui désactivent la détection automatique.
	"task.autoDetect": "on",

	// Configure s'il faut afficher l'invite du détecteur de problèmes de correspondance pendant l'exécution d'une tâche. Définissez le paramètre sur 'true' pour ne jamais afficher d'invite ou utilisez un dictionnaire de types de tâche pour désactiver les invites seulement pour des types de tâches spécifiques.
	"task.problemMatchers.neverPrompt": false,

	// Détermine si le détail de la tâche doit être affiché pour les tâches qui comportent un détail dans les sélections rapides de tâches, par exemple Exécuter la tâche.
	"task.quickOpen.detail": true,

	// Contrôle le nombre d'éléments récents suivis dans la boîte de dialogue d'ouverture rapide de tâche.
	"task.quickOpen.history": 30,

	// Force la commande Tâches : exécuter la tâche à utiliser le comportement "tout afficher" (plus lent) à la place du sélecteur à deux niveaux (plus rapide), où les tâches sont regroupées par fournisseur.
	"task.quickOpen.showAll": false,

	// Contrôle si la recherche rapide de tâche est ignorée quand il n'y a qu'une seule tâche.
	"task.quickOpen.skip": false,

	// Enregistrez tous les éditeurs comportant des modifications avant d'exécuter une tâche.
	//  - always: Enregistre toujours tous les éditeurs avant l'exécution d'une tâche.
	//  - never: N'enregistre jamais les éditeurs avant l'exécution d'une tâche.
	//  - prompt: Invite à enregistrer le contenu des éditeurs avant l'exécution d'une tâche.
	"task.saveBeforeRun": "always",

	// Configure si un avertissement est affiché quand un fournisseur est lent
	"task.slowProviderWarning": true,

	// Personnalise le type de terminal à lancer.
	//  - integrated: Utiliser le terminal intégré de VS Code.
	//  - external: Utiliser le terminal externe configuré.
	"terminal.explorerKind": "integrated",

	// Personnalise le terminal à exécuter sur Linux.
	"terminal.external.linuxExec": "xterm",

	// Personnalise l’application de terminal à exécuter sur macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Personnalise le terminal à exécuter sur Windows.
	"terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

	// Indique si les combinaisons de touches avec pression simultanée doivent être autorisées dans le terminal. Quand la valeur est true et que la frappe donne lieu à une pression simultanée, #terminal.integrated.commandsToSkipShell# est contourné. Si la valeur est false, cela vous permet d'envoyer ctrl+k vers votre interpréteur de commandes (et non VS Code).
	"terminal.integrated.allowChords": true,

	// Indique si les mnémoniques de barre de menus (par exemple alt+f) sont autorisées à déclencher l'ouverture de la barre de menus. Notez que si la valeur est true, toutes les frappes de la touche alt ignorent l'interpréteur de commandes. Cela n'a aucun effet sur macOS.
	"terminal.integrated.allowMnemonics": false,

	// Si le paramètre est activé, la combinaison Alt/Option + clic permet de repositionner le curseur d'invite sous celui de la souris quand #editor.multiCursorModifier# a la valeur 'alt' (valeur par défaut). Selon votre interpréteur de commandes, cela risque de ne pas fonctionner de manière fiable.
	"terminal.integrated.altClickMovesCursor": true,

	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.linux` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.linux": null,

	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.osx` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.osx": null,

	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.windows` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.windows": null,

	// Nombre de millisecondes d’affichage la cloche d’appel dans un onglet de terminal lors de son déclenchement.
	"terminal.integrated.bellDuration": 1000,

	// Ensemble d’ID de commandes dont les combinaisons de touches ne sont pas envoyées à l’interpréteur de commandes mais sont toujours prises en charge par VS Code. Cela permet aux combinaisons de touches qui sont normalement consommées par l’interpréteur de commandes de produire le même résultat que dans une situation où le terminal n’a pas le focus, par exemple `Ctrl+P` pour lancer Quick Open.
	// 
	// 
	// 
	// De nombreuses commandes sont ignorées par défaut. Pour remplacer une valeur par défaut et passer la combinaison de touches de cette commande à l’interpréteur de commandes, ajoutez la commande précédée du caractère `-`. Par exemple, ajoutez `-workbench.action.quickOpen` pour autoriser la combinaison `Ctrl+P` à atteindre l’interpréteur de commandes.
	// 
	// 
	// 
	// La liste suivante des commandes ignorées par défaut est tronquée quand elle est affichée dans l’éditeur de paramètres. Pour voir la liste complète, [ouvrir le JSON des paramètres par défaut](command:workbench.action.openRawDefaultSettings 'Ouvrir les paramètres par défaut (JSON)') puis recherchez la première commande dans la liste ci-dessous.
	// 
	// &nbsp;
	// 
	// Commandes ignorées par défaut´:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Détermine s'il est nécessaire de confirmer à la fermeture de la fenêtre s’il existe de sessions de terminal actives.
	//  - never: Ne jamais confirmer.
	//  - always: Confirmez toujours l’existence de terminaux.
	//  - hasChildProcesses: Confirmez s’il existe des terminaux qui ont des processus enfants.
	"terminal.integrated.confirmOnExit": "never",

	// Contrôle s’il faut confirmer la suppression des terminaux lorsqu’ils ont des processus enfants. Lorsqu’il est défini sur Éditeur, les terminaux de la zone d’éditeur sont marqués comme modifiés lorsqu’ils ont des processus enfants. Notez que la détection des processus enfants peut ne pas fonctionner correctement pour les interpréteurs de commandes tels que Git Bash qui n’exécutent pas leurs processus en tant que processus enfants de l’interpréteur de commandes.
	//  - never: Ne jamais confirmer.
	//  - editor: Confirmez si le terminal se trouve dans l’éditeur.
	//  - panel: Confirmez si le terminal se trouve dans le panneau.
	//  - always: Confirmez si le terminal est se trouve dans l’éditeur ou le panneau.
	"terminal.integrated.confirmOnKill": "editor",

	// Détermine si le texte sélectionné dans le terminal doit être copié dans le Presse-papiers.
	"terminal.integrated.copyOnSelection": false,

	// Détermine si le curseur du terminal doit clignoter.
	"terminal.integrated.cursorBlinking": false,

	// Contrôle le style du curseur du terminal.
	"terminal.integrated.cursorStyle": "block",

	// Contrôle la largeur du curseur quand '#terminal.integrated.cursorStyle#' a la valeur 'line'.
	"terminal.integrated.cursorWidth": 1,

	// Indique s’il faut dessiner les glyphes personnalisés pour les caractères de dessin de zone et d’élément de bloc plutôt que d’utiliser la police, ce qui améliore généralement le rendu avec des lignes continues. Notez que cela ne fonctionne pas avec le convertisseur DOM.
	"terminal.integrated.customGlyphs": true,

	// Chemin explicite de lancement du terminal. Il est utilisé en tant que répertoire de travail actif du processus d'interpréteur de commandes. Cela peut être particulièrement utile dans les paramètres d'espace de travail, si le répertoire racine n'est pas un répertoire de travail actif adéquat.
	"terminal.integrated.cwd": "",

	// Contrôle l’emplacement où s’affichent les nouveaux terminaux créés.
	//  - editor: Créer des terminaux dans l’éditeur
	//  - view: Créer des terminaux dans l’affichage terminal
	"terminal.integrated.defaultLocation": "view",

	// Profil par défaut à utiliser sur Linux. Ce paramètre est ignoré si `terminal.integrated.shell.linux` ou `terminal.integrated.shellArgs.linux` sont définis.
	"terminal.integrated.defaultProfile.linux": null,

	// Profil par défaut à utiliser sur macOS. Ce paramètre est ignoré si `terminal.integrated.shell.osx` ou `terminal.integrated.shellArgs.osx` sont définis.
	//  - bash: $(terminal-bash) bash
	// - path: bash
	// - args: ['-l']
	//  - zsh: $(terminal) zsh
	// - path: zsh
	// - args: ['-l']
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdenfifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.osx": null,

	// Profil par défaut à utiliser sur Windows. Ce paramètre est ignoré si `terminal.integrated.shell.windows` ou `terminal.integrated.shellArgs.windows` sont définis.
	"terminal.integrated.defaultProfile.windows": null,

	// Détermine s'il est nécessaire de détecter la variable d'environnement '$LANG' et de lui affecter une option conforme à UTF-8 dans la mesure où le terminal de VS Code prend uniquement en charge les données encodées au format UTF-8 provenant de l'interpréteur de commandes.
	//  - auto: Définissez la variable d'environnement '$LANG' si la variable existante est manquante, ou si elle ne finit pas par '.UTF-8'.
	//  - off: Ne définissez pas la variable d'environnement '$LANG'.
	//  - on: Définissez toujours la variable d'environnement '$LANG'.
	"terminal.integrated.detectLocale": "auto",

	// Détermine si le texte en gras dans le terminal doit toujours utiliser la variante de couleur ANSI "bright".
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Contrôle si l’appel du terminal est activé, cet appel s’affiche sous la forme d’une cloche près du nom du terminal.
	"terminal.integrated.enableBell": false,

	// Indique si les liens de fichiers doivent être activés dans le terminal. Les liens peuvent être lents quand vous travaillez sur un lecteur réseau, car chaque lien de fichier est vérifié par rapport au système de fichiers. Le changement de cette option ne prend effet que sur les nouveaux terminaux.
	"terminal.integrated.enableFileLinks": true,

	// Permet la persistance des sessions de terminal de l'espace de travail entre les rechargements de fenêtres.
	"terminal.integrated.enablePersistentSessions": true,

	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur Linux. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.linux": {},

	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur macOS. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.osx": {},

	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur Windows. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.windows": {},

	// Indique s'il est nécessaire d'afficher l'indicateur des changements apportés à un environnement sur chaque terminal. Cet indicateur précise si des extensions ont été effectuées, ou si vous souhaitez apporter des changements à l'environnement du terminal.
	//  - off: Désactivez l'indicateur.
	//  - on: Activez l'indicateur.
	//  - warnonly: Affiche uniquement l'indicateur d'avertissement qui montre que l'environnement d'un terminal est 'obsolète'. N'affiche pas l'indicateur d'information qui montre que l'environnement d'un terminal a été modifié par une extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Indique si les terminaux doivent être relancés automatiquement quand l'extension souhaite contribuer à son environnement et qu'aucune interaction n'a eu lieu jusqu'à maintenant.
	"terminal.integrated.environmentChangesRelaunch": true,

	// Paramètre expérimental qui vise à optimiser la détection des liens dans le terminal en améliorant le moment où ils sont détectés, et en activant le partage de la détection des liens avec l'éditeur. Pour le moment, seuls les liens web sont pris en charge.
	"terminal.integrated.experimentalLinkProvider": true,

	// Multiplicateur de vitesse de défilement quand la touche Alt est enfoncée.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Contrôle la famille de polices du terminal. La valeur par défaut est '#editor.fontFamily#'.
	"terminal.integrated.fontFamily": "",

	// Contrôle la taille de police en pixels du terminal.
	"terminal.integrated.fontSize": 12,

	// Épaisseur de police à utiliser dans le terminal pour le texte qui n'est pas en gras. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"terminal.integrated.fontWeight": "normal",

	// Épaisseur de police à utiliser dans le terminal pour le texte qui est en gras. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"terminal.integrated.fontWeightBold": "bold",

	// Contrôle si le terminal utilise le GPU pour son affichage.
	//  - auto: Laisse VS Code détecter le renderer qui offre la meilleure expérience.
	//  - on: Active l'accélération GPU dans le terminal.
	//  - off: Désactive l'accélération GPU dans le terminal.
	//  - canvas: Utilisez le convertisseur de canevas de secours dans le terminal. Cela utilise un contexte 2D à la place de WebGL et peut être préférable sur certains systèmes.
	"terminal.integrated.gpuAcceleration": "auto",

	// Indique si les nouveaux interpréteurs de commandes doivent hériter leur environnement de VS Code, qui peut sourcer un interpréteur de connexion pour garantir l’initialisation de $PATH et d’autres variables de développement. Cela n’a aucun effet sur Windows.
	"terminal.integrated.inheritEnv": true,

	// Contrôle l'espacement des lettres du terminal. Il s'agit d'une valeur entière qui représente la quantité de pixels supplémentaires à ajouter entre les caractères.
	"terminal.integrated.letterSpacing": 0,

	// Contrôle la hauteur de ligne du terminal. Ce nombre est multiplié par la taille de police du terminal pour obtenir la hauteur de ligne réelle en pixels.
	"terminal.integrated.lineHeight": 1,

	// Expérimental : l'écho local est désactivé quand l'un de ces noms de programmes est trouvé dans le titre du terminal.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Expérimental : durée du délai réseau, en millisecondes, pendant lequel les modifications locales sont répercutées sur le terminal sans attendre l'accusé de réception du serveur. Si la valeur est '0', l'écho local est toujours activé et si la valeur est '-1', il est désactivé.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Expérimental : style du texte répercuté localement dans le terminal : style de police ou couleur RVB.
	"terminal.integrated.localEchoStyle": "dim",

	// Détermine si la sélection doit être forcée quand Option+clic est utilisé sur macOS. Cela permet de forcer une sélection normale (ligne) et d'interdire l'utilisation du mode de sélection de colonne. Cela permet de copier et de coller à l'aide de la sélection de terminal classique, par exemple, quand le mode souris est activé dans tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Détermine s'il est nécessaire de traiter la clé d'option en tant que touche Méta dans le terminal sur macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// Quand ce paramètre est défini, la couleur de premier plan de chaque cellule change pour essayer de respecter le taux de contraste spécifié. Exemples de valeurs :
	// 
	// - 1 : valeur par défaut. Ne rien faire.
	// - 4.5 : [conformité WCAG AA (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
	// - 7 : [conformité WCAG AAA (amélioré)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21 : blanc sur noir ou noir sur blanc.
	"terminal.integrated.minimumContrastRatio": 1,

	// Multiplicateur à utiliser sur le 'deltaY' des événements de défilement de la roulette de la souris.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// When the terminal process must be shutdown (eg. on window or application close), this determines when the previous terminal session contents should be restored and processes be recreated when the workspace is next opened. Restoring of the process current working directory depends on whether it is supported by the shell.
	//  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
	//  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
	//  - never: Never restore the terminal buffers or recreate the process.
	"terminal.integrated.persistentSessionReviveProcess": "never",

	// Contrôle le nombre maximal de lignes qui seront restaurées lors de la reconnexion à une session terminale persistante. L’augmentation de cette opération permet de restaurer plus de lignes de scrollback au prix d’une mémoire supérieure et d’augmenter le temps nécessaire pour se connecter aux terminaux lors du démarrage. Ce paramètre nécessite un redémarrage pour prendre effet et doit être défini sur une valeur inférieure ou égale à' #terminal. Integrated. scrollback # '.
	"terminal.integrated.persistentSessionScrollback": 100,

	// Profils Linux à présenter au moment de la création d'un terminal via la liste déroulante du terminal. Quand ils sont définis, ces profils remplacent les profils détectés par défaut. Ils sont composés de `path` et éventuellement de `args`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// Profils macOS à présenter au moment de la création d'un terminal via la liste déroulante du terminal. Quand ils sont définis, ces profils remplacent les profils détectés par défaut. Ils sont composés de `path` et éventuellement de `args`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// Profils Windows à présenter au moment de la création d'un terminal via la liste déroulante du terminal. Pour les exclure, affectez-leur une valeur null. Pour vous servir de la configuration détectée par défaut, utilisez la propriété `source`. Sinon, définissez `path` et éventuellement `args`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Contrôle la façon dont le terminal réagit au clic droit.
	//  - default: Affiche le menu contextuel.
	//  - copyPaste: Effectue une copie quand il existe une sélection, sinon effectue un collage.
	//  - paste: Effectue un collage à la suite d'un clic droit.
	//  - selectWord: Sélectionne le mot sous le curseur et affiche le menu contextuel.
	"terminal.integrated.rightClickBehavior": "selectWord",

	// Contrôle la quantité maximale de lignes que le terminal conserve en mémoire tampon.
	"terminal.integrated.scrollback": 1000,

	// Dispatche la plupart des combinaisons de touches au terminal au lieu du banc d'essai, en remplaçant '#terminal.integrated.commandsToSkipShell#', qui peut être utilisé alternativement pour affiner le réglage.
	"terminal.integrated.sendKeybindingsToShell": false,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.linux#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.linux`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur Linux. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profil de terminal).
	"terminal.integrated.shell.linux": null,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.osx#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.osx`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur macOS. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profil de terminal).
	"terminal.integrated.shell.osx": null,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.windows#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.windows`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur Windows. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profil de terminal).
	"terminal.integrated.shell.windows": null,

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.linux#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.linux`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal Linux. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profils de terminal).
	"terminal.integrated.shellArgs.linux": [],

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.osx#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.osx`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal macOS. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profils de terminal).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.windows#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.windows`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal Windows. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profils de terminal).
	"terminal.integrated.shellArgs.windows": [],

	// Détermine s'il est nécessaire d'afficher l'alerte "Le processus du terminal s'est achevé avec le code de sortie" quand le code de sortie est différent de zéro.
	"terminal.integrated.showExitAlert": true,

	// Indique s’il faut afficher les pointages pour les liens dans la sortie du terminal.
	"terminal.integrated.showLinkHover": true,

	// Contrôle le répertoire de travail dans lequel un terminal divisé démarre.
	//  - workspaceRoot: Un nouveau terminal divisé utilise la racine de l'espace de travail en tant que répertoire de travail. Dans un espace de travail multiracine, vous pouvez choisir le dossier racine à utiliser.
	//  - initial: Un nouveau terminal divisé utilise le répertoire de travail dans lequel le terminal parent a démarré.
	//  - inherited: Sur macOS et Linux, un nouveau terminal divisé utilise le répertoire de travail du terminal parent. Sur Windows, le comportement est le même qu'avec le paramètre initial.
	"terminal.integrated.splitCwd": "inherited",

	// Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. This will not be displayed for Windows.
	// - `${workspaceFolder}`: the workpsace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to xterm.js by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// Contrôle si les états de l’onglet terminal prennent en charge l’animation (tâches en cours d’exécution).
	"terminal.integrated.tabs.enableAnimation": true,

	// Contrôle si les onglets de terminal s’affichent en tant que liste sur le côté du terminal. Quand cette option est désactivée, une liste déroulante s’affiche à la place.
	"terminal.integrated.tabs.enabled": true,

	// Contrôle si le focus sur le terminal d’un onglet se produit par un clic ou un double-clic.
	//  - singleClick: Mettre le focus sur le terminal au clic sur l’onglet d’un terminal
	//  - doubleClick: Mettre le focus sur le terminal au double-clic sur l’onglet d’un terminal
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// Contrôle si l’affichage des onglets du terminal est masqué sous certaines conditions.
	//  - never: Ne jamais masquer l’affichage des onglets du terminal
	//  - singleTerminal: Masquer l’affichage des onglets de terminaux quand un seul terminal est ouvert
	//  - singleGroup: Masquer l’affichage des onglets de terminaux quand un seul groupe de terminaux est ouvert
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// Contrôle l’emplacement des onglets du terminal, à gauche ou à droite du ou des terminaux réels.
	//  - left: Afficher l’affichage des onglets de terminaux à gauche du terminal
	//  - right: Afficher l’affichage des onglets de terminaux à droite du terminal
	"terminal.integrated.tabs.location": "right",

	// Separator used by `terminal.integrated.title` and `terminal.integrated.description`.
	"terminal.integrated.tabs.separator": " - ",

	// Contrôle si les boutons de fractionnement et de suppression de terminal sont affichés en regard du nouveau bouton de terminal.
	//  - always: Toujours afficher les actions
	//  - singleTerminal: Afficher les actions lorsqu’il s’agit du seul terminal ouvert
	//  - singleTerminalOrNarrow: Afficher les actions lorsqu'il s'agit du seul terminal ouvert ou lorsque l'affichage des onglets est dans son état étroit sans texte.
	//  - never: Ne jamais afficher les actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// Affiche les informations sur le terminal actif dans l’affichage, ce qui est particulièrement utile lorsque le titre n’est pas visible dans les onglets.
	//  - always: Toujours afficher le terminal actif
	//  - singleTerminal: Afficher le terminal actif quand il est le seul terminal ouvert
	//  - singleTerminalOrNarrow: Afficher le terminal actif quand il est le seul terminal ouvert ou lorsque l’affichage des onglets est dans l’état d’affichage étroit et sans texte
	//  - never: Ne jamais afficher le terminal actif
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// Controls the terminal title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. This will not be displayed for Windows.
	// - `${workspaceFolder}`: the workpsace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to xterm.js by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.title": "${process}",

	// Contrôle la version d'Unicode à utiliser au moment de l'évaluation de la largeur des caractères dans le terminal. Si vous êtes confronté à des emojis ou d'autres caractères larges qui n'occupent pas la quantité appropriée (trop ou trop peu) d'espaces avant ou arrière, vous pouvez essayer d'adapter ce paramètre.
	//  - 6: Version 6 d'Unicode. Il s'agit d'une version antérieure qui doit fonctionner mieux sur les anciens systèmes.
	//  - 11: Version 11 d'Unicode. Cette version offre une meilleure prise en charge sur les systèmes modernes qui utilisent des versions modernes d'Unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Contrôle si les distributions WSL sont affichées ou non dans la liste déroulante de terminal
	"terminal.integrated.useWslProfiles": true,

	// Indique si ConPTY doit être utilisé pour la communication des processus du terminal Windows (nécessite Windows 10 build 18309+). Winpty est utilisé si ce paramètre a la valeur false.
	"terminal.integrated.windowsEnableConpty": true,

	// Chaîne contenant tous les caractères à considérer en tant que séparateurs de mots quand le double-clic est utilisé pour sélectionner un mot.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─",

	// Contrôles si la vue Problèmes devrait révéler automatiquement les fichiers lors de leur ouverture.
	"problems.autoReveal": true,

	// Affichez les erreurs et les avertissements sur les fichiers et les dossiers.
	"problems.decorations.enabled": true,

	// Lorsqu'il est activé, le problème actuel s'affiche dans la barre d'état.
	"problems.showCurrentInStatus": false,

	// Activez/désactivez les barres de navigation.
	"breadcrumbs.enabled": true,

	// Contrôle si et comment les chemins de fichiers sont affichés dans la vue de fil d'ariane.
	//  - on: Afficher le chemin du fichier dans l’affichage de barres de navigation.
	//  - off: Ne pas afficher le chemin du fichier dans la vue de barres de navigation.
	//  - last: Afficher uniquement le dernier élément du chemin du fichier dans la vue de barres de navigation.
	"breadcrumbs.filePath": "on",

	// Restituer les fils d'Ariane avec des icônes.
	"breadcrumbs.icons": true,

	// Si activé, les barres de navigation montrent des symboles de type 'array'.
	"breadcrumbs.showArrays": true,

	// Si activé, les barres de navigation montrent des symboles de type 'boolean'.
	"breadcrumbs.showBooleans": true,

	// Si activé, les barres de navigation montrent des symboles de type 'class'.
	"breadcrumbs.showClasses": true,

	// Si activé, les barres de navigation montrent des symboles de type 'constant'.
	"breadcrumbs.showConstants": true,

	// Si activé, les barres de navigation montrent des symboles de type 'constructor'.
	"breadcrumbs.showConstructors": true,

	// Si activé, les barres de navigation montrent des symboles de type 'enumMember'.
	"breadcrumbs.showEnumMembers": true,

	// Si activé, les barres de navigation montrent des symboles de type 'enum'.
	"breadcrumbs.showEnums": true,

	// Si activé, les barres de navigation montrent des symboles de type 'event'.
	"breadcrumbs.showEvents": true,

	// Si activé, les barres de navigation montrent des symboles de type 'field'.
	"breadcrumbs.showFields": true,

	// Si activé, les barres de navigation montrent des symboles de type 'file'.
	"breadcrumbs.showFiles": true,

	// Si activé, les barres de navigation montrent des symboles de type 'function'.
	"breadcrumbs.showFunctions": true,

	// Si activé, les barres de navigation montrent des symboles de type 'interface'.
	"breadcrumbs.showInterfaces": true,

	// Si activé, les barres de navigation montrent des symboles de type 'key'.
	"breadcrumbs.showKeys": true,

	// Si activé, les barres de navigation montrent des symboles de type 'method'.
	"breadcrumbs.showMethods": true,

	// Si activé, les barres de navigation montrent des symboles de type 'module'.
	"breadcrumbs.showModules": true,

	// Si activé, les barres de navigation montrent des symboles de type 'namespace'.
	"breadcrumbs.showNamespaces": true,

	// Si activé, les barres de navigation montrent des symboles de type 'null'.
	"breadcrumbs.showNull": true,

	// Si activé, les barres de navigation montrent des symboles de type 'number'.
	"breadcrumbs.showNumbers": true,

	// Si activé, les barres de navigation montrent des symboles de type 'object'.
	"breadcrumbs.showObjects": true,

	// Si activé, les barres de navigation montrent des symboles de type 'operator'.
	"breadcrumbs.showOperators": true,

	// Si activé, les barres de navigation montrent des symboles de type 'package'.
	"breadcrumbs.showPackages": true,

	// Si activé, les barres de navigation montrent des symboles de type 'property'.
	"breadcrumbs.showProperties": true,

	// Si activé, les barres de navigation montrent des symboles de type 'string'.
	"breadcrumbs.showStrings": true,

	// Si activé, les barres de navigation montrent des symboles de type 'struct'.
	"breadcrumbs.showStructs": true,

	// Si activé, les barres de navigation montrent des symboles de type 'typeParameter'.
	"breadcrumbs.showTypeParameters": true,

	// Si activé, les barres de navigation montrent des symboles de type 'variable'.
	"breadcrumbs.showVariables": true,

	// Contrôle si et comment les symboles sont affichés dans la vue de fil d'ariane.
	//  - on: Afficher tous les symboles dans l’affichage de barres de navigation
	//  - off: Ne pas afficher de symboles dans la vue de barres de navigation.
	//  - last: Afficher uniquement le symbole actuel dans la vue de barres de navigation.
	"breadcrumbs.symbolPath": "on",

	// Détermine le mode de tri des symboles dans la vue des barres de navigation.
	//  - position: Affichez la structure des symboles par position de fichier.
	//  - name: Affichez la structure des symboles par ordre alphabétique.
	//  - type: Affichez la structure des symboles par type de symbole.
	"breadcrumbs.symbolSortOrder": "position",

	// Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
	// Activez la collecte des rapports d’incident. Cela nous permet d’améliorer la stabilité. 
	// Cette option nécessite un redémarrage pour prendre effet.
	"telemetry.enableCrashReporter": true,

	// Deprecated in favor of the `telemetry.telemetryLevel` setting.
	// Activez la collecte des données de diagnostic. Cela nous permet de mieux comprendre comment Visual Studio Code fonctionne et où des améliorations doivent être apportées. [En savoir plus] (https://go.microsoft.com/fwlink/?LinkId=786907) sur ce que nous recueillons et notre déclaration de confidentialité.
	"telemetry.enableTelemetry": true,

	// Activez la collecte des données de diagnostic. Cela nous permet de mieux comprendre comment Visual Studio Code fonctionne et où des améliorations doivent être apportées. [En savoir plus] (https://go.microsoft.com/fwlink/?LinkId=786907) sur ce que nous recueillons et notre déclaration de confidentialité. Some features may require a restart to take effect.
	//  - on: Enables all telemetry data to be collected.
	//  - error: Enables only error telemetry data and not general usage data.
	//  - off: Disables all product telemetry.
	"telemetry.telemetryLevel": "on",

	// Restituez les éléments de structure avec des icônes. 
	"outline.icons": true,

	// Utilisez des badges pour les erreurs et les avertissements.
	"outline.problems.badges": true,

	// Utilisez des couleurs pour les erreurs et les avertissements.
	"outline.problems.colors": true,

	// Affichez les erreurs et les avertissements sur les éléments de structure.
	"outline.problems.enabled": true,

	// Si activé, le plan montre des symboles de type 'array'.
	"outline.showArrays": true,

	// Si activé, le plan montre des symboles de type 'boolean'.
	"outline.showBooleans": true,

	// Si activé, le plan montre des symboles de type 'class'.
	"outline.showClasses": true,

	// Si activé, le plan montre des symboles de type 'constant'.
	"outline.showConstants": true,

	// Si activé, le plan montre des symboles de type 'constructor'.
	"outline.showConstructors": true,

	// Si activé, le plan montre des symboles de type 'enumMember'.
	"outline.showEnumMembers": true,

	// Si activé, le plan montre des symboles de type 'enum'.
	"outline.showEnums": true,

	// Si activé, le plan montre des symboles de type 'event'.
	"outline.showEvents": true,

	// Si activé, le plan montre des symboles de type 'field'.
	"outline.showFields": true,

	// Si activé, le plan montre des symboles de type 'file'.
	"outline.showFiles": true,

	// Si activé, le plan montre des symboles de type 'function'.
	"outline.showFunctions": true,

	// Si activé, le plan montre des symboles de type 'interface'.
	"outline.showInterfaces": true,

	// Si activé, le plan montre des symboles de type 'key'.
	"outline.showKeys": true,

	// Si activé, le plan montre des symboles de type 'method'.
	"outline.showMethods": true,

	// Si activé, le plan montre des symboles de type 'module'.
	"outline.showModules": true,

	// Si activé, le plan montre des symboles de type 'namespace'.
	"outline.showNamespaces": true,

	// Si activé, le plan montre des symboles de type 'null'.
	"outline.showNull": true,

	// Si activé, le plan montre des symboles de type 'number'.
	"outline.showNumbers": true,

	// Si activé, le plan montre des symboles de type 'object'.
	"outline.showObjects": true,

	// Si activé, le plan montre des symboles de type 'operator'.
	"outline.showOperators": true,

	// Si activé, le plan montre des symboles de type 'package'.
	"outline.showPackages": true,

	// Si activé, le plan montre des symboles de type 'property'.
	"outline.showProperties": true,

	// Si activé, le plan montre des symboles de type 'string'.
	"outline.showStrings": true,

	// Si activé, le plan montre des symboles de type 'struct'.
	"outline.showStructs": true,

	// Si activé, le plan montre des symboles de type 'typeParameter'.
	"outline.showTypeParameters": true,

	// Si activé, le plan montre des symboles de type 'variable'.
	"outline.showVariables": true,

	// Tableau de sources chronologiques à exclure de la vue Chronologie.
	"timeline.excludeSources": null,

	// Expérimental. Contrôle si la vue Chronologie doit charger la page suivante quand vous faites défiler une liste d'éléments jusqu'à la fin.
	"timeline.pageOnScroll": false,

	// Nombre d'éléments à montrer par défaut dans la vue Chronologie et durant le chargement d'autres éléments. L'affectation de la valeur 'null' (valeur par défaut) permet de choisir automatiquement une taille de page basée sur la zone visible de la vue Chronologie.
	"timeline.pageSize": null,

	// Configurez les paramètres à remplacer pour le langage [css].
	"[css]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [dart].
	"[dart]":  {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"editor.detectIndentation": false,
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [dockercompose].
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// Configurez les paramètres à remplacer pour le langage [dockerfile].
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configurez les paramètres à remplacer pour le langage [git-commit].
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// Configurez les paramètres à remplacer pour le langage [git-rebase].
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configurez les paramètres à remplacer pour le langage [go].
	"[go]":  {
		"editor.insertSpaces": false,
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
				"source.organizeImports": true
		},
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// Configurez les paramètres à remplacer pour le langage [handlebars].
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [html].
	"[html]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [java].
	"[java]":  {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// Configurez les paramètres à remplacer pour le langage [json].
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [jsonc].
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [less].
	"[less]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [makefile].
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configurez les paramètres à remplacer pour le langage [markdown].
	"[markdown]":  {
		"editor.wordWrap": "on",
		"editor.quickSuggestions": false
	},

	// Configurez les paramètres à remplacer pour le langage [php].
	"[php]":  {
		"cSpell.fixSpellingWithRenameProvider": false
	},

	// Configurez les paramètres à remplacer pour le langage [scss].
	"[scss]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configurez les paramètres à remplacer pour le langage [search-result].
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configurez les paramètres à remplacer pour le langage [shellscript].
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// Configurez les paramètres à remplacer pour le langage [yaml].
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "keep",
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Quand les extensions activées sont téléchargées localement et installées sur la machine distante.
	"remote.downloadExtensionsLocally": false,

	// Quand cette option est activée, les nouveaux processus qui s'exécutent sont détectés, et les ports qu'ils écoutent sont réacheminés automatiquement. La désactivation de ce paramètre n’empêchera pas le transfert de tous les ports. Même lorsqu’elles sont désactivées, les extensions peuvent toujours faire en sorte que les ports soient transférés, et l’ouverture de certaines URL entraîne toujours le transfert des ports.
	"remote.autoForwardPorts": true,

	// Définit la source à partir de laquelle les ports sont automatiquement réacheminés quand 'remote.autoForwardPorts' a la valeur true. Sur les machines Windows et Mac distantes, l'option 'process' n'a aucun effet, et 'output' est utilisé. Nécessite un rechargement pour prendre effet.
	//  - process: Les ports sont automatiquement réacheminés quand ils sont découverts par la surveillance des processus ayant démarré et incluant un port.
	//  - output: Les ports sont automatiquement réacheminés quand ils sont découverts via la lecture de la sortie du terminal et du débogage. Dans la mesure où tous les processus qui utilisent des ports ne s'affichent pas dans le terminal intégré ou la console de débogage, certains ports ne sont pas pris en compte. Le réacheminement des ports en fonction de la sortie n'est pas "annulé" tant que ces ports ne sont pas rechargés, ou qu'ils ne sont pas fermés par l'utilisateur dans la vue Ports.
	"remote.autoForwardPortsSource": "process",

	// Remplacez le type d'une extension. Les extensions 'ui' sont installées et exécutées sur la machine locale, alors que les extensions 'workspace' sont exécutées sur la machine distante. Quand vous remplacez le type par défaut d'une extension à l'aide de ce paramètre, vous spécifiez si cette extension doit être installée et activée localement ou à distance.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Spécifie le nom d’hôte local à utiliser pour le réacheminement du port.
	"remote.localPortHost": "localhost",

	// Définissez les propriétés par défaut appliquées à tous les ports qui n’obtiennent pas leurs propriétés à partir du paramètre `remote.portsAttributes`. Exemple :
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Définissez les propriétés appliquées en cas de réacheminement d’un numéro de port en particulier. Exemple :
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// Restaure les ports que vous avez réacheminés dans un espace de travail.
	"remote.restoreForwardedPorts": true,

	// Un tableau des langages pour lesquels les abréviations Emmet ne devraient pas être développées.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// Tableau de chemins d’accès, où chaque chemin peut pointer vers un fichier Emmet syntaxProfiles et/ou d’extrait de code.
	// En cas de conflit, les profils/extraits de code des chemins plus récents remplacent ceux des chemins plus anciens.
	// Consultez https://code.visualstudio.com/docs/editor/emmet pour plus d’informations et pour obtenir un exemple de fichier d’extrait.
	"emmet.extensionsPath": [],

	// Activer les abréviations Emmet dans les langages qui ne sont pas pris en charge par défaut. Ajoutez ici un mappage entre le langage en question et le langage pris en charge par Emmet.
	//  Exemple : `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// Quand la valeur est 'false', la totalité du fichier est analysé, ce qui permet de déterminer si la position actuelle est valide pour le développement des abréviations Emmet. Quand la valeur est 'true', seul le contenu autour de la position actuelle dans les fichiers CSS/SCSS/Less est analysé.
	"emmet.optimizeStylesheetParsing": true,

	// Préférences utilisées pour modifier le comportement de certaines actions et résolveurs d'Emmet.
	"emmet.preferences": {},

	// Affiche les abréviations Emmet possibles comme suggestions. Non applicable dans les feuilles de style ou quand emmet.showExpandedAbbreviation a la valeur "never".
	"emmet.showAbbreviationSuggestions": true,

	// Affiche les abréviations Emmet développées en tant que suggestions.
	// L'option "inMarkupAndStylesheetFilesOnly" s'applique aux syntaxes html, haml, jade, slim, xml, xsl, css, scss, sass, less et stylus.
	// L'option "always" s'applique à toutes les parties du fichier indépendamment de la balise/du css.
	"emmet.showExpandedAbbreviation": "always",

	// Si la valeur est 'true', les suggestions Emmet s'affichent sous forme d'extraits, ce qui vous permet de les ordonner conformément au paramètre '#editor.snippetSuggestions#'.
	"emmet.showSuggestionsAsSnippets": false,

	// Définissez le profil pour la syntaxe spécifiée ou utilisez votre propre profil avec des règles spécifiques.
	"emmet.syntaxProfiles": {},

	// Lorsqu’activé, les abréviations Emmet sont développées lorsque vous appuyez sur TAB.
	"emmet.triggerExpansionOnTab": false,

	// Variables à utiliser dans les extraits de code Emmet.
	"emmet.variables": {},

	// Contrôle si force push (avec ou sans lease) est activé.
	"git.allowForcePush": false,

	// Détermine si les commits sans exécution des crochets pre-commit et commit-msg sont autorisés.
	"git.allowNoVerifyCommit": false,

	// Toujours afficher le groupe de ressources des changements en zone de transit (Staged).
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Contrôle le flag signoff pour toutes les modifications.
	"git.alwaysSignOff": false,

	// Quand la valeur est true, les commits sont automatiquement récupérés (fetch) à partir du dépôt distant par défaut du dépôt Git actuel. Quand la valeur est 'all', les commits sont récupérés à partir de tous les dépôts distants.
	"git.autofetch": false,

	// Durée en secondes entre chaque récupération git automatique quand `git.autofetch` est activé.
	"git.autofetchPeriod": 180,

	// Détermine si l'actualisation automatique est activée.
	"git.autorefresh": true,

	// Configure le moment où les dépôts doivent être détectés automatiquement.
	//  - true: Recherchez dans les deux sous-dossiers du dossier ouvert en cours et dans les dossiers parents de fichiers ouverts.
	//  - false: Désactivez l’analyse de dépôt automatique.
	//  - subFolders: Rechercher dans les sous-dossiers du dossier actuellement ouvert.
	//  - openEditors: Rechercher dans les dossiers parents de fichiers ouverts.
	"git.autoRepositoryDetection": true,

	// Remisez (stash) les changements avant de les tirer et de les restaurer après un tirage réussi.
	"git.autoStash": false,

	// Contrôle l'ordre de tri des branches.
	"git.branchSortOrder": "committerdate",

	// Expression régulière pour valider les nouveaux noms de branche.
	"git.branchValidationRegex": "",

	// Le caractère pour remplacer les espaces dans les nouveaux noms de branche.
	"git.branchWhitespaceChar": "-",

	// Contrôle le type des références Git listées au moment de l'exécution de Extraire vers...
	//  - local: Branches locales
	//  - tags: Étiquettes
	//  - remote: Branches distantes
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Confirmez toujours la création de commits vides pour la commande 'Git: Commit Empty'.
	"git.confirmEmptyCommits": true,

	// Détermine s’il faut demander confirmation avant de forcer le push.
	"git.confirmForcePush": true,

	// Contrôle s’il faut demander une confirmation avant la validation sans vérification.
	"git.confirmNoVerifyCommit": true,

	// Confirmez avant de synchroniser des dépôts git.
	"git.confirmSync": true,

	// Contrôle le badge de compte Git.
	//  - all: Compter tous les changements.
	//  - tracked: Compter uniquement les changements suivis.
	//  - off: Désactivez le compteur.
	"git.countBadge": "all",

	// Contrôle si Git contribue aux couleurs et aux badges de l'Explorateur et de la vue Éditeurs ouverts.
	"git.decorations.enabled": true,

	// Emplacement par défaut où cloner un dépôt git.
	"git.defaultCloneDirectory": null,

	// Contrôle s’il faut détecter automatiquement les sous-modules git.
	"git.detectSubmodules": true,

	// Contrôle la limite de sous-modules git détectés.
	"git.detectSubmodulesLimit": 10,

	// Active la signature de commit avec GPG ou X.509.
	"git.enableCommitSigning": false,

	// Indique si git est activé.
	"git.enabled": true,

	// Validez toutes les modifications en l'absence de modifications en attente.
	"git.enableSmartCommit": false,

	// Contrôle si la commande Git Sync apparaît dans la barre d'état.
	"git.enableStatusBarSync": true,

	// Si activé, récupère toutes les branches au tirage. Sinon, récupère seulement la branche actuelle.
	"git.fetchOnPull": false,

	// Suit l'envoi (push) de toutes les étiquettes au moment de l'exécution de la commande de synchronisation.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// Liste des dépôts git à ignorer.
	"git.ignoredRepositories": [],

	// Ignore l'avertissement Git hérité.
	"git.ignoreLegacyWarning": false,

	// Ignore l'avertissement en cas de changements trop nombreux dans un dépôt.
	"git.ignoreLimitWarning": false,

	// Ignore l'avertissement quand Git est manquant.
	"git.ignoreMissingGitWarning": false,

	// Ignore l'avertissement quand il semble que la branche ait été rebasée au moment du tirage (pull).
	"git.ignoreRebaseWarning": false,

	// Ignore les modifications apportées aux sous-modules dans l'arborescence de fichiers.
	"git.ignoreSubmodules": false,

	// Ignore l'avertissement lorsque Git 2.25 - 2.26 est installé sur Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Contrôle quand afficher la validation de la saisie du message de commit.
	"git.inputValidation": "warn",

	// Contrôle le taille de la longueur de message de commit pour afficher un avertissement.
	"git.inputValidationLength": 72,

	// Contrôle le seuil de longueur de l'objet du message de validation pour afficher un avertissement. Annulez pour hériter la valeur de 'config.inputValidationLength'.
	"git.inputValidationSubjectLength": 50,

	// Détermine s'il est nécessaire d'ouvrir un dépôt automatiquement après le clonage.
	//  - always: Effectue toujours l'ouverture dans la fenêtre active.
	//  - alwaysNewWindow: Effectue toujours l'ouverture dans une nouvelle fenêtre.
	//  - whenNoFolderOpen: Effectue uniquement l'ouverture dans la fenêtre active quand aucun dossier n'est ouvert.
	//  - prompt: Demande toujours l'action à effectuer.
	"git.openAfterClone": "prompt",

	// Contrôle si l'éditeur de diff doit être ouvert quand l'utilisateur clique sur un changement. Sinon, l'éditeur normal est ouvert.
	"git.openDiffOnClick": true,

	// Chemin et nom de fichier de l'exécutable git. Exemple : 'C:\Program Files\Git\bin\git.exe' (Windows). Il peut s'agir également d'un tableau de valeurs de chaîne contenant plusieurs chemins de recherche.
	"git.path": null,

	// Exécute une commande git après un commit réussi.
	//  - none: N'exécutez pas de commande après une validation.
	//  - push: Exécutez 'Git Push' après une validation réussie.
	//  - sync: Exécutez 'Git Sync' après une validation réussie.
	"git.postCommitCommand": "none",

	// Contrôle si Git doit vérifier les fichiers non sauvegardés avant d'effectuer le commit.
	//  - always: Vérifiez les fichiers non enregistrés.
	//  - staged: Vérifiez uniquement les fichiers organisés non enregistrés.
	//  - never: Désactivez la vérification.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Contrôle si Git doit rechercher les fichiers non enregistrés avant de faire un stash des changements.
	//  - always: Vérifiez les fichiers non enregistrés.
	//  - staged: Vérifiez uniquement les fichiers organisés non enregistrés.
	//  - never: Désactive cette vérification.
	"git.promptToSaveFilesBeforeStash": "always",

	// Effectue un élagage au moment de la récupération.
	"git.pruneOnFetch": false,

	// Récupérez toutes les balises pendant le tirage.
	"git.pullTags": true,

	// Forcez git à utiliser rebase pendant l'exécution de la commande sync.
	"git.rebaseWhenSync": false,

	// Contrôle si une configuration utilisateur Git explicite est nécessaire ou si elle peut être devinée par Git quand elle est manquante.
	"git.requireGitUserConfig": true,

	// Liste des chemins d’accès pour rechercher des dépôts git.
	"git.scanRepositories": [],

	// Détermine si l'entrée de commit doit être affichée dans le panneau de contrôle de code source Git.
	"git.showCommitInput": true,

	// Contrôle s’il faut afficher une action Ouvrir le fichier dans l’affichage des modifications de Git.
	"git.showInlineOpenFileAction": true,

	// Contrôle si les actions git doivent afficher la progression.
	"git.showProgress": true,

	// Contrôle s’il faut afficher une notification en cas de réussite d'un envoi (push).
	"git.showPushSuccessNotification": false,

	// Controls whether to show an action button to sync or publish, if there are unpublished commits.
	//  - always: Always shows the action button, if there are unpublished commits.
	//  - whenEmpty: Only shows the action button if there are no other changes and there are unpublished commits.
	//  - never: Never shows the action button.
	"git.showUnpublishedCommitsButton": "whenEmpty",

	// Contrôle les modifications organisées automatiquement par Smart Commit.
	//  - all: Organise automatiquement toutes les modifications.
	//  - tracked: Organise automatiquement les modifications suivies uniquement.
	"git.smartCommitChanges": "all",

	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,

	// Propose d'activer Smart Commit (valide toutes les modifications en l'absence de modifications organisées).
	"git.suggestSmartCommit": true,

	// Contrôle si une notification apparaît lors de l'exécution de l'action Sync, qui permet à l'utilisateur d'annuler l'opération.
	"git.supportCancellation": false,

	// Détermine si VS Code doit être activé en tant que gestionnaire d'authentification pour les processus git générés dans le terminal intégré. Remarque : Les terminaux doivent redémarrer pour permettre la prise en compte des changements apportés à ce paramètre.
	"git.terminalAuthentication": true,

	// Contrôle la date à utiliser pour les éléments de la vue Chronologie.
	//  - committed: Utiliser la date de commit
	//  - authored: Utiliser la date de création
	"git.timeline.date": "committed",

	// Contrôle si l'auteur du commit doit être affiché dans la vue Chronologie.
	"git.timeline.showAuthor": true,

	// Contrôle le comportement des changements non suivis.
	//  - mixed: Tous les changements, suivis et non suivis, apparaissent ensemble et se comportent de la même manière.
	//  - separate: Les changements non suivis apparaissent séparément dans la vue Contrôle de code source. Ils sont également exclus de plusieurs actions.
	//  - hidden: Les changements non suivis sont masqués et exclus de plusieurs actions.
	"git.untrackedChanges": "mixed",

	// Détermine s'il est nécessaire d'utiliser le message de la zone d'entrée de commit en tant que message de stash par défaut.
	"git.useCommitInputAsStashMessage": false,

	// Contrôles si force push utilise la variante force-with-lease plus sûr.
	"git.useForcePushWithLease": true,

	// Détermine si l'authentification GitHub automatique doit être activée pour les commandes Git dans VS Code.
	"github.gitAuthentication": true,

	// URI of your GitHub Enterprise Instance
	"github-enterprise.uri": "",

	// Contrôle l’activation de la détection des tâches Grunt. La détection des tâches Grunt peut entraîner l’exécution de fichiers dans un espace de travail ouvert.
	"grunt.autoDetect": "off",

	// Contrôle l’activation de la détection des tâches Gulp. La détection des tâches Gulp peut entraîner l’exécution de fichiers dans un espace de travail ouvert.
	"gulp.autoDetect": "off",

	// Contrôle l’activation de la détection des tâches Jake. La détection des tâches Jake peut entraîner l’exécution de fichiers dans un espace de travail ouvert.
	"jake.autoDetect": "off",

	// Activer/désactiver le rendu des maths dans la préversion intégrée de la Démarque.
	"markdown.math.enabled": true,

	// Détermine s'il faut automatiquement passer au conflit de fusion suivant après la résolution d'un conflit de fusion.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Créer un CodeLens pour les blocs de conflit de fusion dans l’éditeur.
	"merge-conflict.codeLens.enabled": true,

	// Créer des décorateurs pour les blocs de conflit de fusion dans l’éditeur.
	"merge-conflict.decorators.enabled": true,

	// Contrôle si la vue Diff doit être ouverte pendant la comparaison des changements dans les conflits de fusion.
	//  - Current: Ouvrez la vue Diff dans le groupe d'éditeurs actuel.
	//  - Beside: Ouvrez la vue Diff à côté du groupe d'éditeurs actuel.
	//  - Below: Ouvrez la vue Diff sous le groupe d'éditeurs actuel.
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.
	"debug.javascript.autoExpandGetters": false,

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Whether to suggest pretty printing JavaScript code that looks minified when you step into it.
	"debug.javascript.suggestPrettyPrinting": true,

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Contrôle si les scripts npm doivent être détectés automatiquement.
	"npm.autoDetect": "on",

	// Activez l'exécution de scripts NPM contenus dans un dossier du menu contextuel Explorer.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Activez une vue explorateur pour les scripts npm en l'absence d'un fichier 'package.json' de haut niveau.
	"npm.enableScriptExplorer": false,

	// Configurer les profils glob pour les dossiers qui doivent être exclus de la détection de script automatique.
	"npm.exclude": "",

	// Récupérez des données à partir de https://registry.npmjs.org et https://registry.bower.io pour l'auto-complétion et obtenir des informations concernant les fonctionnalités de pointage sur les dépendances npm.
	"npm.fetchOnlinePackageInfo": true,

	// Gestionnaire de package utilisé pour exécuter des scripts.
	//  - auto: Détectez automatiquement le gestionnaire de package à utiliser pour l'exécution des scripts en fonction des fichiers de verrouillage et des gestionnaires de packages installés.
	//  - npm: Utilisez npm en tant que gestionnaire de package pour l'exécution des scripts.
	//  - yarn: Utilisez YARN en tant que gestionnaire de package pour l'exécution des scripts.
	//  - pnpm: Utilisez pnpm en tant que gestionnaire de package pour l'exécution des scripts.
	"npm.packageManager": "auto",

	// Exécutez les commandes npm avec l'option `--silent`.
	"npm.runSilent": false,

	// Action de clic par défaut utilisée dans l'explorateur de scripts npm : 'open' ou 'run'. La valeur par défaut est 'open'.
	"npm.scriptExplorerAction": "open",

	// Activez/désactivez l'indicateur flottant qui s'affiche quand il a le focus dans le navigateur simple.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Whether the plaintext comment highlighter should be active
	"better-comments.highlightPlainText": false,

	// Whether the multiline comment highlighter should be active
	"better-comments.multilineComments": true,

	// Tags which are used to color the comments. Changes require a restart of VS Code to take effect
	"better-comments.tags": [
		{
			"tag": "!",
			"color": "#FF2D00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "?",
			"color": "#3498DB",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "//",
			"color": "#474747",
			"strikethrough": true,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "todo",
			"color": "#FF8C00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "*",
			"color": "#98C379",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		}
	],

	// Label foreground color (if empty will use `editorCodeLens.foreground` instead).
	"htmlEndTagLabels.labelColor": "",

	// Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).
	"dart.additionalAnalyzerFileExtensions": [],

	// Whether to send analytics such as startup timings, frequency of use of features and analysis server crashes.
	"dart.allowAnalytics": true,

	// Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.
	"dart.allowTestsOutsideTestFolder": false,

	// An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.
	"dart.analysisExcludedFolders": [],

	// Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.
	"dart.analysisServerFolding": true,

	// Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).
	"dart.analyzeAngularTemplates": true,

	// Additional arguments to pass to the Dart analysis server.
	"dart.analyzerAdditionalArgs": [],

	// The port number to be used for the Dart analyzer diagnostic server.
	"dart.analyzerDiagnosticsPort": null,

	// The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.
	"dart.analyzerInstrumentationLogFile": null,

	// The path to a log file for communication between Dart Code and the analysis server.
	"dart.analyzerLogFile": null,

	// The path to a custom Dart analysis server.
	"dart.analyzerPath": null,

	// An SSH host to run the analysis server.
	// This can be useful when modifying code on a remote machine using SSHFS.
	"dart.analyzerSshHost": null,

	// The port number to be used for the Dart analysis server VM service.
	"dart.analyzerVmServicePort": null,

	// Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).
	"dart.autoImportCompletions": true,

	// Determines when to insert comment slashes when pressing `<enter>` in the editor (requires restart).
	// 
	// When using `tripleSlash`, double-slashes will still be included when breaking existing double-slash comments across additional lines.
	//  - none: Never insert slashes automatically
	//  - tripleSlash: Insert `///` when pressing `<enter>` at the end of a triple-slash comment
	//  - all: Insert `///` when pressing `<enter>` at the end of a triple-slash comment and also `//` when pressing `<enter>` at the end of a double-slash comment
	"dart.automaticCommentSlashes": "tripleSlash",

	// Additional args to pass to the `build_runner` when building/watching/serving.
	"dart.buildRunnerAdditionalArgs": [],

	// Whether to check you are using the latest version of the Dart SDK at startup.
	"dart.checkForSdkUpdates": true,

	// Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin.
	//  - debugConsole: Run in the Debug Console pane, using the input as a REPL to evaluate expressions
	//  - terminal: Run in the VS Code integrated terminal where input will be sent to stdin
	//  - externalTerminal: Run in an external terminal where input will be sent to stdin
	"dart.cliConsole": "debugConsole",

	// Whether to show annotations against constructor, method invocations and lists that span multiple lines.
	"dart.closingLabels": true,

	// Whether to insert parentheses and parameter placeholders during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.
	"dart.completeFunctionCalls": true,

	// The path to a log file for communication with the DAP debug adapters. This is useful when trying to diagnose issues with debugging such as missed breakpoints.
	"dart.dapLogFile": null,

	// The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.
	//  - sse: Server-Sent Events
	//  - ws: WebSockets
	"dart.debugExtensionBackendProtocol": "ws",

	// Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.
	"dart.debugExternalPackageLibraries": false,

	// Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.
	"dart.debugSdkLibraries": false,

	// Whether to launch external DevTools windows using Chrome or the system default browser.
	//  - chrome: Locate and launch Google Chrome from your system
	//  - default: Use your systems default web browser
	"dart.devToolsBrowser": "chrome",

	// The path to a low-traffic log file for the Dart DevTools service.
	"dart.devToolsLogFile": null,

	// The port number to be used for the Dart DevTools.
	"dart.devToolsPort": null,

	// Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.
	"dart.devToolsReuseWindows": true,

	// The theme to use for Dart DevTools.
	"dart.devToolsTheme": "dark",

	// An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories.
	"dart.doNotFormat": [],

	// Whether to load [Dart DevTools](https://dart.dev/tools/dart-devtools) embedded inside VS Code.
	"dart.embedDevTools": true,

	// Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [. This setting does not currently apply to LSP, see `dart.previewCommitCharacters`.
	"dart.enableCompletionCommitCharacters": false,

	// Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.
	"dart.enableSdkFormatter": true,

	// This setting is currently unused and should be left set to 'false'. It will be updated and enabled by default in the future.
	"dart.enableServerSnippets": false,

	// Whether to include Dart and Flutter snippets in code completion.
	"dart.enableSnippets": true,

	// Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.
	"dart.env": {},

	// Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).
	"dart.evaluateGettersInDebugViews": true,

	// Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.
	"dart.evaluateToStringInDebugViews": true,

	// The path to a low-traffic log file for basic extension and editor issues.
	"dart.extensionLogFile": null,

	// Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.
	"dart.flutterAdbConnectOnChromeOs": false,

	// Additional args to pass to all `flutter` commands including `flutter daemon`. Do not use this to pass arguments to your Flutter app, use the `args` field in a `launch.json` or the `dart.flutterRunAdditionalArgs` setting.
	"dart.flutterAdditionalArgs": [],

	// Additional args to pass to the `flutter attach` command. Using the `args` field in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterAttachAdditionalArgs": [],

	// The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateAndroidLanguage": "kotlin",

	// The programming language to use for iOS apps when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateIOSLanguage": "swift",

	// Whether to use offline mode when creating new projects with the 'Flutter: New Project' command.
	"dart.flutterCreateOffline": false,

	// The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateOrganization": null,

	// Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.
	"dart.flutterCustomEmulators": [],

	// The path to a log file for the `flutter daemon` service, which provides information about connected devices to show in the status bar.
	"dart.flutterDaemonLogFile": null,

	// Whether to show Flutter icons and colors in the editor gutter.
	"dart.flutterGutterIcons": true,

	// Whether to automatically send a Hot Reload request during a debug session when saving files.
	//  - never: Do not reload when saving
	//  - always: Reload for all saves, manual or automatic
	//  - manual: Only reload for manual saves (requires pressing Save explicitly if using autosave)
	"dart.flutterHotReloadOnSave": "manual",

	// Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.
	"dart.flutterHotRestartOnSave": true,

	// Whether to show the Flutter Outline tree in the sidebar.
	"dart.flutterOutline": true,

	// Additional args to pass to the `flutter run` command. Using the `args` field in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterRunAdditionalArgs": [],

	// The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterRunLogFile": null,

	// The path to a directory to save Flutter screenshots.
	"dart.flutterScreenshotPath": null,

	// The location of the Flutter SDK to use. If blank, Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable.
	"dart.flutterSdkPath": null,

	// An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.
	"dart.flutterSdkPaths": [],

	// Whether to set newly connected devices as the current device in Flutter projects.
	"dart.flutterSelectDeviceWhenConnected": true,

	// When to show the Flutter emulators. These are usually hidden for remote workspaces because it is usually not possible to see or interact with emulators in a remote session. If you are using remoting/containers in a way that you can interact with launched emulator processes, you may wish to set this to 'always'.
	//  - local: Only show for local workspaces
	//  - always: Always show, even for remote sessions
	"dart.flutterShowEmulators": "local",

	// When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).
	//  - remote: Only show for remote workspaces (includes browser-based workspaces)
	//  - always: Always show, even for local sessions
	"dart.flutterShowWebServerDevice": "remote",

	// Whether to use Flutter's [structured error support](https://medium.com/flutter/improving-flutters-error-messages-e098513cecf9) for improved error display.
	"dart.flutterStructuredErrors": true,

	// Additional args to pass to the `flutter test` command. Using the `args` field in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterTestAdditionalArgs": [],

	// The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterTestLogFile": null,

	// Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.
	"dart.flutterTrackWidgetCreation": true,

	// Sets the [Web renderer](https://flutter.dev/docs/development/tools/web-renderers) used for Flutter web apps.
	//  - auto: Allow Flutter to pick the best renderer based on the users device
	//  - html: Always use the HTML renderer
	//  - canvaskit: Always use the CanvasKit renderer
	"dart.flutterWebRenderer": "auto",

	// Determines how to display Hot Restart and Hot Reload progress.
	//  - notification: Hot reload progress will be shown in a toast notification
	//  - statusBar: Hot reload progress will be shown only in the status bar
	"dart.hotReloadProgress": "notification",

	// Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.
	"dart.insertArgumentPlaceholders": true,

	// The maximum length of a line of code. This is used by the document formatter.
	"dart.lineLength": 80,

	// Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).
	"dart.lspSnippetTextEdits": true,

	// The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.
	"dart.maxLogLineLength": 2000,

	// Whether to normalize file casings before sending them to the LSP server. This may fix issues with file_names lints not disappearing after renaming a file if the VS Code API continues to use the original casing.
	"dart.normalizeFileCasing": false,

	// Whether to show a notification the first few times an analysis server exception occurs.
	"dart.notifyAnalyzerErrors": true,

	// Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled, this will launch the Widget Inspector embedded for Flutter projects, or launch DevTools externally in a browser for Dart projects.
	//  - never: Do not automatically launch DevTools when starting a debug session
	//  - flutter: Automatically launch DevTools when starting a Flutter debug session
	//  - always: Automatically launch DevTools when starting any debug session
	"dart.openDevTools": "never",

	// When to automatically switch focus to the test list (array to support multiple values).
	"dart.openTestView": [
		"testRunStart"
	],

	// EXPERIMENTAL: Whether to look for custom script definitions at `dart/config/intellij-plugins/flutter.json` in Bazel workspaces. Currently supported for macOS and Linux only.
	"dart.previewBazelWorkspaceCustomScripts": false,

	// EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.
	"dart.previewCommitCharacters": false,

	// EXPERIMENTAL: Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).
	"dart.previewFlutterUiGuides": false,

	// EXPERIMENTAL: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).
	"dart.previewFlutterUiGuidesCustomTracking": false,

	// Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.
	"dart.previewHotReloadOnSaveWatcher": false,

	// Whether to run the analyzer in [LSP mode](https://microsoft.github.io/language-server-protocol/) (requires restart).
	"dart.previewLsp": null,

	// Whether to prompt to get packages when opening a project with out of date packages.
	"dart.promptToGetPackages": true,

	// Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.
	"dart.promptToRunIfErrors": true,

	// Additional args to pass to all `pub` commands.
	"dart.pubAdditionalArgs": [],

	// The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.pubTestLogFile": null,

	// Whether to rename files when renaming classes with matching names (for example renaming 'class Person' inside 'person.dart'). If set to 'prompt', will ask each time before renaming. If set to 'always', the file will automatically be renamed. This setting requires using LSP and a Dart SDK of at least v2.15.
	"dart.renameFilesWithClasses": "never",

	// Whether to automatically run `pub get` whenever `pubspec.yaml` is saved.
	"dart.runPubGetOnPubspecChanges": true,

	// The location of the Dart SDK to use for analyzing and executing code. If blank, Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.
	"dart.sdkPath": null,

	// An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.
	"dart.sdkPaths": [],

	// Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.
	"dart.shareDevToolsWithFlutter": true,

	// Whether to show logs from the `dart:developer` `log()` function in the debug console.
	"dart.showDartDeveloperLogs": true,

	// Whether to show CodeLens actions in the editor for opening online DartPad samples.
	"dart.showDartPadSampleCodeLens": true,

	// Whether to show DevTools buttons in the Debug toolbar.
	"dart.showDevToolsDebugToolBarButtons": true,

	// Whether to show quick fixes for ignoring hints and lints.
	"dart.showIgnoreQuickFixes": true,

	// Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `dart.shareDevToolsWithFlutter` setting is also enabled.
	"dart.showInspectorNotificationsForWidgetErrors": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.
	"dart.showMainCodeLens": true,

	// Whether to show skipped tests in the test tree.
	"dart.showSkippedTests": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging tests.
	"dart.showTestCodeLens": true,

	// Whether to show TODOs in the Problems list.
	"dart.showTodos": true,

	// Whether to automatically trigger signature help when pressing keys such as , and (.
	"dart.triggerSignatureHelpAutomatically": false,

	// Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.
	"dart.updateImportsOnRename": true,

	// Whether to use specific ports for the VM service and DevTools when running in Chrome OS. This is required to connect from the native Chrome OS browser but will prevent apps from launching if the ports are already in-use (for example if trying to run a second app).
	"dart.useKnownChromeOSPorts": false,

	// Whether to use the built-in VS Code test runner. Otherwises uses the legacy custom test runner.
	"dart.useVsCodeTestRunner": true,

	// Additional args to pass to the Dart VM when running/debugging command line apps.
	"dart.vmAdditionalArgs": [],

	// The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.vmServiceLogFile": null,

	// Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.
	"dart.warnWhenEditingFilesInPubCache": true,

	// Whether to show a warning when modifying files outside of the workspace.
	"dart.warnWhenEditingFilesOutsideWorkspace": true,

	// The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name`} in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.webDaemonLogFile": null,

	// Adds found items to intellisense and automatically imports then
	"autoimport.autoComplete": true,

	// Specifies wether to use double quotes
	"autoimport.doubleQuotes": false,

	// Glob for files to watch and scan, e.g ./src/** ./src/app/**/*.ts. Defaults to **/*.{ts,tsx}
	"autoimport.filesToScan": "**/*.{dart, dtmp}",

	// Specifies wether to show notifications from Auto Import
	"autoimport.showNotifications": false,

	// Specifies wether to use spaces between first and last brace
	"autoimport.spaceBetweenBraces": true,

	// Use ; at the end of a line e.g Import * from ./app or Import * from ./app; - Default True
	"autoimport.useSemiColon": true,

	// List of languages which suggestions are desired.
	"css.enabledLanguages": [
		"html"
	],

	// List of local or remote style sheets for suggestions.
	"css.styleSheets": [],

	// Type coverage diagnostic severity
	"flow.coverageSeverity": "info",

	// Is flow enabled
	"flow.enabled": true,

	// (Supported only when useLSP: false). File extensions to consider for flow processing
	"flow.fileExtensions": [
		".js",
		".mjs",
		".jsx",
		".flow",
		".json"
	],

	// Set value to enable flow lazy mode
	"flow.lazyMode": null,

	// Log level for output panel logs
	"flow.logLevel": "info",

	// Absolute path to flow binary. Special var ${workspaceFolder} or ${flowconfigDir} can be used in path (NOTE: in windows you can use '/' and can omit '.cmd' in path)
	"flow.pathToFlow": "flow",

	// (Supported only when useLSP: false) Run Flow on all files, No need to put //@flow comment on top of files.
	"flow.runOnAllFiles": false,

	// If true will run flow on every edit, otherwise will run only when changes are saved (Note: 'useLSP: true' only supports syntax errors)
	"flow.runOnEdit": true,

	// (Supported only when useLSP: false) If true will display flow status is the statusbar
	"flow.showStatus": true,

	// If true will show uncovered code by default
	"flow.showUncovered": false,

	// Stop Flow on Exit
	"flow.stopFlowOnExit": true,

	// Traces the communication between VSCode and the flow lsp service.
	"flow.trace.server": "off",

	// If true will use flow bundled with this plugin if nothing works
	"flow.useBundledFlow": true,

	// Complete functions with their parameter signature.
	"flow.useCodeSnippetOnFunctionSuggest": true,

	// Turn off to switch from the official Flow Language Server implementation to talking directly to flow.
	"flow.useLSP": true,

	// Support using flow through your node_modules folder, WARNING: Checking this box is a security risk. When you open a project we will immediately run code contained within it.
	"flow.useNPMPackagedFlow": true,

	// The absolute path to the Godot editor executable
	"godot_tools.editor_path": "",

	// The server port of the GDScript language server
	"godot_tools.gdscript_lsp_server_port": 6008,

	// The server protocol of the GDScript language server.
	// You have restart VSCode editor after change this value.
	//  - ws: Using WebSocket protocol to connect to Godot 3.2 and Godot 3.2.1
	//  - tcp: Using TCP protocol to connect to Godot 3.2.2 and newer versions
	"godot_tools.gdscript_lsp_server_protocol": "tcp",

	// The scene file to run
	"godot_tools.scene_file_config": "",

	// Check the gdscript language server connection status
	"godot-tools.check_status": "",

	// Assigns the issue you're working on to you. Only applies when the issue you're working on is in a repo you currently have open.
	"githubIssues.assignWhenWorking": true,

	// Controls whether an issue number (ex. #1234) or a full url (ex. https://github.com/owner/name/issues/1234) is inserted when the Create Issue code action is run.
	"githubIssues.createInsertFormat": "number",

	// Strings that will cause the 'Create issue from comment' code action to show.
	"githubIssues.createIssueTriggers": [
		"TODO",
		"todo",
		"BUG",
		"FIXME",
		"ISSUE",
		"HACK"
	],

	// Languages that the '#' character should not be used to trigger issue completion suggestions.
	"githubIssues.ignoreCompletionTrigger": [
		"python",
		"makefile"
	],

	// An array of milestones titles to never show issues from.
	"githubIssues.ignoreMilestones": [],

	// Languages that the '@' character should not be used to trigger user completion suggestions.
	"githubIssues.ignoreUserCompletionTrigger": [
		"python"
	],

	// Advanced settings for the name of the branch that is created when you start working on an issue. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${sanitizedIssueTitle}` will be replaced with the issue title, with all spaces and unsupported characters removed
	"githubIssues.issueBranchTitle": "${user}/issue${issueNumber}",

	// Sets the format of issue completions in the SCM inputbox. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${issueNumberLabel}` will be replaced with a label formatted as #number or owner/repository#number, depending on whether the issue is in the current repository
	"githubIssues.issueCompletionFormatScm": "${issueTitle} ${issueNumberLabel}",

	// Controls whether completion suggestions are shown for issues.
	"githubIssues.issueCompletions.enabled": true,

	// Specifies what queries should be used in the GitHub issues tree using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax) with variables. The first query listed will be expanded in the Issues view. The "default" query includes issues assigned to you by Milestone. If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubIssues.queries": [
		{
			"label": "My Issues",
			"query": "default"
		},
		{
			"label": "Created Issues",
			"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
		}
	],

	// Determines whether a branch should be checked out when working on an issue. To configure the name of the branch, set `githubIssues.issueBranchTitle`.
	//  - on: A branch will always be checked out when you start working on an issue. If the branch doesn't exist, it will be created.
	//  - off: A branch will not be created when you start working on an issue. If you have worked on an issue before and a branch was created for it, that same branch will be checked out.
	//  - prompt: A prompt will show for setting the name of the branch that will be created and checked out.
	"githubIssues.useBranchForIssues": "on",

	// Controls whether completion suggestions are shown for users.
	"githubIssues.userCompletions.enabled": true,

	// This setting is replaced by the better named setting githubIssues.issueBranchTitle and may be removed in the future.
	// Advanced settings for the name of the branch that is created when you start working on an issue. ${user} will be replace with the currently logged in username and ${issueNumber} will be replaced with the current issue number. You can also use ${sanitizedIssueTitle}.
	"githubIssues.workingIssueBranch": "",

	// Sets the format of the commit message that is set in the SCM inputbox when you **Start Working on an Issue**. Defaults to `${issueTitle} 
	// Fixes #${issueNumber}`
	"githubIssues.workingIssueFormatScm": "${issueTitle} \nFixes ${issueNumberLabel}",

	// Controls whether comments are expanded when a document with comments is opened.
	//  - expandUnresolved: All unresolved comments will be expanded.
	//  - collapseAll: All comments will be collapsed
	"githubPullRequests.commentExpandState": "expandUnresolved",

	// When true, the option to delete the local branch will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectLocalBranch": true,

	// When true, the option to delete the remote will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectRemote": true,

	// The method to use when merging pull requests.
	"githubPullRequests.defaultMergeMethod": "merge",

	// The layout to use when displaying changed files list.
	"githubPullRequests.fileListLayout": "tree",

	// Whether to enter focused mode when a pull request is checked out. This hides the issues and pull requests tree views.
	"githubPullRequests.focusedMode": true,

	// The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.
	// By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'.
	"githubPullRequests.includeRemotes": "default",

	// Logging for GitHub Pull Request extension. The log is emitted to the output channel named as GitHub Pull Request.
	"githubPullRequests.logLevel": "info",

	// The pull request description now uses the same defaults as GitHub, and can be edited before create.
	// The description used when creating pull requests.
	//  - template: Use a pull request template, or use the commit description if no templates were found
	//  - commit: Use the latest commit message
	//  - custom: Specify a custom description
	//  - ask: Ask which of the above methods to use
	"githubPullRequests.pullRequestDescription": "template",

	// The pull request title now uses the same defaults as GitHub, and can be edited before create.
	// The title used when creating pull requests.
	//  - commit: Use the latest commit message
	//  - branch: Use the branch name
	//  - custom: Specify a custom title
	//  - ask: Ask which of the above methods to use
	"githubPullRequests.pullRequestTitle": "ask",

	// Specifies what queries should be used in the GitHub Pull Requests tree. Each query object has a `label` that will be shown in the tree and a search `query` using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax). The variable `${user}` can be used to specify the logged in user within a search. By default these queries define the categories "Waiting For My Review", "Assigned To Me" and "Created By Me". If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],

	// List of remotes, by name, to fetch pull requests from.
	"githubPullRequests.remotes": [
		"origin",
		"upstream"
	],

	// This setting is deprecated. Views can now be dragged to any location.
	// When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them.
	"githubPullRequests.showInSCM": false,

	// Default handler for terminal links.
	//  - github: Create the pull request on GitHub
	//  - vscode: Create the pull request in VS Code
	//  - ask: Ask which method to use
	"githubPullRequests.terminalLinksHandler": "ask",

	// The absolute path to a fallback configuration file, when Unibeautify doesn‘t find a .unibeautifyrc in your workspace directory.
	"unibeautify.defaultConfig": null,

	// Enable/disable Unibeautify formatter
	"unibeautify.enabled": true,

	// Name of the active KubeConfig used by the extension. This name should match the name of a KubeConfig stored in `cloudcode.kubeconfigs`. If a name isn't provided, the default KubeConfig will be used.
	"cloudcode.active-kubeconfig": "",

	// Automatically install and update required Cloud Code dependencies such as the [Cloud SDK](https://cloud.google.com/sdk/gcloud), [Skaffold](https://skaffold.dev/), [minikube](https://minikube.sigs.k8s.io/docs/), and [Kubectl](https://kubernetes.io/docs/reference/kubectl/overview/).
	"cloudcode.autoDependencies": "on",

	// Enable V2 version of Api Browser.
	"cloudcode.beta.enableApiBrowserV2": false,

	// Internal feature flag.
	// Enable Apigee extension
	"cloudcode.beta.enableApigee": false,

	// Enable setting up Build Environments on run/debug/deploy sessions.
	"cloudcode.beta.enableBuildEnvironmentsInit": true,

	// Enable Combined Kubernetes view.
	"cloudcode.beta.enableCombinedK8s": true,

	// Enable iterative debugging with skaffold dev.
	"cloudcode.beta.enableIterativeDebugging": true,

	// Enable the new Output Logging for kubernetes and cloud run run/debug sessions.
	"cloudcode.beta.enableOutputLogging": true,

	// Enable the new Skaffold modules integration for kubernetes applications.
	"cloudcode.beta.enableSkaffoldModules": false,

	// Default project to use in Cloud Shell. If not set, the existing default will be used or you will be prompted to set one. For more information on how to get started with developing in a Cloud Shell environment, view this [quickstart](https://cloud.google.com/code/docs/vscode/quickstart-remote-dev).
	"cloudcode.cloudshell.project": "",

	// List of custom samples in Cloud Code
	"cloudcode.customApplications": [],

	// Provide customizations for the Cloud Code debuggers.
	"cloudcode.debug-kubernetes": {},

	// Internal feature flag.
	// Enable buildpacks.
	"cloudcode.enableBuildpacks": true,

	// Enable the experimental config-less run/debug experience for Kubernetes and Cloud Run apps.
	"cloudcode.enableConfigLessExperience": false,

	// Internal feature flag.
	// Enable reporting unexpected Cloud Code crashes to Google
	"cloudcode.enableCrashReporting": false,

	// Internal feature flag
	// Enable Custom Sample Application Support
	"cloudcode.enableCustomApplications": true,

	// Internal feature flag.
	// Enable the new deploy and debug flows.
	"cloudcode.enableDeployDebugV2": true,

	// Internal feature flag.
	// Enable the experimental deployment wizard that streamlines the deployment for existing kubernetes applications.
	"cloudcode.enableExperimentalDeploymentWizard": true,

	// Enable deployment support for GKE-Autopilot clusters
	"cloudcode.enableGkeAutopilotSupport": true,

	// Enable the [minikube gcp-auth plugin](https://minikube.sigs.k8s.io/docs/handbook/addons/gcp-auth/) when starting a Cloud Code run or debug session that is deploying to minikube.
	"cloudcode.enableMinikubeGcpAuthPlugin": true,

	// Enable support for multiple skaffold configurations.
	"cloudcode.enableMultiSkaffoldConfigsKey": false,

	// Enable sending usage data to Google. Data collected is subject to the [Google Privacy Policy](https://policies.google.com/privacy).
	"cloudcode.enableTelemetry": true,

	// List of KubeConfig files that can be used in the Kubernetes Explorer. Switch between the default KubeConfig and KubeConfigs listed here with the `cloudcode.active-kubeconfig` setting.
	"cloudcode.kubeconfigs": [],

	// The shell to use when choosing 'Get Terminal' on a Pod in the Clusters Explorer. Commonly used choices include `sh` or `bash`.
	"cloudcode.kubectlExecShell": "sh",

	// Display minikube status in the status bar.
	"cloudcode.minikubeStatusBar": true,

	// Append a `—-update-adc` flag to `gcloud auth login`. [Read about this flag](https://cloud.google.com/sdk/gcloud/reference/auth/login#--update-adc).
	"cloudcode.updateAdcOnLogin": true,

	// Automatically install the insiders version of Cloud Code by changing this value to 'Insiders', or set the value as 'Default' to use the stable released version from the marketplace. [Learn more about Insiders builds](https://cloud.google.com/code/docs/vscode/insiders).
	"cloudcode.updateChannel": "",

	// Display extension debug information in the 'Cloud Code' output window.
	"cloudcode.verboseLogging": false,

	// Enable resource completions from the active cluster. This setting may impact completion performance.
	"cloudcode.yaml.clusterResourceCompletion": true,

	// Enable YAML code completion.
	"cloudcode.yaml.completion": true,

	// Array of locations pointing to Kubernetes CRD schema. Each of these can be set to a local path (example: `/files/crd.yaml`) or URL (example: `http://github.com/user/repo/crd.yaml`).
	"cloudcode.yaml.crdSchemaLocations": [],

	// Custom tags the parser should recognize and validate against.
	"cloudcode.yaml.customTags": [],

	// Enable Kubernetes YAML editing support.
	"cloudcode.yaml.enableKubernetesSupport": true,

	// Enable Migrate for Anthos YAML editing support.
	"cloudcode.yaml.enableMigrateForAnthosSupport": true,

	// Print spaces between brackets in objects.
	"cloudcode.yaml.format.bracketSpacing": true,

	// Enable default YAML formatter (requires restart).
	"cloudcode.yaml.format.enable": false,

	// Choose when to automatically wrap prose.
	//  - preserve: Wrap prose; if it exceeds print-width.
	//  - never: Never wrap; keep prose on the same line.
	//  - always: Keep prose as-is.
	"cloudcode.yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes.
	"cloudcode.yaml.format.singleQuote": false,

	// Enable hover feature.
	"cloudcode.yaml.hover": true,

	// Select the Kubernetes version Cloud Code should utilize when providing YAML editing support.
	"cloudcode.yaml.kubernetesVersion": "v1.22.0",

	// Associate schemas to YAML files in the current workspace.
	"cloudcode.yaml.schemas": {},

	// Trace the communication between VSCode and the language server in an output window.
	"cloudcode.yaml.trace.server": "off",

	// Enable validation feature.
	"cloudcode.yaml.validate": true,

	// Glob pattern matching YAML files in the workspace. YAML editing support such as completion, inline definitions, and linting would be available for this file type. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"cloudcode.yaml.yamlFileMatcher": "**/*.yaml",

	// Shows or hides the menu item.
	"flutter-files.menu.bigpack": true,

	// Shows or hides the menu item.
	"flutter-files.menu.bloc": true,

	// Shows or hides the menu item.
	"flutter-files.menu.dynamic": true,

	// Shows or hides the menu item.
	"flutter-files.menu.event": true,

	// Shows or hides the menu item.
	"flutter-files.menu.index": true,

	// Shows or hides the menu item.
	"flutter-files.menu.model": false,

	// Shows or hides the menu item.
	"flutter-files.menu.page": true,

	// Shows or hides the menu item.
	"flutter-files.menu.provider": false,

	// Shows or hides the menu item.
	"flutter-files.menu.repository": false,

	// Shows or hides the menu item.
	"flutter-files.menu.screen": true,

	// Shows or hides the menu item.
	"flutter-files.menu.smallpack": true,

	// Shows or hides the menu item.
	"flutter-files.menu.state": true,

	// Shows or hides the menu item.
	"flutter-files.menu.templates": true,

	// If a package with a very close match to your search is found, add it to the pubspec file automatically.
	"pubspec-assist.autoAddPackage": true,

	// Sort all dependencies and dev_dependencies after adding/updating a dependency using the new YAML parser.
	"pubspec-assist.sortDependencies": true,

	// Put a caret in front of the dependency version (i.e.: "^1.0.0" instead of "1.0.0").
	"pubspec-assist.useCaretSyntax": true,

	// Use the legacy YAML text parser. Deprecated, should usually be turned off.
	"pubspec-assist.useLegacyParser": false,

	// Use the legacy sorting algorithm. Deprecated, should usually be turned off. When disabled (the default), a sorting algorithm will be used that satisfies the "sort_pub_dependencies" Dart lint rule.
	"pubspec-assist.useLegacySorting": false,

	// A list of generated file extensions to exclude
	"dartImport.excludeGeneratedFiles": [
		"g.dart",
		"config.dart",
		"freezed.dart"
	],

	// Auto fix dart imports on file save
	"dartImport.fixOnSave": false,

	// Whether you want to see errors after dart-import task failure
	"dartImport.showErrorMessages": true,

	// Whether you want to see notification after dart-import task completion
	"dartImport.showInfoMessages": true,

	// If true an empty line will be inserted after opening curly braces and before closing curly braces.
	"twig-language.braceLine": false,

	// Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings.
	"twig-language.bracePadding": false,

	// Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line.
	"twig-language.braces": false,

	// Emulates JSBeautify's brace_style option using existing Pretty Diff options.
	"twig-language.braceStyle": "none",

	// If a blank new line should be forced above comments.
	"twig-language.commentLine": false,

	// This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code.
	"twig-language.comments": false,

	// If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors.
	"twig-language.compressedCss": false,

	// Automatically correct some sloppiness in code.
	"twig-language.correct": false,

	// Inserts new line characters between every CSS code block.
	"twig-language.cssInsertLines": false,

	// If else_line is true then the keyword 'else' is forced onto a new line.
	"twig-language.elseLine": false,

	// If there should be a trailing comma in arrays and objects. Value multiline only applies to modes beautify and diff.
	"twig-language.endComma": false,

	// If all markup attributes should be indented each onto their own line.
	"twig-language.forceAttribute": false,

	// Will force indentation upon all content and tags without regard for the creation of new text nodes.
	"twig-language.forceIndent": false,

	// Determines if all array indexes should be indented, never indented, or left to the default.
	"twig-language.formatArray": "default",

	// Determines if all object keys should be indented, never indented, or left to the default.
	"twig-language.formatObject": "default",

	// Whether to enable/disable Twig PrettyDiff formatting.
	"twig-language.formatting": true,

	// If a space should follow a JavaScript function name.
	"twig-language.functionName": false,

	// Whether to enable/disable Twig hover.
	"twig-language.hover": true,

	// How much indentation padding should be applied to beautification? This option is internally used for code that requires switching between libraries.
	"twig-language.indentLevel": 0,

	// Choose to indent using tabs or spaces.
	"twig-language.indentStyle": "tab",

	// When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken.
	"twig-language.methodChain": 0,

	// If destructured lists in script should never be flattend.
	"twig-language.neverFlatten": false,

	// Insert an empty line at the end of output.
	"twig-language.newLine": true,

	// If a case statement should receive the same indentation as the containing switch block.
	"twig-language.noCaseIndent": false,

	// Whether leading 0s in CSS values immediately preceeding a decimal should be removed or prevented.
	"twig-language.noLeadZero": false,

	// Sorts markup attributes and properties by key name in script and style.
	"twig-language.objectSort": false,

	// The maximum number of consecutive empty lines to retain.
	"twig-language.preserve": 2,

	// Prevent comment reformatting due to option wrap.
	"twig-language.preserveComment": false,

	// If the quotes of script strings or markup attributes should be converted to single quotes or double quotes.
	"twig-language.quoteConvert": "none",

	// Inserts a space following the function keyword for anonymous functions.
	"twig-language.space": true,

	// Markup self-closing tags end will end with ' />' instead of '/>'.
	"twig-language.spaceClose": false,

	// 0 will default to the editor's tab size. Stores the number of 'inchar' values to comprise a single indentation.
	"twig-language.tabSize": 0,

	// Allows immediately adjacement start and end markup tags of the same name to be combined into a single self-closing tag.
	"twig-language.tagMerge": false,

	// Sort child items of each respective markup parent element.
	"twig-language.tagSort": false,

	// If ternary operators in JavaScript ? and : should remain on the same line.
	"twig-language.ternaryLine": true,

	// If markup tags should have their insides preserved. This option is only available to markup and does not support child tokens that require a different lexer.
	"twig-language.unformatted": false,

	// If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated.
	"twig-language.variableList": "none",

	// If lists of assignments and properties should be vertically aligned. This option is not used with the markup lexer.
	"twig-language.vertical": false,

	// Character width limit before applying word wrap. A 0 value disables this option. A negative value concatenates script strings.
	"twig-language.wrap": 0,

	// If true an empty line will be inserted after opening curly braces and before closing curly braces.
	"twig-language-2.braceLine": false,

	// Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings.
	"twig-language-2.bracePadding": false,

	// Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line.
	"twig-language-2.braces": false,

	// Emulates JSBeautify's brace_style option using existing Pretty Diff options.
	"twig-language-2.braceStyle": "none",

	// If a blank new line should be forced above comments.
	"twig-language-2.commentLine": false,

	// This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code.
	"twig-language-2.comments": false,

	// If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors.
	"twig-language-2.compressedCss": false,

	// Automatically correct some sloppiness in code.
	"twig-language-2.correct": false,

	// Inserts new line characters between every CSS code block.
	"twig-language-2.cssInsertLines": false,

	// If else_line is true then the keyword 'else' is forced onto a new line.
	"twig-language-2.elseLine": false,

	// If there should be a trailing comma in arrays and objects. Value multiline only applies to modes beautify and diff.
	"twig-language-2.endComma": false,

	// If all markup attributes should be indented each onto their own line.
	"twig-language-2.forceAttribute": false,

	// Will force indentation upon all content and tags without regard for the creation of new text nodes.
	"twig-language-2.forceIndent": false,

	// Determines if all array indexes should be indented, never indented, or left to the default.
	"twig-language-2.formatArray": "default",

	// Determines if all object keys should be indented, never indented, or left to the default.
	"twig-language-2.formatObject": "default",

	// Whether to enable/disable Twig PrettyDiff formatting.
	"twig-language-2.formatting": true,

	// If a space should follow a JavaScript function name.
	"twig-language-2.functionName": false,

	// Whether to enable/disable Twig hover.
	"twig-language-2.hover": true,

	// How much indentation padding should be applied to beautification? This option is internally used for code that requires switching between libraries.
	"twig-language-2.indentLevel": 0,

	// Choose to indent using tabs or spaces.
	"twig-language-2.indentStyle": "tab",

	// When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken.
	"twig-language-2.methodChain": 0,

	// If destructured lists in script should never be flattend.
	"twig-language-2.neverFlatten": false,

	// Insert an empty line at the end of output.
	"twig-language-2.newLine": true,

	// If a case statement should receive the same indentation as the containing switch block.
	"twig-language-2.noCaseIndent": false,

	// Whether leading 0s in CSS values immediately preceeding a decimal should be removed or prevented.
	"twig-language-2.noLeadZero": false,

	// Sorts markup attributes and properties by key name in script and style.
	"twig-language-2.objectSort": false,

	// The maximum number of consecutive empty lines to retain.
	"twig-language-2.preserve": 2,

	// Prevent comment reformatting due to option wrap.
	"twig-language-2.preserveComment": false,

	// If the quotes of script strings or markup attributes should be converted to single quotes or double quotes.
	"twig-language-2.quoteConvert": "none",

	// Inserts a space following the function keyword for anonymous functions.
	"twig-language-2.space": true,

	// Markup self-closing tags end will end with ' />' instead of '/>'.
	"twig-language-2.spaceClose": false,

	// 0 will default to the editor's tab size. Stores the number of 'inchar' values to comprise a single indentation.
	"twig-language-2.tabSize": 0,

	// Allows immediately adjacement start and end markup tags of the same name to be combined into a single self-closing tag.
	"twig-language-2.tagMerge": false,

	// Sort child items of each respective markup parent element.
	"twig-language-2.tagSort": false,

	// If ternary operators in JavaScript ? and : should remain on the same line.
	"twig-language-2.ternaryLine": true,

	// If markup tags should have their insides preserved. This option is only available to markup and does not support child tokens that require a different lexer.
	"twig-language-2.unformatted": false,

	// If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated.
	"twig-language-2.variableList": "none",

	// If lists of assignments and properties should be vertically aligned. This option is not used with the markup lexer.
	"twig-language-2.vertical": false,

	// Character width limit before applying word wrap. A 0 value disables this option. A negative value concatenates script strings.
	"twig-language-2.wrap": 0,

	// Disconnect automatically when debugging stops. If unchecked, the connection to the service in the cluster will be kept alive when debugging stops. You can manually disconnect using the "Kubernetes" status bar menu.
	"bridgeToKubernetes.disconnectAfterDebugging": true,

	// Equivalent to setting the DOCKER_CERT_PATH environment variable.
	"docker.certPath": "",

	// Command templates for `docker attach` / `docker exec -it` commands.
	"docker.commands.attach": "docker exec -it ${containerId} ${shellCommand}",

	// Command template(s) for `docker build` commands.
	"docker.commands.build": "docker build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

	// Command templates for `docker-compose down` commands.
	"docker.commands.composeDown": [
		{
			"label": "Compose Down",
			"template": "docker-compose ${configurationFile} down",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Down",
			"template": "docker compose ${configurationFile} down"
		}
	],

	// Command templates for `docker-compose up` commands.
	"docker.commands.composeUp": [
		{
			"label": "Compose Up",
			"template": "docker-compose ${configurationFile} up ${detached} ${build}",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Up",
			"template": "docker compose ${configurationFile} up ${detached}"
		}
	],

	// Command templates for `docker-compose up <subset>` commands.
	"docker.commands.composeUpSubset": [
		{
			"label": "Compose Up",
			"template": "docker-compose ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Up",
			"template": "docker compose ${configurationFile} ${profileList} up ${detached} ${serviceList}"
		}
	],

	// Command templates for `docker logs` commands.
	"docker.commands.logs": "docker logs --tail 1000 -f ${containerId}",

	// Command templates for `docker run` commands.
	"docker.commands.run": "docker run --rm -d ${exposedPorts} ${tag}",

	// Command templates for `docker run -it` (interactive) commands.
	"docker.commands.runInteractive": "docker run --rm -it ${exposedPorts} ${tag}",

	// Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
	"docker.containers.description": [
		"ContainerName",
		"Status"
	],

	// The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
	"docker.containers.groupBy": "Compose Project Name",

	// The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
	"docker.containers.label": "FullTag",

	// The property to use to sort containers in Docker view: CreatedTime or Label
	"docker.containers.sortBy": "CreatedTime",

	// Equivalent to setting the DOCKER_CONTEXT environment variable.
	"docker.context": "",

	// Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
	"docker.contexts.description": [
		"Description"
	],

	// The primary property to display for a Docker context: Name, Description or DockerEndpoint
	"docker.contexts.label": "Name",

	// Set to true to include --build option when docker-compose command is invoked
	"docker.dockerComposeBuild": true,

	// Set to true to include --d (detached) option when docker-compose command is invoked
	"docker.dockerComposeDetached": true,

	// If specified, this object will be passed to the Dockerode constructor. Takes precedence over DOCKER_HOST, the Docker Host setting, and any existing Docker contexts.
	"docker.dockerodeOptions": {},

	// Absolute path to Docker client executable ('docker' command). If the path contains whitespace, it needs to be quoted appropriately.
	"docker.dockerPath": "docker",

	// Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect.
	"docker.enableDockerComposeLanguageService": false,

	// Docker view refresh interval (milliseconds)
	"docker.explorerRefreshInterval": 2000,

	// Equivalent to setting the DOCKER_HOST environment variable, for example, ssh://myuser@mymachine or tcp://1.2.3.4.
	"docker.host": "",

	// Build context PATH to pass to Docker build command.
	"docker.imageBuildContextPath": "",

	// Check for outdated base images once per Visual Studio Code session
	"docker.images.checkForOutdatedImages": true,

	// Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size
	"docker.images.description": [
		"CreatedTime"
	],

	// The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
	"docker.images.groupBy": "Repository",

	// The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size
	"docker.images.label": "Tag",

	// The property to use to sort images in Docker view: CreatedTime, Label, or Size
	"docker.images.sortBy": "CreatedTime",

	// Controls the diagnostic severity for the deprecated MAINTAINER instruction
	"docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

	// Controls the diagnostic severity for parser directives that are not written in lowercase
	"docker.languageserver.diagnostics.directiveCasing": "warning",

	// Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
	"docker.languageserver.diagnostics.emptyContinuationLine": "warning",

	// Controls the diagnostic severity for instructions that are not written in uppercase
	"docker.languageserver.diagnostics.instructionCasing": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
	"docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
	"docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
	"docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

	// Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
	"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

	// Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
	"docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

	// Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
	"docker.languageserver.formatter.ignoreMultilineInstructions": false,

	// Equivalent to setting the DOCKER_MACHINE_NAME environment variable.
	"docker.machineName": "",

	// Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
	"docker.networks.description": [
		"NetworkDriver",
		"CreatedTime"
	],

	// The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
	"docker.networks.groupBy": "None",

	// The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
	"docker.networks.label": "NetworkName",

	// Show the built-in networks in the explorer.
	"docker.networks.showBuiltInNetworks": true,

	// The property to use to sort networks in Docker view: CreatedTime or Label
	"docker.networks.sortBy": "CreatedTime",

	// Prompt for registry selection if the image is not explicitly tagged.
	"docker.promptForRegistryWhenPushingImages": true,

	// The path to use for scaffolding templates.
	"docker.scaffolding.templatePath": "",

	// Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
	"docker.showRemoteWorkspaceWarning": true,

	// Show the Docker extension Start Page when a new update is released.
	"docker.showStartPage": true,

	// Equivalent to setting the DOCKER_TLS_VERIFY environment variable.
	"docker.tlsVerify": "",

	// Set to true to truncate long image and container registry paths in Docker view
	"docker.truncateLongRegistryPaths": false,

	// Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
	"docker.truncateMaxLength": 10,

	// Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
	"docker.volumes.description": [
		"CreatedTime"
	],

	// The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
	"docker.volumes.groupBy": "None",

	// The primary property to display for a Docker volume: CreatedTime or VolumeName
	"docker.volumes.label": "VolumeName",

	// The property to use to sort volumes in Docker view: CreatedTime or Label
	"docker.volumes.sortBy": "CreatedTime",

	// Enable/disable default C# formatter (requires restart).
	"csharp.format.enable": true,

	// Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
	"csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,

	// Specifies whether the references CodeLens should be shown.
	"csharp.referencesCodeLens.enabled": true,

	// Array of custom symbol names for which CodeLens should be disabled.
	"csharp.referencesCodeLens.filteredSymbols": [],

	// Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.
	"csharp.semanticHighlighting.enabled": false,

	// Shows the OmniSharp log in the Output pane when OmniSharp reports an error.
	"csharp.showOmnisharpLogOnError": true,

	// Suppress the notification window to add missing assets to build or debug the application.
	"csharp.suppressBuildAssetsNotification": false,

	// Suppress the warning that the .NET Core SDK is not on the path.
	"csharp.suppressDotnetInstallWarning": false,

	// Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
	"csharp.suppressDotnetRestoreNotification": false,

	// Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
	"csharp.suppressHiddenDiagnostics": true,

	// Suppress the warning that project.json is no longer a supported project format for .NET Core applications
	"csharp.suppressProjectJsonWarning": false,

	// Specifies whether the run and debug test CodeLens should be shown.
	"csharp.testsCodeLens.enabled": true,

	// Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.
	"csharp.unitTestDebuggingOptions": {},

	// Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
	"omnisharp.autoStart": true,

	// The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen.
	"omnisharp.defaultLaunchSolution": null,

	// Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
	"omnisharp.disableMSBuildDiagnosticWarning": false,

	// (EXPERIMENTAL) Enables support for resolving completion edits asynchronously. This can speed up time to show the completion list, particularly override and partial method completion lists, at the cost of slight delays after inserting a completion item. Most completion items will have no noticeable impact with this feature, but typing immediately after inserting an override or partial method completion, before the insert is completed, can have unpredictable results.
	"omnisharp.enableAsyncCompletion": false,

	// Enables support for decompiling external references instead of viewing metadata.
	"omnisharp.enableDecompilationSupport": false,

	// Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
	"omnisharp.enableEditorConfigSupport": true,

	// Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. This option can have a negative impact on initial completion responsiveness, particularly for the first few completion sessions after opening a solution.
	"omnisharp.enableImportCompletion": false,

	// If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
	"omnisharp.enableMsBuildLoadProjectsOnDemand": false,

	// Enables support for roslyn analyzers, code fixes and rulesets.
	"omnisharp.enableRoslynAnalyzers": false,

	// Specifies the level of logging output from the OmniSharp server.
	"omnisharp.loggingLevel": "information",

	// The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
	"omnisharp.maxFindSymbolsItems": 1000,

	// The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
	"omnisharp.maxProjectResults": 250,

	// The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
	"omnisharp.minFindSymbolsFilterLength": 0,

	// Specifies the path to a mono installation to use when "useGlobalMono" is set to "always", instead of the default system one. Example: "/Library/Frameworks/Mono.framework/Versions/Current"
	"omnisharp.monoPath": null,

	// Specifies whether 'using' directives should be grouped and sorted during document formatting.
	"omnisharp.organizeImportsOnFormat": false,

	// Specifies the path to OmniSharp. When left empty the OmniSharp version pinned to the C# Extension is used. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf. Setting "latest" is an opt-in into latest beta releases of OmniSharp.
	"omnisharp.path": null,

	// The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
	"omnisharp.projectLoadTimeout": 60,

	// Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
	"omnisharp.useEditorFormattingSettings": true,

	// Launch OmniSharp with the globally-installed Mono. If set to "always", "mono" version 6.4.0 or greater must be available on the PATH. If set to "auto", OmniSharp will be launched with "mono" if version 6.4.0 or greater is available on the PATH.
	//  - auto: Automatically launch OmniSharp with internal "mono", since "mono" 6.12.0 does not support .NET Core 3.1.40x or .NET 5 SDKs.
	//  - always: Always launch OmniSharp with "mono". If version 6.4.0 or greater is not available on the PATH, an error will be printed.
	//  - never: Never launch OmniSharp on a globally-installed Mono.
	"omnisharp.useGlobalMono": "auto",

	// Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
	"omnisharp.waitForDebugger": false,

	// Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving.
	"razor.devmode": false,

	// Disable Blazor WebAssembly's debug requirements notification.
	"razor.disableBlazorDebugPrompt": false,

	// Specifies whether to disable Razor language features.
	"razor.disabled": false,

	// Enable/disable default Razor formatter.
	"razor.format.enable": true,

	// Specifies whether to wait for debug attach when launching the language server.
	"razor.languageServer.debug": false,

	// Overrides the path to the Razor Language Server directory.
	"razor.languageServer.directory": null,

	// Overrides the path to the Razor plugin dll.
	"razor.plugin.path": null,

	// Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off].
	//  - Off: Does not log messages from the Razor extension
	//  - Messages: Logs only some messages from the Razor extension
	//  - Verbose: Logs all messages from the Razor extension
	"razor.trace": "Off",

	// Kubernetes configuration
	"vs-kubernetes": {
		"vs-kubernetes.namespace": "",
		"vs-kubernetes.kubectl-path": "",
		"vs-kubernetes.helm-path": "",
		"vs-kubernetes.minikube-path": "",
		"vs-kubernetes.kubectlVersioning": "user-provided",
		"vs-kubernetes.outputFormat": "yaml",
		"vs-kubernetes.kubeconfig": "",
		"vs-kubernetes.knownKubeconfigs": [],
		"vs-kubernetes.autoCleanupOnDebugTerminate": false,
		"vs-kubernetes.nodejs-autodetect-remote-root": true,
		"vs-kubernetes.nodejs-remote-root": "",
		"vs-kubernetes.nodejs-debug-port": 9229,
		"vs-kubernetes.local-tunnel-debug-provider": "",
		"checkForMinikubeUpgrade": true,
		"imageBuildTool": "Docker"
	},

	// File path to a helm binary. (You can override this on a per-OS basis if required).
	"vscode-kubernetes.helm-path": "",

	// File path to a helm binary.
	"vscode-kubernetes.helm-path.linux": "",

	// File path to a helm binary.
	"vscode-kubernetes.helm-path.mac": "",

	// File path to a helm binary.
	"vscode-kubernetes.helm-path.windows": "",

	// File path to a kubectl binary. (You can override this on a per-OS basis if required).
	"vscode-kubernetes.kubectl-path": "",

	// File path to a kubectl binary.
	"vscode-kubernetes.kubectl-path.linux": "",

	// File path to a kubectl binary.
	"vscode-kubernetes.kubectl-path.mac": "",

	// File path to a kubectl binary.
	"vscode-kubernetes.kubectl-path.windows": "",

	// File path to a minikube binary. (You can override this on a per-OS basis if required).
	"vscode-kubernetes.minikube-path": "",

	// File path to a minikube binary.
	"vscode-kubernetes.minikube-path.linux": "",

	// File path to a minikube binary.
	"vscode-kubernetes.minikube-path.mac": "",

	// File path to a minikube binary.
	"vscode-kubernetes.minikube-path.windows": "",

	// Image prefix for docker images ie 'docker.io/brendanburns'
	"vsdocker.imageUser": null,

	// The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
	"dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
	"dotfiles.repository": "",

	// The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
	"dotfiles.targetPath": "~/dotfiles",

	// Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
	"remote.containers.cacheVolume": true,

	// Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
	"remote.containers.copyGitConfig": true,

	// Configures the list of extensions to always install while creating a container.
	"remote.containers.defaultExtensions": [],

	// Docker Compose executable name or path.
	"remote.containers.dockerComposePath": "docker-compose",

	// Docker (or Podman) executable name or path.
	"remote.containers.dockerPath": "docker",

	// The command to run after cloning the dotfiles repository for DevContainers. This overrides the common setting for the dotfiles install command.
	"remote.containers.dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository for DevContainers. This overrides the common setting for the dotfiles repository.
	"remote.containers.dotfiles.repository": "",

	// The path to clone the dotfiles repository to for DevContainers. This overrides the common setting for the dotfiles target path.
	"remote.containers.dotfiles.targetPath": "",

	// Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
	"remote.containers.executeInWSL": false,

	// Where to write the configuration for the Git credential helper.
	//  - system: Write to system config (`/etc/gitconfig`, requires root access).
	//  - global: Write to user config (`~/.gitconfig`).
	//  - none: Do not set a credential helper.
	"remote.containers.gitCredentialHelperConfigLocation": "global",

	// The log level for the extension.
	"remote.containers.logLevel": "debug",

	// List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
	"remote.containers.repositoryConfigurationPaths": [],

	// The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
	//  - consistent: Perfect consistency.
	//  - cached: The host’s view is authoritative.
	//  - delegated: The container’s view is authoritative.
	"remote.containers.workspaceMountConsistency": "cached",

	// Niveau de journalisation dans l'extension
	"react-native-tools.logLevel": "Info",

	// The color theme for Network inspector logs in VS Code DevTools console
	"react-native-tools.networkInspector.consoleLogsColorTheme": "Light",

	// Sous-dossier dans lequel se trouve le projet react-native
	"react-native-tools.projectRoot": "",

	// The command name to be used to execute React Native CLI commands.
	"react-native-tools.reactNativeGlobalCommandName": "",

	// Whether to show tips about extension features
	"react-native-tools.showUserTips": true,

	// Variables d'environnement passées au programme.
	"react-native.android.env.device": {},

	// Variables d'environnement passées au programme.
	"react-native.android.env.simulator": {},

	// Chemin absolu d'un fichier contenant des définitions de variables d'environnement.
	"react-native.android.envFile.device": "",

	// Chemin absolu d'un fichier contenant des définitions de variables d'environnement.
	"react-native.android.envFile.simulator": "",

	// Arguments à utiliser pour LogCat (la sortie de LogCat s'affiche sur un canal de sortie). Il peut s'agir d'un tableau tel que [":S", "ReactNative:V", "ReactNativeJS:V"]
	"react-native.android.logCatArguments": [
		"*:S",
		"ReactNative:V",
		"ReactNativeJS:V"
	],

	// Exécuter les arguments à passer à la commande 'react-native run-android'
	"react-native.android.runArguments.device": [],

	// Exécuter les arguments à passer à la commande 'react-native run-android'
	"react-native.android.runArguments.simulator": [],

	// Specific packages used to prepare the extension for debugging Expo applications
	"react-native.expo.dependencies": {
		"xdl": "59.2.0",
		"@expo/metro-config": "0.2.0",
		"@expo/ngrok": "^4.1.0"
	},

	// Variables d'environnement passées au programme.
	"react-native.ios.env.device": {},

	// Variables d'environnement passées au programme.
	"react-native.ios.env.simulator": {},

	// Chemin absolu d'un fichier contenant des définitions de variables d'environnement.
	"react-native.ios.envFile.device": "",

	// Chemin absolu d'un fichier contenant des définitions de variables d'environnement.
	"react-native.ios.envFile.simulator": "",

	// Exécuter les arguments à passer à la commande 'react-native run-ios'
	"react-native.ios.runArguments.device": [],

	// Exécuter les arguments à passer à la commande 'react-native run-ios'
	"react-native.ios.runArguments.simulator": [],

	// Port du packager React Native
	"react-native.packager.port": 8081,

	// React Native Packager status representation in the VS Code status bar
	"react-native.packager.status-indicator": "Full",

	// Passed as an `-Xmx` argument to the language server JVM process
	"concourse.ls.java.heap": "",

	// Overrides JAVA_HOME used for launching the language server JVM process
	"concourse.ls.java.home": "",

	// Additional 'user defined' VM args to pass to the language server process.
	"concourse.ls.java.vmargs": [],

	// The path of a file to write language server logs. If not set or null, then logs are discarded.
	"concourse.ls.logfile": "",

	// Passed as an `-Xmx` argument to the language server JVM process
	"cloudfoundry-manifest.ls.java.heap": "",

	// Overrides JAVA_HOME used for launching the language server JVM process
	"cloudfoundry-manifest.ls.java.home": "",

	// Additional 'user defined' VM args to pass to the language server process.
	"cloudfoundry-manifest.ls.java.vmargs": [],

	// The path of a file to write language server logs. If not set or null, then logs are discarded.
	"cloudfoundry-manifest.ls.logfile": "",

	// Enable/Disable detecting changes of running Spring Boot applications
	"boot-java.change-detection.on": false,

	// Enable/Disable Spring running Boot application Code Lenses
	"boot-java.highlight-codelens.on": true,

	// Live Information - Automatic Process Tracking Delay in ms
	"boot-java.live-information.automatic-tracking.delay": 5000,

	// Live Information - Automatic Process Tracking Enabled
	"boot-java.live-information.automatic-tracking.on": false,

	// Live Information - Max number of retries (before giving up)
	"boot-java.live-information.fetch-data.max-retries": 10,

	// Live Information - Delay between retries in seconds
	"boot-java.live-information.fetch-data.retry-delay-in-seconds": 3,

	// Array of jmx urls pointing to remote spring boot applications to poll for live hover information. A typical url looks something like this: `service:jmx:rmi://localhost:9111/jndi/rmi://localhost:9111/jmxrmi`
	"boot-java.remote-apps": [],

	// Enable/Disable Java test sources files scanning
	"boot-java.scan-java-test-sources.on": false,

	// Enable/Disable Content Assist in Spring XML Config file editor
	"boot-java.support-spring-xml-config.content-assist": true,

	// Enable/Disable Hyperlinks in Spring XML Config file editor
	"boot-java.support-spring-xml-config.hyperlinks": true,

	// Enable/Disable Support for Spring XML Config files
	"boot-java.support-spring-xml-config.on": false,

	// Scan Spring XML in folders
	"boot-java.support-spring-xml-config.scan-folders": "src/main",

	// Validation - Validate SpEL Expression Syntax
	"boot-java.validation.spel.on": false,

	// Enable/Disable Java VM validation
	"spring-boot.ls.checkJVM": true,

	// Max JVM heap value, passed via -Xmx argument when launching spring-boot-language-server JVM process.
	"spring-boot.ls.java.heap": "",

	// Override JAVA_HOME used for launching the spring-boot-language-server JVM process.
	"spring-boot.ls.java.home": "",

	// Additional 'user defined' VM args to pass to the language server process.
	"spring-boot.ls.java.vmargs": [],

	// The path of a file to write language server logs. If not set or null, then logs are discarded.
	"spring-boot.ls.logfile": "",

	// Property is marked as Deprecated
	"spring-boot.ls.problem.application-properties.PROP_DEPRECATED": "WARNING",

	// Multiple assignments to the same property value
	"spring-boot.ls.problem.application-properties.PROP_DUPLICATE_KEY": "ERROR",

	// Unexpected character found where a '.' or '[' was expected
	"spring-boot.ls.problem.application-properties.PROP_EXPECTED_DOT_OR_LBRACK": "ERROR",

	// Accessing a 'bean property' in a type that doesn't have properties (e.g. like String or Integer)
	"spring-boot.ls.problem.application-properties.PROP_INVALID_BEAN_NAVIGATION": "ERROR",

	// Accessing a named property in a type that doesn't provide a property accessor with that name
	"spring-boot.ls.problem.application-properties.PROP_INVALID_BEAN_PROPERTY": "ERROR",

	// Accessing a property using [] in a type that doesn't support that
	"spring-boot.ls.problem.application-properties.PROP_INVALID_INDEXED_NAVIGATION": "ERROR",

	// Found a '[' but no matching ']'
	"spring-boot.ls.problem.application-properties.PROP_NO_MATCHING_RBRACK": "ERROR",

	// Use of [..] navigation with non-integer value
	"spring-boot.ls.problem.application-properties.PROP_NON_INTEGER_IN_BRACKETS": "ERROR",

	// Syntax Error
	"spring-boot.ls.problem.application-properties.PROP_SYNTAX_ERROR": "ERROR",

	// Property-key not found in any configuration metadata on the project's classpath
	"spring-boot.ls.problem.application-properties.PROP_UNKNOWN_PROPERTY": "WARNING",

	// Expecting a value of a certain type, but value doesn't parse as such
	"spring-boot.ls.problem.application-properties.PROP_VALUE_TYPE_MISMATCH": "ERROR",

	// Property is marked as Deprecated(Error)
	"spring-boot.ls.problem.application-yaml.YAML_DEPRECATED_ERROR": "ERROR",

	// Property is marked as Deprecated(Warning)
	"spring-boot.ls.problem.application-yaml.YAML_DEPRECATED_WARNING": "WARNING",

	// A mapping node contains multiple entries for the same key
	"spring-boot.ls.problem.application-yaml.YAML_DUPLICATE_KEY": "ERROR",

	// Expecting a 'bean property' name but found something more complex
	"spring-boot.ls.problem.application-yaml.YAML_EXPECT_BEAN_PROPERTY_NAME": "ERROR",

	// Expecting a 'mapping' node but found something else
	"spring-boot.ls.problem.application-yaml.YAML_EXPECT_MAPPING": "ERROR",

	// Expecting a 'scalar' value but found something more complex.
	"spring-boot.ls.problem.application-yaml.YAML_EXPECT_SCALAR": "ERROR",

	// Found a 'mapping' node where a type that can't be treated as a 'property map' is expected
	"spring-boot.ls.problem.application-yaml.YAML_EXPECT_TYPE_FOUND_MAPPING": "ERROR",

	// Found a 'sequence' node where a non 'list-like' type is expected
	"spring-boot.ls.problem.application-yaml.YAML_EXPECT_TYPE_FOUND_SEQUENCE": "ERROR",

	// Accessing a named property in a type that doesn't provide a property accessor with that name
	"spring-boot.ls.problem.application-yaml.YAML_INVALID_BEAN_PROPERTY": "ERROR",

	// This key contains special characters and should probably be escaped by surrounding it with '[]'
	"spring-boot.ls.problem.application-yaml.YAML_SHOULD_ESCAPE": "WARNING",

	// Error parsing the input using snakeyaml
	"spring-boot.ls.problem.application-yaml.YAML_SYNTAX_ERROR": "ERROR",

	// Property-key not found in the configuration metadata on the project's classpath
	"spring-boot.ls.problem.application-yaml.YAML_UNKNOWN_PROPERTY": "WARNING",

	// Expecting a value of a certain type, but value doesn't parse as such
	"spring-boot.ls.problem.application-yaml.YAML_VALUE_TYPE_MISMATCH": "ERROR",

	// SpEL parser raised a ParseException
	"spring-boot.ls.problem.java.JAVA_SPEL_EXPRESSION_SYNTAX": "ERROR",

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*"
	],

	// When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
	"java.completion.guessMethodArguments": false,

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.
	"java.completion.importOrder": [
		"java",
		"javax",
		"com",
		"org"
	],

	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,

	// When set to true, code completion overwrites the current text. When set to false, code is simply added instead.
	"java.completion.overwrite": true,

	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": true,

	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,

	// Specifies severity if the plugin execution is not covered by Maven build lifecycle.
	"java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",

	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,

	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// Specifies the folder path to the JDK (11 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk11.0_8"
	"java.home": null,

	// Enable/disable the implementations code lens.
	"java.implementationsCodeLens.enabled": false,

	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,

	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,

	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,

	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m ` to optimize memory usage with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m",

	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,

	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// [Experimental] Enable/disable progress reports from background processes on the server.
	"java.progressReports.enabled": true,

	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,

	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "automatic",

	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",

	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],

	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules",".git"] will exclude all files and folders named 'node_modules' or '.git'. Defaults to ["node_modules",".git"].
	"java.project.resourceFilters": [
		"node_modules",
		".git"
	],

	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],

	// Show the recommended Dependency Analytics extension.
	"java.recommendations.dependency.analytics.show": true,

	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,

	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",

	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,

	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": "notification",

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": false,

	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,

	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,

	// Include method declarations from source files in symbol search.
	"java.symbols.includeSourceMethodDeclarations": false,

	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],

	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,

	// Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
	"redhat.telemetry.enabled": false,

	// Enable/disable completion feature
	"yaml.completion": true,

	// Custom tags for the parser to use
	"yaml.customTags": [],

	// Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml.
	"yaml.disableAdditionalProperties": false,

	// Print spaces between brackets in objects
	"yaml.format.bracketSpacing": true,

	// Enable/disable default YAML formatter
	"yaml.format.enable": true,

	// Specify the line length that the printer will wrap on
	"yaml.format.printWidth": 80,

	// Always: wrap prose if it exeeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
	"yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes
	"yaml.format.singleQuote": false,

	// Enable/disable hover feature
	"yaml.hover": true,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"yaml.maxItemsComputed": 5000,

	// Associate schemas to YAML files in the current workspace
	"yaml.schemas": {},

	// Automatically pull available YAML schemas from JSON Schema Store
	"yaml.schemaStore.enable": true,

	// URL of schema store catalog to use
	"yaml.schemaStore.url": "https://www.schemastore.org/api/json/catalog.json",

	// Traces the communication between VSCode and the YAML language service.
	"yaml.trace.server": "off",

	// Enable/disable validation feature
	"yaml.validate": true,

	// Array of files containing custom property declarations.
	"cssCustomProperties.files": [],

	// Array of languages to run on.
	"cssCustomProperties.languages": [],

	// 
	"vsintellicode.features.python.deepLearning": "default",

	// Activer les complétions Visual Studio IntelliCode pour Java
	"vsintellicode.java.completionsEnabled": true,

	// Spécifie le chemin de dossier où sont stockés les fichiers de modèles téléchargés. En l'absence d'indication, le répertoire d'installation de l'extension représente la valeur par défaut.
	"vsintellicode.modelDownloadPath": null,

	// Permet de contrôler si Visual Studio IntelliCode modifie 'editor.suggestSelection', quand il a une valeur ('recentlyUsed') qui entraîne le masquage des éléments de suggestion de complétion IntelliCode.
	//  - enabled: Permet à IntelliCode de modifier le paramètre editor.suggestSelection en votre nom.
	//  - disabled: Vous avez explicitement refusé que cette configuration soit contrôlée par IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (NE PAS DÉFINIR CECI MANUELLEMENT) IntelliCode va définir ce paramètre. Cela permet d'enregistrer le fait que la configuration a été automatiquement modifiée pour remplacer une valeur par défaut.
	//  - choseToUpdateConfiguration: (NE PAS DÉFINIR CECI MANUELLEMENT) IntelliCode va définir ce paramètre. Cela permet d'enregistrer le fait que vous avez choisi de laisser IntelliCode changer la configuration à partir d'une valeur définie explicitement.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Activer les complétions Visual Studio IntelliCode pour Python
	"vsintellicode.python.completionsEnabled": true,

	// Activer les complétions Visual Studio IntelliCode pour MSSQL
	"vsintellicode.sql.completionsEnabled": true,

	// Activer les complétions Visual Studio IntelliCode pour TypeScript et JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",

	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "integratedTerminal",

	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,

	// Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],

	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// Reload the changed Java classes during debugging. Make sure 'java.autobuild.enabled' is not disabled.
	"java.debug.settings.hotCodeReplace": "manual",

	// The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

	// The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
	"java.debug.settings.jdwp.requestTimeout": 3000,

	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,

	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,

	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,

	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,

	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,

	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,

	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,

	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,

	// Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.stepping.skipClasses": [],

	// Skip constructor methods when stepping.
	"java.debug.settings.stepping.skipConstructors": false,

	// Skip static initializer methods when stepping.
	"java.debug.settings.stepping.skipStaticInitializers": false,

	// Skip synthetic methods when stepping.
	"java.debug.settings.stepping.skipSynthetics": false,

	// The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
	"java.debug.settings.vmArgs": "",

	// Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
	"java.silentNotification": false,

	// Synchronize Java Projects explorer with changes
	"java.dependency.autoRefresh": true,

	// Package presentation mode: flat or hierarchical
	"java.dependency.packagePresentation": "flat",

	// The delay time (ms) the auto refresh is invoked when changes are detected
	"java.dependency.refreshDelay": 2000,

	// Show the members in the explorer
	"java.dependency.showMembers": false,

	// Synchronize Java Projects explorer selection with folder explorer
	"java.dependency.syncWithFolderExplorer": true,

	// Specifies the output path of export jar. The default value is `${workspaceFolder}/${workspaceFolderBasename}.jar`. To select the output location manually each time exporting the jar file, simply leave it empty or set it to `askUser`.
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Getting Started page
	//  - welcome: Present the Java Help Center page
	//  - none: Do not show any view
	"java.help.firstView": "auto",

	// Show release notes of Extension Pack for Java on startup.
	"java.help.showReleaseNotes": true,

	// Specify the configurations for running the tests
	"java.test.config": {},

	// Specify the name of the default test configuration
	"java.test.defaultConfig": "",

	// Specify whether to show diagnostics for conflict dependencies.
	"maven.dependency.enableConflictDiagnostics": "true",

	// Specifies file path pattern of folders to exclude while searching for Maven projects.
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],

	// Specifies default options for all mvn commands.
	"maven.executable.options": "",

	// Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
	"maven.executable.path": "",

	// Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
	"maven.executable.preferMavenWrapper": "true",

	// Specifies whether to update effective-pom automatically whenever changes detected.
	"maven.pomfile.autoUpdateEffectivePOM": false,

	// Specifies the glob pattern used to look for pom.xml files.
	"maven.pomfile.globPattern": "**/pom.xml",

	// Specifies whether to prefetch effective pom on startup.
	"maven.pomfile.prefetchEffectivePom": false,

	// Default method of opening newly created project.
	"maven.projectOpenBehavior": "Interactive",

	// Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
	"maven.settingsFile": null,

	// If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
	"maven.showInExplorerContextMenu": "true",

	// Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
	"maven.terminal.customEnv": [],

	// Specify pre-defined favorite commands to execute.
	"maven.terminal.favorites": [],

	// If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
	"maven.terminal.useJavaHome": false,

	// Specifies the way of viewing Maven projects.
	"maven.view": "flat",

	// Default value for Artifact Id.
	"spring.initializr.defaultArtifactId": "demo",

	// Default value for Group Id.
	"spring.initializr.defaultGroupId": "com.example",

	// Default Java version.
	"spring.initializr.defaultJavaVersion": "",

	// Default language.
	"spring.initializr.defaultLanguage": "",

	// Default method of opening newly generated project
	"spring.initializr.defaultOpenProjectMethod": "",

	// Default packaging.
	"spring.initializr.defaultPackaging": "",

	// Spring Initializr Service URL(s). If more than one url is specified, it requires you to select one every time you create a project.
	"spring.initializr.serviceUrl": [
		"https://start.spring.io/"
	],

	// Defines semicolon use for snippets
	"reactReduxSnippets.LinterRules": "Loose",

	// For import command. The declaration type used for require()
	"npm-intellisense.importDeclarationType": "const",

	// For import command. Use import statements instead of require()
	"npm-intellisense.importES6": true,

	// For import command. The linebreak used after the snippet
	"npm-intellisense.importLinebreak": ";\r\n",

	// For import command. The type of quotes to use in the snippet
	"npm-intellisense.importQuotes": "'",

	// (experimental) Enables path intellisense in subfolders of modules
	"npm-intellisense.packageSubfoldersIntellisense": false,

	// Look for package.json inside nearest directory instead of workspace root
	"npm-intellisense.recursivePackageJsonLookup": true,

	// Scans devDependencies as well
	"npm-intellisense.scanDevDependencies": false,

	// shows build in node modules like 'path' of 'fs'
	"npm-intellisense.showBuildInLibs": false,

	// Sets an absolute path to the current workspace
	"path-intellisense.absolutePathToWorkspace": true,

	// Automatically adds slash after directory
	"path-intellisense.autoSlashAfterDirectory": false,

	// Adds the file extension to a import statements
	"path-intellisense.extensionOnImport": false,

	// Mappings for paths
	"path-intellisense.mappings": {},

	// Show hidden files
	"path-intellisense.showHiddenFiles": false,

	// Always show the ESlint status bar item.
	"eslint.alwaysShowStatus": false,

	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,

	// Show disable lint rule in the quick fix menu.
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine"
	},

	// Show open lint rule documentation web page in the quick fix menu.
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},

	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Only fixes reported problems that have non overlapping textual edits. This options runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",

	// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
	"eslint.codeActionsOnSave.rules": null,

	// Enables ESLint debug mode (same as `--debug` on the command line)
	"eslint.debug": false,

	// Controls whether eslint is enabled or not.
	"eslint.enable": true,

	// Enables ESLint as a formatter.
	"eslint.format.enable": false,

	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,

	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",

	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",

	// The value of `NODE_ENV` to use when running eslint tasks.
	"eslint.nodeEnv": null,

	// A path added to `NODE_PATH` when resolving the eslint module.
	"eslint.nodePath": null,

	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",

	// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
	"eslint.options": {},

	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",

	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"vue",
		"markdown"
	],

	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,

	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,

	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],

	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",

	// The location of the node binary to run ESLint under.
	// 
	// - When specified as a user/machine setting, the Node version from `eslint.runtime` automatically replaces the built-in version.
	// - When specified as a workspace setting, `eslint.runtime` allows you to switch to use that version with the `ESLint: Select Node version` command.
	"eslint.runtime": null,

	// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
	"eslint.runtime.execArgv": null,

	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",

	// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
	"eslint.useESLintClass": false,

	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": [],

	// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
	"eslint.workingDirectories": [],

	// npm bin name
	"npm.bin": "npm",

	// Enable npm commands in the macOS touchbar.
	"npm.enableTouchbar": false,

	// Look for 'package.json' files in these directories
	"npm.includeDirectories": [],

	// Run npm commands in a terminal, otherwise shows the output in the output panel
	"npm.runInTerminal": true,

	// Look for 'package.json' in the root directory of the workspace
	"npm.useRootDirectory": true,

	// Validate installed modules
	"npm.validate.enable": true,

	// Relative path to node_modules folder.
	"search-node-modules.path": "node_modules",

	// Default to folder of last opened file when searching.
	"search-node-modules.useLastFolder": false,

	// Where to find base React component
	"reactPureToClass.reactComponent": "React.Component",

	// List of @babel/parser plugins to use, see: https://babeljs.io/docs/en/babel-parser#plugins
	"vscodeReactRefactor.babelPlugins": "objectRestSpread, classProperties, typescript, jsx",

	// Display parser error messages
	"vscodeReactRefactor.enableDebug": false,

	// The created React Functional Component will be
	"vscodeReactRefactor.functionType": "function",

	// Specifies the folder path where components will be extracted to.
	"theshukran-react-utils.path": "/src/components/",

	// Absolute path to custom **component** template directory. If left blank, defaults to built-in template.
	"generate-react-component.componentTemplatePath": "",

	// Toggle certain portions of your templates with these named booleans.
	"generate-react-component.conditionals": [
		"class"
	],

	// Absolute path to custom **container** template directory. If left blank, defaults to built-in template.
	"generate-react-component.containerTemplatePath": "",

	// If true, after generate propTypes, trigger vscode's formatting for PropTypes
	"propTypes.afterFormat": false,

	// If true, some shape type which is similar to Array will be set array type instead
	"propTypes.arrayLike": false,

	// Auto import or require PropTypes module
	"propTypes.autoImport": "ES6",

	// PropTypes Generate Style
	"propTypes.codeStyle": "default",

	// If true, all PropTypes is will be set to isRequired
	"propTypes.isRequired": false,

	// If true, old PropTypes different with new PropTypes will be deleted, only used when `noMergeOld` is false
	"propTypes.mergeOldIfExist": false,

	// Defaults is merge old PropTypes, if true, will generate new PropTypes
	"propTypes.noMergeOld": false,

	// Defaults is generate shape type, if true, will generate object type
	"propTypes.noShape": false,

	// Override the quotes used in string literals
	"propTypes.quote": null,

	// If true, there will be a semicolon after PropType statement
	"propTypes.semicolon": false,

	// If true, all PropTypes is sort by name
	"propTypes.sort": true,

	// Number of spaces the pretty-printer should use per tab for indentation
	"propTypes.tabWidth": 2,

	// Controls the printing of trailing commas in object literals, array expressions and function parameters
	"propTypes.trailingComma": false,

	// CSS for the active scope. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.activeScopeCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// Should different brackets share a color group (Consecutive), or use their own color group (Independent)
	"bracket-pair-colorizer-2.colorMode": "Consecutive",

	// Scope colors
	"bracket-pair-colorizer-2.colors": [
		"Gold",
		"Orchid",
		"LightSkyBlue"
	],

	// Don't colorize files of these languages
	"bracket-pair-colorizer-2.excludedLanguages": [],

	// Should opening brackets iterate the color cycle even if they are not nested
	"bracket-pair-colorizer-2.forceIterationColorCycle": false,

	// Ensure that an opening brackets color does not match a previous brackets color
	"bracket-pair-colorizer-2.forceUniqueOpeningColor": false,

	// Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.
	"bracket-pair-colorizer-2.highlightActiveScope": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.rulerPosition": "Center",

	// CSS for the scope line. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.scopeLineCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// True: Scope Line will start from the ending bracket position. False: Scope Line will always be at column 0
	"bracket-pair-colorizer-2.scopeLineRelativePosition": true,

	// Show active bracket scope in gutter?
	"bracket-pair-colorizer-2.showBracketsInGutter": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.showBracketsInRuler": false,

	// Show a horizontal line to create a block around the active bracket scope?
	"bracket-pair-colorizer-2.showHorizontalScopeLine": true,

	// Show a vertical line on the left side of the editor representing the active bracket scope?
	"bracket-pair-colorizer-2.showVerticalScopeLine": true,

	// Unmatched Scope Color
	"bracket-pair-colorizer-2.unmatchedScopeColor": "Red",

	// Open or not open the preview screen automatically
	"svgviewer.enableautopreview": false,

	// How to open the screen (vscode.ViewColumn)
	"svgviewer.previewcolumn": "Beside",

	// Show zoom in/out button in preview windows
	"svgviewer.showzoominout": false,

	// Color setting for transparency
	"svgviewer.transparencycolor": null,

	// Show Transparency Grid
	"svgviewer.transparencygrid": true,

	// Deprecated, honors VS Code's Workspace Trust setting
	// Prevents running JavaScript in custom rules, markdown-it plugins, and configuration files
	"markdownlint.blockJavaScript": false,

	// markdownlint config object
	"markdownlint.config": {},

	// Array of paths for custom rules to include when linting
	"markdownlint.customRules": [],

	// Deprecated, see CHANGELOG.md and markdownlint.blockJavaScript
	// Array of workspace paths that load custom rules without prompting
	"markdownlint.customRulesAlwaysAllow": [],

	// Makes it easier to focus while typing by hiding violations on the current line
	"markdownlint.focusMode": false,

	// Array or file of glob expressions to ignore when linting
	"markdownlint.ignore": ".markdownlintignore",

	// Run the linter on save (onSave) or on type (onType)
	"markdownlint.run": "onType",

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether prettier is enabled or not.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the prettier module
	"prettier.prettierPath": "",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
	"prettier.vueIndentScriptAndStyle": false,

	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
	"auto-close-tag.activationOnLanguage": [
		"xml",
		"php",
		"blade",
		"ejs",
		"jinja",
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"plaintext",
		"markdown",
		"vue",
		"liquid",
		"erb",
		"lang-cfml",
		"cfml",
		"HTML (EEx)",
		"HTML (Eex)",
		"plist"
	],

	// Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
	"auto-close-tag.disableOnLanguage": [],

	// Whether to close self-closing tag automatically
	"auto-close-tag.enableAutoCloseSelfClosingTag": true,

	// Whether to insert close tag automatically
	"auto-close-tag.enableAutoCloseTag": true,

	// Set the tag list that would not be auto closed.
	"auto-close-tag.excludedTags": [
		"area",
		"base",
		"br",
		"col",
		"command",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	],

	// Enable both Visual Studio and Sublime Text mode
	"auto-close-tag.fullMode": false,

	// Insert a space before the forward slash in a self-closing tag.
	"auto-close-tag.insertSpaceBeforeSelfClosingTag": false,

	// Auto close tag when </ is typed, same as Sublime Text 3
	"auto-close-tag.SublimeText3Mode": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
	"auto-rename-tag.activationOnLanguage": [
		"*"
	],

	// Controls if plugin is enabled
	"color-highlight.enable": true,

	// An array of language ids which should be highlighted by Color Highlight. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
	"color-highlight.languages": [
		"*"
	],

	// Style of the highlight. Can be 'dot-before', 'dot-after', 'foreground', 'background', 'outline', 'underline'
	"color-highlight.markerType": "background",

	// Highlight colors on the ruler (scroll bar), true/false
	"color-highlight.markRuler": true,

	// Highlight rgb without functions like rgb() ('255, 255, 255', [255, 255, 255], '255 255 255', etc.)
	"color-highlight.matchRgbWithNoFunction": false,

	// Highlight color words in all files (grey, green, etc.)
	"color-highlight.matchWords": false,

	// An array of language ids which should be highlighted by Color Highlight with the rgbWithNoFunction pattern. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
	"color-highlight.rgbWithNoFunctionLanguages": [
		"*"
	],

	// Array of absolute paths to search while perform file lookups.
	"color-highlight.sass.includePaths": [],

	// Changez la valeur à true pour télécharger automatiquement les paramètres lors du démarrage de VSCode. [Redémarrage de VSCode Nécessaire]
	"sync.autoDownload": false,

	// Changez la valeur à true afin d'uploader automatiquement lors de modification des paramètres. [Redémarrage de VSCode Nécessaire]
	"sync.autoUpload": false,

	// Changez la valeur à true si vous souhaitez télécharger les paramètres, même lorsque vous avez les derniers paramètres.
	"sync.forceDownload": false,

	// Changez la valeur à true si vous souhaitez uploader les paramètres, même lorsque le GIST a de nouveaux paramètres.
	"sync.forceUpload": false,

	// GitHub GIST ID pour Settings Sync.
	"sync.gist": "",

	// Lorsque la valeur est true, affiche le résultat dans la barre d'état au lieu de la page de résumé.
	"sync.quietSync": false,

	// Changez la valeur à false si vous ne voulez pas supprimer des extensions pendant le téléchargement.
	"sync.removeExtensions": true,

	// Changez la valeur à false si vous ne voulez pas uploader/télécharger l'extensions.
	"sync.syncExtensions": true,

	// Enable / Disable allowing word compounds. `true` means `arraylength` would be ok, `false` means it would not pass.
	"cSpell.allowCompoundWords": false,

	// Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).
	"cSpell.allowedSchemas": [
		"file",
		"gist",
		"sftp",
		"untitled",
		"vscode-notebook-cell"
	],

	// The maximum average length of chunks of text without word breaks.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`
	// 
	// **Error Message:** _Average Word Size is Too High._
	// 
	// If you are seeing this message, it means that the file contains mostly long lines
	// without many word breaks.
	"cSpell.blockCheckingWhenAverageChunkSizeGreatherThan": 80,

	// The maximum line length.
	// 
	// Block spell checking if lines are longer than the value given.
	// This is used to prevent spell checking generated files.
	// 
	// **Error Message:** _Lines are too long._
	"cSpell.blockCheckingWhenLineLengthGreaterThan": 10000,

	// The maximum length of a chunk of text without word breaks.
	// 
	// It is used to prevent spell checking of generated files.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`, i.e. spaces or braces.
	// 
	// **Error Message:** _Maximum Word Length is Too High._
	// 
	// If you are seeing this message, it means that the file contains a very long line
	// without many word breaks.
	"cSpell.blockCheckingWhenTextChunkSizeGreaterThan": 500,

	// Words must match case rules.
	"cSpell.caseSensitive": false,

	// The limit in K-Characters to be checked in a file.
	"cSpell.checkLimit": 500,

	// Define custom dictionaries to be included by default for the folder.
	// If `addWords` is `true` words will be added to this dictionary.
	// 
	// **Example:**
	// 
	// ```js
	// customDictionaries: {
	//   "project-words": {
	//     "name": "project-words",
	//     "path": "${workspaceRoot}/project-words.txt",
	//     "description": "Words used in this project",
	//     "addWords": true
	//   }
	// }
	// ```
	"cSpell.customDictionaries": {},

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the folder.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customFolderDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the user.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customUserDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the workspace.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customWorkspaceDictionaries": [],

	// Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle.
	//  - Error: Report Spelling Issues as Errors
	//  - Warning: Report Spelling Issues as Warnings
	//  - Information: Report Spelling Issues as Information
	//  - Hint: Report Spelling Issues as Hints, will not show up in Problems
	"cSpell.diagnosticLevel": "Information",

	// Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.
	"cSpell.dictionaries": [],

	// Define additional available dictionaries
	"cSpell.dictionaryDefinitions": [],

	// Enable / Disable the spell checker.
	"cSpell.enabled": true,

	// Specify file types to spell check. Use `cSpell.enableFiletypes` to Enable / Disable checking files types.
	"cSpell.enabledLanguageIds": [
		"asciidoc",
		"c",
		"cpp",
		"csharp",
		"css",
		"git-commit",
		"go",
		"graphql",
		"handlebars",
		"haskell",
		"html",
		"jade",
		"java",
		"javascript",
		"javascriptreact",
		"json",
		"jsonc",
		"jupyter",
		"latex",
		"less",
		"markdown",
		"php",
		"plaintext",
		"python",
		"pug",
		"restructuredtext",
		"rust",
		"scala",
		"scss",
		"text",
		"typescript",
		"typescriptreact",
		"yaml",
		"yml"
	],

	// Enable / Disable checking file types (languageIds).
	// These are in additional to the file types specified by `cSpell.enabledLanguageIds`.
	// To disable a language, prefix with `!` as in `!json`,
	// 
	// Example:
	// ```
	// jsonc       // enable checking for jsonc
	// !json       // disable checking for json
	// kotlin      // enable checking for kotlin
	// ```
	"cSpell.enableFiletypes": [],

	// Show Regular Expression Explorer
	"cSpell.experimental.enableRegexpView": false,

	// Glob patterns of files to be checked. Glob patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.files": [],

	// Use Rename when fixing spelling issues.
	"cSpell.fixSpellingWithRenameProvider": true,

	// list of words to always be considered incorrect.
	"cSpell.flagWords": [],

	// The root to use for glop patterns found in this configuration. Default: The current workspace folder. Use `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file. Defining globRoot, does not impact imported configurations.
	// 
	// Special Values:
	// 
	// - `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\n
	// - `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.
	"cSpell.globRoot": "",

	// Glob patterns of files to be ignored. The patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.ignorePaths": [
		"package-lock.json",
		"node_modules",
		"vscode-extension",
		".git/objects",
		".vscode",
		".vscode-insiders"
	],

	// List of RegExp patterns or Pattern names to exclude from spell checking.
	// 
	// Example: ["href"] - to exclude html href
	"cSpell.ignoreRegExpList": [],

	// A list of words to be ignored by the spell checker.
	"cSpell.ignoreWords": [],

	// Other settings files to be included
	"cSpell.import": [],

	// List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.
	"cSpell.includeRegExpList": [],

	// Current active spelling language.
	// Example: "en-GB" for British English
	// Example: "en,nl" to enable both English and Dutch
	"cSpell.language": "en",

	// Additional settings for individual languages.
	"cSpell.languageSettings": [],

	// Set the Debug Level for logging messages.
	//  - None: Do not log
	//  - Error: Log only errors
	//  - Warning: Log errors and warnings
	//  - Information: Log errors, warnings, and info
	//  - Debug: Log everything (noisy)
	"cSpell.logLevel": "Error",

	// The maximum number of times the same word can be flagged as an error in a file.
	"cSpell.maxDuplicateProblems": 5,

	// Controls the maximum number of spelling errors per document.
	"cSpell.maxNumberOfProblems": 100,

	// The minimum length of a word before checking it against a dictionary.
	"cSpell.minWordLength": 4,

	// Prevents searching for local configuration when checking individual documents.
	"cSpell.noConfigSearch": false,

	// Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.
	// 
	// Note: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.
	"cSpell.noSuggestDictionaries": [],

	// Controls the number of suggestions shown.
	"cSpell.numSuggestions": 8,

	// Overrides to apply based upon the file path.
	"cSpell.overrides": [],

	// Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList
	"cSpell.patterns": [],

	// Show Spell Checker actions in Editor Context Menu
	"cSpell.showCommandsInEditorContextMenu": true,

	// Display the spell checker status on the status bar.
	"cSpell.showStatus": true,

	// The side of the status bar to display the spell checker status.
	//  - Left: Left Side of Statusbar
	//  - Right: Right Side of Statusbar
	"cSpell.showStatusAlignment": "Right",

	// Delay in ms after a document has changed before checking it for spelling errors.
	"cSpell.spellCheckDelayMs": 50,

	// Only spell check files that are in the currently open workspace.
	// This same effect can be achieved using the `files` setting.
	// 
	// ```
	// "cSpell.files": ["**", "**​/.*", "**​/.*​/**"]
	// ```
	"cSpell.spellCheckOnlyWorkspaceFiles": false,

	// The type of menu used to display spelling suggestions.
	//  - quickPick: Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)
	//  - quickFix: Suggestions will appear inline near the word, inside the text editor.
	"cSpell.suggestionMenuType": "quickPick",

	// The maximum number of changes allowed on a word to be considered a suggestions.
	// 
	// For example, appending an `s` onto `example` -> `examples` is considered 1 change.
	// 
	// Range: between 1 and 5.
	"cSpell.suggestionNumChanges": 3,

	// The maximum amount of time in milliseconds to generate suggestions for a word.
	"cSpell.suggestionsTimeout": 400,

	// Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.
	"cSpell.useGitignore": true,

	// Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.
	// 
	// When true, the spell checker will search up the directory structure for the existence of a PnP file and load it.
	"cSpell.usePnP": false,

	// Words to add to global dictionary -- should only be in the user config file.
	"cSpell.userWords": [],

	// list of words to be always considered correct
	"cSpell.words": [],

	// Define the path to the workspace root folder in a multi-root workspace.
	// By default it is the first folder.
	// 
	// This is used to find the `cspell.json` file for the workspace.
	// 
	// Example: use the `client` folder
	// ```
	// ${workspaceFolder:client}
	// ```
	"cSpell.workspaceRootPath": "",

	// The link to an online tool to view a commit (use `${hash}` for the commit hash).
	"gitblame.commitUrl": "",

	// Ignore whitespace changes when blaming (`-w` flag)
	"gitblame.ignoreWhitespace": false,

	// Customize the info message
	"gitblame.infoMessageFormat": "${commit.summary}",

	// BitBucket uses _commits_ instead of _commit_ in their web interface. Turn this on if you want the View button to work for BitBucket.
	"gitblame.isWebPathPlural": false,

	// An array of substrings that, when present in the git origin URL, activates `gitblame.isWebPathPlural`
	"gitblame.pluralWebPathSubstrings": [
		"bitbucket",
		"atlassian"
	],

	// The name of the git remote used to build the URL.
	"gitblame.remoteName": "origin",

	// 
	//  - Show info message: Show a info message with a short summary of the commit
	//  - Open tool URL: Attempty to directly open the tool URL
	"gitblame.statusBarMessageClickAction": "Show info message",

	// Display status bar message to the right
	"gitblame.statusBarMessageDisplayRight": false,

	// Customize the status bar message
	"gitblame.statusBarMessageFormat": "Blame ${author.name} ( ${time.ago} )",

	// Customize the status bar message
	"gitblame.statusBarMessageNoCommit": "Not Committed Yet",

	// Priority where the status bar view should be placed
	"gitblame.statusBarPositionPriority": 0,

	// Default style for all customized keywords
	"todohighlight.defaultStyle": {},

	// Glob pattern that defines files and folders to exclude while listing annotations.
	"todohighlight.exclude": [
		"**/node_modules/**",
		"**/bower_components/**",
		"**/dist/**",
		"**/build/**",
		"**/.vscode/**",
		"**/.github/**",
		"**/_output/**",
		"**/*.min.*",
		"**/*.map",
		"**/.next/**"
	],

	// Glob patterns that defines the files to search for. Only include files you need, DO NOT USE `{**/*.*}` for both permormance and avoiding binary files reason.
	"todohighlight.include": [
		"**/*.js",
		"**/*.jsx",
		"**/*.ts",
		"**/*.tsx",
		"**/*.html",
		"**/*.php",
		"**/*.css",
		"**/*.scss"
	],

	// Specify whether the keywords are case sensitive or not
	"todohighlight.isCaseSensitive": true,

	// Enable or disable the highlight
	"todohighlight.isEnable": true,

	// Customize keywords and colors. Any css color identifier is valid.
	"todohighlight.keywords": [],

	// Specify keywords via RegExp instead of `todohighlight.keywords` one by one. NOTE that if this presents, `todohighlight.keywords` will be ignored. And REMEMBER to escapse the back slash if there's any in your regexp (using \\ instead of single back slash)
	"todohighlight.keywordsPattern": "",

	// Max files for searching
	"todohighlight.maxFilesForSearch": 5120,

	// If the file path within the output channel not clickable, set this to true to toggle the path patten between `<path>#<line>` and `<path>:<line>:<column>`
	"todohighlight.toggleURI": false,

	// A list of CSS based languages where suggestions are enabled.
	"html-css-class-completion.CSSLanguages": [
		"css",
		"sass",
		"scss"
	],

	// Enables completion when you're writing Emmet abbreviations.
	"html-css-class-completion.enableEmmetSupport": false,

	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"html-css-class-completion.excludeGlobPattern": "",

	// A list of HTML based languages where suggestions are enabled.
	"html-css-class-completion.HTMLLanguages": [
		"html",
		"vue",
		"razor",
		"blade",
		"handlebars",
		"twig",
		"django-html",
		"php",
		"markdown",
		"erb",
		"ejs",
		"svelte"
	],

	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"html-css-class-completion.includeGlobPattern": "**/*.{css,html}",

	// A list of JavaScript based languages where suggestions are enabled.
	"html-css-class-completion.JavaScriptLanguages": [
		"javascript",
		"javascriptreact",
		"typescriptreact"
	],

	// Auto strip module extensions
	"node-module-intellisense.autoStripExtensions": [
		".js",
		".jsx",
		".ts",
		".d.ts",
		".tsx"
	],

	// Module Paths to scan. Use ${workspaceRoot} for workspace lookup.
	"node-module-intellisense.modulePaths": [],

	// Scans builtin modules as well
	"node-module-intellisense.scanBuiltinModules": true,

	// Scans devDependencies as well
	"node-module-intellisense.scanDevDependencies": true,

	// Scans file modules as well
	"node-module-intellisense.scanFileModules": true,

	// Disabled the .. option in the recommendations.
	"path-autocomplete.disableUpOneFolder": true,

	// Enables the trailing slash on the folder path insertion.
	"path-autocomplete.enableFolderTrailingSlash": true,

	// Allows you to exclude certain files from the suggestions.
	"path-autocomplete.excludedItems": {},

	// Adds the extension when inserting file on import or require statements.
	"path-autocomplete.extensionOnImport": false,

	// Glob patterns for disabling the path completion in the specified file types.
	"path-autocomplete.ignoredFilesPattern": "",

	// List of prefixes for which completions will be skipped.
	"path-autocomplete.ignoredPrefixes": [],

	// Adds the extension when inserting file names.
	"path-autocomplete.includeExtension": true,

	// Defines custom mappings for the autocomplete paths.
	"path-autocomplete.pathMappings": {},

	// Defines the separators for support outside string.
	"path-autocomplete.pathSeparators": " \t({[",

	// Custom transformations applied to the inserted text.
	"path-autocomplete.transformations": [],

	// Enables path autocompletion outside strings.
	"path-autocomplete.triggerOutsideStrings": false,

	// If enabled it will use backslash (\) as a path separator.
	"path-autocomplete.useBackslash": false,

	// Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
	"go.addTags": {
		"tags": "json",
		"options": "json=omitempty",
		"promptForTags": false,
		"transform": "snakecase",
		"template": ""
	},

	// Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools or versioned tools from https://gopkg.in. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.alternateTools": {},

	// Include unimported packages in auto-complete suggestions. Not applicable when using the language server.
	"go.autocompleteUnimportedPackages": false,

	// Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildFlags": [],

	// Compiles code on file save using 'go build' or 'go test -c'. Options are 'workspace', 'package', or 'off'.  Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.buildOnSave": "package",

	// The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildTags": "",

	// This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
	"go.coverageDecorator": {
		"type": "highlight",
		"coveredHighlightColor": "rgba(64,128,128,0.5)",
		"uncoveredHighlightColor": "rgba(128,64,64,0.25)",
		"coveredBorderColor": "rgba(64,128,128,0.5)",
		"uncoveredBorderColor": "rgba(128,64,64,0.25)",
		"coveredGutterStyle": "blockblue",
		"uncoveredGutterStyle": "slashyellow"
	},

	// Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
	"go.coverageOptions": "showBothCoveredAndUncoveredCode",

	// When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
	"go.coverMode": "default",

	// If true, runs 'go test -coverprofile' on save and shows test coverage.
	"go.coverOnSave": false,

	// If true, shows test coverage when Go: Test Function at cursor command is run.
	"go.coverOnSingleTest": false,

	// If true, shows test coverage when Go: Test Single File command is run.
	"go.coverOnSingleTestFile": false,

	// If true, shows test coverage when Go: Test Package command is run.
	"go.coverOnTestPackage": true,

	// When generating code coverage, should counts be shown as --374--
	"go.coverShowCounts": false,

	// Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
	"go.delveConfig": {
		"dlvLoadConfig": {
			"followPointers": true,
			"maxVariableRecurse": 1,
			"maxStringLen": 64,
			"maxArrayValues": 64,
			"maxStructFields": -1
		},
		"apiVersion": 2,
		"showGlobalVariables": false,
		"debugAdapter": "legacy",
		"substitutePath": []
	},

	// If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
	"go.disableConcurrentTests": false,

	// Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.
	"go.docsTool": "godoc",

	// Experimental Feature: Enable/Disable entries from the context menu in the editor.
	"go.editorContextMenuCommands": {
		"toggleTestFile": true,
		"addTags": true,
		"removeTags": false,
		"fillStruct": false,
		"testAtCursor": true,
		"testFile": false,
		"testPackage": false,
		"generateTestForFunction": true,
		"generateTestForFile": false,
		"generateTestForPackage": false,
		"addImport": true,
		"testCoverage": true,
		"playground": true,
		"debugTestAtCursor": true,
		"benchmarkAtCursor": false
	},

	// Feature level setting to enable/disable code lens for references and run/debug tests
	"go.enableCodeLens": {
		"references": false,
		"runtest": true
	},

	// Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
	"go.formatFlags": [],

	// Not applicable when using the language server. Choosing 'goimports', 'goreturns', or 'gofumports' will add missing imports and remove unused imports.
	//  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
	//  - gofmt: Formats the file according to the standard Go style.
	//  - goimports: Organizes imports and formats the file with gofmt.
	//  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat.
	//  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt.
	//  - gofumports: Applies gofumpt formatting and organizes imports.
	"go.formatTool": "default",

	// Additional command line flags to pass to `gotests` for generating tests.
	"go.generateTestsFlags": [],

	// Enable gocode's autobuild feature. Not applicable when using the language server.
	"go.gocodeAutoBuild": false,

	// Additional flags to pass to gocode. Not applicable when using the language server.
	"go.gocodeFlags": [
		"-builtin",
		"-ignore-case",
		"-unimported-packages"
	],

	// Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.
	"go.gocodePackageLookupMode": "go",

	// Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.gopath": null,

	// Specifies the GOROOT to use when no environment variable is set. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.goroot": null,

	// Folder names (not paths) to ignore while using Go to Symbol in Workspace feature. Not applicable when using the language server.
	"go.gotoSymbol.ignoreFolders": [],

	// If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeGoroot": false,

	// If false, the import statements will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeImports": false,

	// Infer GOPATH from the workspace root. This is ignored when using Go Modules. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.inferGopath": false,

	// If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
	"go.installDependenciesWhenBuilding": false,

	// Temporary flag to enable/disable diagnostics from the language server. This setting will be deprecated soon. Please see and response to [Issue 50](https://github.com/golang/vscode-go/issues/50).
	"go.languageServerExperimentalFeatures": {
		"diagnostics": true
	},

	// Flags like -rpc.trace and -logfile to be used while running the language server.
	"go.languageServerFlags": [],

	// Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
	"go.lintFlags": [],

	// Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
	"go.lintOnSave": "package",

	// Specifies Lint tool name.
	"go.lintTool": "staticcheck",

	// Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay. Not applicable when using the language server.
	"go.liveErrors": {
		"enabled": false,
		"delay": 500
	},

	// The logging level the extension logs at, defaults to 'error'
	"go.logging.level": "error",

	// The flags configured here will be passed through to command `goplay`
	"go.playground": {
		"openbrowser": true,
		"share": true,
		"run": true
	},

	// Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
	"go.removeTags": {
		"tags": "",
		"options": "",
		"promptForTags": false
	},

	// Apply the Go & PATH environment variables used by the extension to all integrated terminals.
	"go.terminal.activateEnvironment": true,

	// Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
	"go.testEnvFile": null,

	// Environment variables that will be passed to the process that runs the Go tests
	"go.testEnvVars": {},

	// Run benchmarks when running all tests in a file or folder.
	"go.testExplorer.alwaysRunBenchmarks": false,

	// Concatenate all test log messages for a given location into a single message.
	"go.testExplorer.concatenateMessages": true,

	// Enable the Go test explorer
	"go.testExplorer.enable": true,

	// Present packages in the test explorer flat or nested.
	"go.testExplorer.packageDisplayMode": "flat",

	// Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.
	"go.testExplorer.showDynamicSubtestsInEditor": false,

	// Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
	"go.testFlags": null,

	// Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
	"go.testOnSave": false,

	// The Go build tags to use for when running tests. If null, then buildTags will be used.
	"go.testTags": null,

	// Specifies the timeout for go test in ParseDuration format.
	"go.testTimeout": "30s",

	// Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS)
	"go.toolsEnvVars": {},

	// Location to install the Go tools that the extension depends on if you don't want them in your GOPATH. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.toolsGopath": null,

	// Automatically update the tools used by the extension, without prompting the user.
	"go.toolsManagement.autoUpdate": false,

	// Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
	//  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
	//  - local: checks only the minimum tools versions required by the extension
	//  - off: completely disables version check (not recommended)
	"go.toolsManagement.checkForUpdates": "proxy",

	// Trace the communication between VS Code and the Go language server.
	"go.trace.server": "off",

	// Complete functions with their parameter signature, including the variable type. Not propagated to the language server.
	"go.useCodeSnippetsOnFunctionSuggest": false,

	// Complete functions with their parameter signature, excluding the variable types. Use `gopls.usePlaceholders` when using the language server.
	"go.useCodeSnippetsOnFunctionSuggestWithoutType": false,

	// Use `go.toolsManagement.checkForUpdates` instead.
	// When enabled, the extension automatically checks the Go proxy if there are updates available for Go and the Go tools (at present, only gopls) it depends on and prompts the user accordingly
	"go.useGoProxyToCheckForToolUpdates": true,

	// Use the Go language server "gopls" from Google for powering language features like code navigation, completion, refactoring, formatting & diagnostics.
	"go.useLanguageServer": true,

	// Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"])
	"go.vetFlags": [],

	// Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.vetOnSave": "package",

	// Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
	"gopls": {},

	// 
	"to.enableCodeLens": true,

	// Array of keys which will accept an Intellisense suggestion before being typed.
	"punctual-intellisense.typeForwardKeys": [
		".",
		",",
		"!",
		"@",
		"#",
		"%",
		"^",
		"&",
		"*",
		"(",
		")",
		"-",
		"=",
		"+",
		"[",
		"]",
		"{",
		"}",
		"<",
		">",
		"/",
		"?",
		"|",
		"~",
		";",
		":",
		" "
	],

}